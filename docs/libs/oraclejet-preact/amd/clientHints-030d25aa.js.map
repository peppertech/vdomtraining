{"version":3,"file":"clientHints-030d25aa.js","sources":["../../src/utils/PRIVATE_clientHints/clientHints.ts"],"sourcesContent":["// Typescript does not support NavigatorUAData in its DOM lib,\n// therefore we declare our own type - see:\n//    https://wicg.github.io/ua-client-hints/#interface\ntype NavigatorUAData = {\n  brands: Array<{ brand: string; version: string }>;\n  mobile: boolean;\n  platform: string;\n};\n\n// Enum types\ntype ClientBrowser = 'chrome' | 'edge' | 'firefox' | 'safari' | 'unknown';\n\ntype ClientDeviceType = 'phone' | 'tablet' | 'unknown';\n\ntype ClientPlatform = 'android' | 'ios' | 'mac' | 'windows' | 'unknown';\n\ntype ClientTouchSupport = 'none' | 'primary' | 'secondary' | 'unknown';\n\ntype ClientHoverSupport = 'none' | 'pseudo-classes' | 'events' | 'unknown';\n\nexport type ClientHints = {\n  browser: ClientBrowser;\n  browserMajorVersion: number;\n  deviceType: ClientDeviceType;\n  platform: ClientPlatform;\n  touchSupport: ClientTouchSupport;\n  hoverSupport: ClientHoverSupport;\n};\n\nconst defaultClientHints: ClientHints = {\n  browser: 'unknown',\n  browserMajorVersion: -1,\n  deviceType: 'unknown',\n  platform: 'unknown',\n  touchSupport: 'unknown',\n  hoverSupport: 'unknown'\n};\n\nlet cachedClientHints: ClientHints;\n\nexport function getClientHints(uaString?: string): Readonly<ClientHints> {\n  // Compute if there is no cached result, OR if a userAgent string\n  //  was passed in as an argument\n  if (cachedClientHints === undefined || uaString) {\n    let hints: ClientHints;\n    // NOTE:  userAgentData only available from modern Chromium-based browsers\n    //        executing in a secure context - otherwise, fall back to processing\n    //        userAgent string\n    const userAgentData = (navigator as any)?.['userAgentData'] as NavigatorUAData;\n    if (userAgentData) {\n      hints = getHintsFromUserAgentData(userAgentData);\n    } else {\n      hints = getHintsFromUserAgentString(uaString ?? navigator?.userAgent ?? '');\n    }\n\n    // If no argument was passed in then this was computed from Navigator properties:\n    //    * determine touchSupport, hoverSupport\n    //    * cache the results\n    if (uaString === undefined) {\n      // NOTE:  Order is important (determination of hoverSupport depends upon touchSupport)\n      determineTouchSupport(hints);\n      determineHoverSupport(hints);\n      cachedClientHints = { ...hints };\n      Object.freeze(cachedClientHints);\n    }\n    // Otherwise, return the one-off User-Agent string results without touching the cache\n    else {\n      return hints;\n    }\n  }\n  return cachedClientHints;\n}\n\nfunction getHintsFromUserAgentData(userAgentData: NavigatorUAData): Readonly<ClientHints> {\n  const hints = { ...defaultClientHints };\n\n  // Loop through brands => browser, browserMajorVersion\n  for (const item of userAgentData.brands) {\n    const brand = item.brand.toLowerCase();\n    if (brand.indexOf('chrome') > -1) {\n      hints.browser = 'chrome';\n    } else if (brand.indexOf('edge') > -1) {\n      hints.browser = 'edge';\n    }\n    if (hints.browser !== 'unknown') {\n      hints.browserMajorVersion = Number(item.version);\n      break;\n    }\n  }\n\n  // Set deviceType, platform\n  const platform = userAgentData.platform.toLowerCase();\n  if (platform === 'windows') {\n    hints.platform = 'windows';\n  } else if (platform === 'android') {\n    hints.platform = 'android';\n    hints.deviceType = userAgentData.mobile ? 'phone' : 'tablet';\n  } else if (platform === 'macos') {\n    hints.platform = 'mac';\n  }\n  // TODO: Verify userAgentData support in Chrome 100 on iPhone/iPad when available\n  /*\n  else if (platform.indexOf('iphone') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'phone';\n  } else if (platform.indexOf('ipad') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'tablet';\n  } else if (platform.indexOf('ios') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = (userAgentData.mobile ? 'phone' : 'tablet');\n  }\n  */\n  return hints;\n}\n\nfunction getHintsFromUserAgentString(userAgent: string): Readonly<ClientHints> {\n  const hints = { ...defaultClientHints };\n\n  // Normalize the userAgent string\n  userAgent = userAgent.toLowerCase();\n\n  // Check platform, deviceType\n  if (userAgent.indexOf('iphone') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'phone';\n  } else if (\n    userAgent.indexOf('ipad') > -1 ||\n    // handle iPad/iPhone safari requesting desktop version of site\n    (userAgent.indexOf('macintosh') > -1 && navigator?.maxTouchPoints > 0)\n  ) {\n    hints.platform = 'ios';\n    hints.deviceType = 'tablet';\n  } else if (userAgent.indexOf('mac') > -1) {\n    hints.platform = 'mac';\n  } else if (userAgent.indexOf('android') > -1) {\n    hints.platform = 'android';\n  } else if (userAgent.indexOf('win') > -1) {\n    hints.platform = 'windows';\n  }\n\n  // Now work on browser, browserMajorVersion\n  if (userAgent.indexOf('edg') > -1) {\n    hints.browser = 'edge';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /edg\\/(\\d+)/);\n  } else if (userAgent.indexOf('chrome') > -1) {\n    hints.browser = 'chrome';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /chrome\\/(\\d+)/);\n  } else if (userAgent.indexOf('crios') > -1) {\n    hints.browser = 'chrome';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /crios\\/(\\d+)/);\n  } else if (userAgent.indexOf('fxios') > -1) {\n    hints.browser = 'firefox';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /fxios\\/(\\d+)/);\n  } else if (userAgent.indexOf('firefox') > -1) {\n    hints.browser = 'firefox';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /rv:(\\d+)/);\n  } else if (userAgent.indexOf('safari') > -1) {\n    hints.browser = 'safari';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /version\\/(\\d+)/);\n  }\n\n  return hints;\n}\n\nfunction parseMajorVersion(userAgent: string, majorVersionPattern: RegExp): number {\n  let majorVer;\n  const matches = userAgent.match(majorVersionPattern);\n  if (matches) {\n    const majorVerString = matches[1];\n    if (majorVerString) {\n      majorVer = parseInt(majorVerString);\n    }\n  }\n  return majorVer ?? -1;\n}\n\nfunction determineTouchSupport(hints: ClientHints): void {\n  // if no global window object, or if ontouchstart handler not supported & no touch points,\n  // then no touch support\n  if (\n    typeof window === 'undefined' ||\n    (!('ontouchstart' in window) && navigator.maxTouchPoints === 0)\n  ) {\n    hints.touchSupport = 'none';\n  }\n  // otherwise if primary input pointer is 'coarse', then touch is the primary input method\n  else if (window.matchMedia?.('(pointer: coarse)').matches) {\n    hints.touchSupport = 'primary';\n  }\n  // otherwise if ANY input pointer is 'coarse', then touch is a secondary input method\n  else if (window.matchMedia?.('(any-pointer: coarse)').matches) {\n    hints.touchSupport = 'secondary';\n  }\n\n  // NOTES:\n  //  - Pixel 7 devices have a bug (https://bugs.chromium.org/p/chromium/issues/detail?id=1384181) whereby\n  //    ALL pointer media queries return 'fine', causing us to report hints.touchSupport as 'unknown'.\n}\n\nfunction determineHoverSupport(hints: ClientHints): void {\n  // if no global window object, or if primary input does not support hover, then specify no hover support\n  if (typeof window === 'undefined' || window.matchMedia?.('(hover: none)').matches) {\n    hints.hoverSupport = 'none';\n  }\n  // otherwise primary input must support hover - if there is some level of touch support and the primary\n  // input pointer is 'fine' (indicating the presence of a hover-able pointer), then component code\n  // should use event listeners to implement hover support\n  else if (hints.touchSupport !== 'none' && window.matchMedia?.('(pointer: fine)').matches) {\n    hints.hoverSupport = 'events';\n  }\n  // otherwise specify that component code can assume native CSS support for hover\n  else {\n    hints.hoverSupport = 'pseudo-classes';\n  }\n}\n"],"names":["defaultClientHints","browser","browserMajorVersion","deviceType","platform","touchSupport","hoverSupport","cachedClientHints","parseMajorVersion","userAgent","majorVersionPattern","majorVer","matches","match","majorVerString","parseInt","uaString","undefined","hints","userAgentData","navigator","item","brands","brand","toLowerCase","indexOf","Number","version","mobile","getHintsFromUserAgentData","maxTouchPoints","getHintsFromUserAgentString","window","matchMedia","determineTouchSupport","determineHoverSupport","Object","freeze"],"mappings":"6CA6BA,MAAMA,EAAkC,CACtCC,QAAS,UACTC,qBAAsB,EACtBC,WAAY,UACZC,SAAU,UACVC,aAAc,UACdC,aAAc,WAGhB,IAAIC,EA+HJ,SAASC,EAAkBC,EAAmBC,GAC5C,IAAIC,EACJ,MAAMC,EAAUH,EAAUI,MAAMH,GAChC,GAAIE,EAAS,CACX,MAAME,EAAiBF,EAAQ,GAC3BE,IACFH,EAAWI,SAASD,GAEvB,CACD,OAAOH,IAAa,CACtB,kBAvIM,SAAyBK,GAG7B,QAA0BC,IAAtBV,GAAmCS,EAAU,CAC/C,IAAIE,EAIJ,MAAMC,EAAiBC,WAAmC,cAU1D,GAREF,EADEC,EAwBR,SAAmCA,GACjC,MAAMD,EAAQ,IAAKlB,GAGnB,IAAK,MAAMqB,KAAQF,EAAcG,OAAQ,CACvC,MAAMC,EAAQF,EAAKE,MAAMC,cAMzB,GALID,EAAME,QAAQ,WAAa,EAC7BP,EAAMjB,QAAU,SACPsB,EAAME,QAAQ,SAAW,IAClCP,EAAMjB,QAAU,QAEI,YAAlBiB,EAAMjB,QAAuB,CAC/BiB,EAAMhB,oBAAsBwB,OAAOL,EAAKM,SACxC,KACD,CACF,CAGD,MAAMvB,EAAWe,EAAcf,SAASoB,cACvB,YAAbpB,EACFc,EAAMd,SAAW,UACK,YAAbA,GACTc,EAAMd,SAAW,UACjBc,EAAMf,WAAagB,EAAcS,OAAS,QAAU,UAC9B,UAAbxB,IACTc,EAAMd,SAAW,OAenB,OAAOc,CACT,CAhEcW,CAA0BV,GAkExC,SAAqCV,GACnC,MAAMS,EAAQ,IAAKlB,IAGnBS,EAAYA,EAAUe,eAGRC,QAAQ,WAAa,GACjCP,EAAMd,SAAW,MACjBc,EAAMf,WAAa,SAEnBM,EAAUgB,QAAQ,SAAW,GAE5BhB,EAAUgB,QAAQ,cAAgB,GAAKL,WAAWU,eAAiB,GAEpEZ,EAAMd,SAAW,MACjBc,EAAMf,WAAa,UACVM,EAAUgB,QAAQ,QAAU,EACrCP,EAAMd,SAAW,MACRK,EAAUgB,QAAQ,YAAc,EACzCP,EAAMd,SAAW,UACRK,EAAUgB,QAAQ,QAAU,IACrCP,EAAMd,SAAW,WAIfK,EAAUgB,QAAQ,QAAU,GAC9BP,EAAMjB,QAAU,OAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,eAChDA,EAAUgB,QAAQ,WAAa,GACxCP,EAAMjB,QAAU,SAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,kBAChDA,EAAUgB,QAAQ,UAAY,GACvCP,EAAMjB,QAAU,SAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,iBAChDA,EAAUgB,QAAQ,UAAY,GACvCP,EAAMjB,QAAU,UAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,iBAChDA,EAAUgB,QAAQ,YAAc,GACzCP,EAAMjB,QAAU,UAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,aAChDA,EAAUgB,QAAQ,WAAa,IACxCP,EAAMjB,QAAU,SAChBiB,EAAMhB,oBAAsBM,EAAkBC,EAAW,mBAG3D,OAAOS,CACT,CA/Gca,CAA4Bf,GAAYI,WAAWX,WAAa,SAMzDQ,IAAbD,EASF,OAAOE,GA8Gb,SAA+BA,GAIT,oBAAXc,UACJ,iBAAkBA,SAAwC,IAA7BZ,UAAUU,eAE1CZ,EAAMb,aAAe,OAGd2B,OAAOC,aAAa,qBAAqBrB,QAChDM,EAAMb,aAAe,UAGd2B,OAAOC,aAAa,yBAAyBrB,UACpDM,EAAMb,aAAe,YAMzB,CA1IM6B,CAAsBhB,GA4I5B,SAA+BA,GAEP,oBAAXc,QAA0BA,OAAOC,aAAa,iBAAiBrB,QACxEM,EAAMZ,aAAe,OAKS,SAAvBY,EAAMb,cAA2B2B,OAAOC,aAAa,mBAAmBrB,QAC/EM,EAAMZ,aAAe,SAIrBY,EAAMZ,aAAe,gBAEzB,CA1JM6B,CAAsBjB,GACtBX,EAAoB,IAAKW,GACzBkB,OAAOC,OAAO9B,EAMjB,CACD,OAAOA,CACT"}