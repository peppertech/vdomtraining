{"version":3,"file":"buttonUtils-97878e90.js","sources":["../../src/utils/UNSAFE_buttonUtils/buttonUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonIntrinsicProps } from './toggle.types';\nimport { useButtonSetContext } from '#hooks/UNSAFE_useButtonSetContext';\nimport { ButtonSetButton } from '#UNSAFE_ButtonSetButton';\nimport { ButtonSetIconButton } from '#UNSAFE_ButtonSetIconButton';\nimport { ComponentProps } from 'preact';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport { generateId } from '#utils/PRIVATE_id';\n\ntype ButtonSetContextProps = ReturnType<typeof useButtonSetContext>;\ntype ButtonSetButtonProps = ComponentProps<typeof ButtonSetButton>;\ntype ButtonSetIconButtonProps = ComponentProps<typeof ButtonSetIconButton>;\n\n/**\n *\n * @param buttonProps\n * @returns globalEventProps that can be spread onto target element\n */\nexport function processGlobals(buttonProps: ButtonIntrinsicProps): {\n  globalEventProps: ButtonIntrinsicProps;\n} {\n  const globalEventProps = {\n    onBlur: buttonProps.onBlur,\n    onFocus: buttonProps.onFocus,\n    onMouseEnter: buttonProps.onMouseEnter,\n    onMouseLeave: buttonProps.onMouseLeave,\n    onTouchEnd: buttonProps.onTouchEnd,\n    onTouchStart: buttonProps.onTouchStart,\n    autofocus: buttonProps.autofocus\n  };\n\n  return {\n    globalEventProps\n  };\n}\n\n/**\n * Merge buttonset props with toggle props for spreadable properties and flags\n * @param toggleProps\n * @param buttonSetProps\n * @returns\n */\nexport function processSetButtonProps(\n  toggleProps: (ButtonSetButtonProps | ButtonSetIconButtonProps) & ButtonIntrinsicProps,\n  buttonSetProps: ButtonSetContextProps\n): {\n  isDisabled: boolean | undefined;\n  buttonSetButtonProps: ButtonSetButtonProps | ButtonSetIconButtonProps;\n  inputProps: ComponentProps<typeof ToggleButtonLabel>;\n  globalEventProps: ButtonIntrinsicProps;\n} {\n  const isDisabled = toggleProps.isDisabled ?? buttonSetProps.isDisabled ? true : undefined;\n\n  const commonProps = {\n    size: toggleProps.size ?? buttonSetProps.size,\n    isDisabled: isDisabled\n  };\n  const buttonProps = {\n    variant: toggleProps.variant ?? buttonSetProps.variant,\n    ...commonProps\n  };\n\n  const buttonSetButtonProps = {\n    layoutWidth: toggleProps.layoutWidth ?? buttonSetProps.layoutWidth,\n    ...buttonProps\n  };\n\n  const inputProps = {\n    inputType: buttonSetProps.inputType ?? toggleProps.inputType ?? 'checkbox',\n    inputName: buttonSetProps.inputName ?? toggleProps.inputName ?? generateId(),\n    ...commonProps\n  };\n\n  const { globalEventProps } = processGlobals(toggleProps);\n\n  return {\n    isDisabled,\n    buttonSetButtonProps,\n    inputProps,\n    globalEventProps\n  };\n}\n"],"names":["processGlobals","buttonProps","globalEventProps","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","autofocus","toggleProps","buttonSetProps","isDisabled","undefined","commonProps","size","variant","buttonSetButtonProps","layoutWidth","inputProps","inputType","inputName","generateId"],"mappings":"+DAwBM,SAAUA,EAAeC,GAa7B,MAAO,CACLC,iBAXuB,CACvBC,OAAQF,EAAYE,OACpBC,QAASH,EAAYG,QACrBC,aAAcJ,EAAYI,aAC1BC,aAAcL,EAAYK,aAC1BC,WAAYN,EAAYM,WACxBC,aAAcP,EAAYO,aAC1BC,UAAWR,EAAYQ,WAM3B,4CAQgB,SACdC,EACAC,GAOA,MAAMC,KAAaF,EAAYE,YAAcD,EAAeC,kBAAoBC,EAE1EC,EAAc,CAClBC,KAAML,EAAYK,MAAQJ,EAAeI,KACzCH,WAAYA,GAERX,EAAc,CAClBe,QAASN,EAAYM,SAAWL,EAAeK,WAC5CF,GAGCG,EAAuB,CAC3BC,YAAaR,EAAYQ,aAAeP,EAAeO,eACpDjB,GAGCkB,EAAa,CACjBC,UAAWT,EAAeS,WAAaV,EAAYU,WAAa,WAChEC,UAAWV,EAAeU,WAAaX,EAAYW,WAAaC,EAAAA,gBAC7DR,IAGCZ,iBAAEA,GAAqBF,EAAeU,GAE5C,MAAO,CACLE,aACAK,uBACAE,aACAjB,mBAEJ"}