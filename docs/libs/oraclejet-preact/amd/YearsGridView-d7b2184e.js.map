{"version":3,"file":"YearsGridView-d7b2184e.js","sources":["../../../../node_modules/ramda/es/internal/_isNumber.js","../../../../node_modules/ramda/es/range.js","../../src/PRIVATE_MonthYearGridView/useMonthCell.ts","../../src/PRIVATE_MonthYearGridView/MonthCell.tsx","../../src/PRIVATE_MonthYearGridView/MonthsGridView.tsx","../../src/PRIVATE_MonthYearGridView/YearCell.tsx","../../src/PRIVATE_MonthYearGridView/useYearCell.ts","../../src/PRIVATE_MonthYearGridView/YearsGridView.tsx"],"sourcesContent":["export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}","import _curry2 from \"./internal/_curry2.js\";\nimport _isNumber from \"./internal/_isNumber.js\";\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in the set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\n\nvar range =\n/*#__PURE__*/\n_curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n\n  var result = [];\n  var n = from;\n\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n\n  return result;\n});\n\nexport default range;","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { BundleType } from '#resources/nls/bundle';\nimport { getMonthName } from '#utils/PRIVATE_dayUtils';\nimport { IsoMonth } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps, useMemo } from 'preact/compat';\nimport { useCellNavigation } from '../UNSAFE_DatePicker/useCellNavigation';\nimport { useFocusableCell } from '../UNSAFE_DatePicker/useFocusableCell';\n\nexport type UseMonthCellProps = {\n  /**\n   * Specifies if this month is today's month.\n   */\n  isCurrent: boolean;\n\n  /**\n   * Specifies if this month should be focused first when\n   * one tabs into the MonthsGridView.\n   */\n  isFocusable: boolean;\n\n  /**\n   * Specifies if this month is currently focused.\n   */\n  isFocused: boolean;\n\n  /**\n   * Specifies if this month is currently selected.\n   */\n  isSelected: boolean;\n\n  /**\n   * The month represented by this MonthCell.\n   */\n  month: IsoMonth;\n\n  /**\n   * A callback that will be invoked when a selection action is performed on this MonthCell.\n   * @param payload The payload containing the month represented by this cell.\n   */\n  onAction: (payload: { month: IsoMonth }) => void;\n\n  /**\n   * A callback that will be invoked when a navigation action is performed on this MonthCell.\n   * @param payload The payload specifying the direction of the navigation performed and the month.\n   */\n  onNavigation: (payload: {\n    direction: 'up' | 'next' | 'down' | 'previous';\n    month: IsoMonth;\n  }) => void;\n};\n\n/**\n * A custom hook that adds functionalities to the MonthCell component and computes properties for the\n * StyledDatePickerButton.\n */\nexport const useMonthCell = ({\n  isCurrent,\n  isFocusable,\n  isFocused,\n  isSelected,\n  month,\n  onAction,\n  onNavigation\n}: UseMonthCellProps) => {\n  const { locale } = useUser();\n  const monthText = useMemo(\n    () => ({\n      short: getMonthName(locale, month, '*', 'short') as string,\n      long: getMonthName(locale, month, '*', 'long') as string\n    }),\n    [locale, month]\n  );\n\n  // custom aria label for selected and current month\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const ariaLabel = `${monthText.long}${\n    isCurrent ? `, ${translations.datePicker_currentDate()}` : ''\n  }${isSelected ? `, ${translations.datePicker_selected()}` : ''}`;\n\n  const buttonProps = useFocusableCell({ isFocusable, isFocused });\n  const buttonEventHandlers = useCellNavigation({\n    navigationMap: {\n      ArrowDown: 'down',\n      ArrowLeft: { ltr: 'previous', rtl: 'next' },\n      ArrowRight: { ltr: 'next', rtl: 'previous' },\n      ArrowUp: 'up'\n    },\n    payload: { month },\n    onAction,\n    onNavigation\n  });\n\n  return {\n    buttonProps: {\n      'aria-label': ariaLabel,\n      isActivable: true,\n      label: monthText.short,\n      isHoverable: true,\n      isSelected,\n      isToday: isCurrent,\n      variant: 'month' as const,\n      ...buttonProps,\n      ...buttonEventHandlers\n    } as ComponentProps<typeof StyledDatePickerButton>\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { UseMonthCellProps, useMonthCell } from './useMonthCell';\n\ntype PickedUseMonthCellProps = Pick<\n  UseMonthCellProps,\n  'isCurrent' | 'isFocusable' | 'isFocused' | 'isSelected' | 'month' | 'onAction' | 'onNavigation'\n>;\ntype Props = PickedUseMonthCellProps;\n\n/**\n * This component renders the individual month cell in the MonthsGridView.\n */\nexport const MonthCell = (props: Props) => {\n  const { buttonProps } = useMonthCell(props);\n  return <StyledDatePickerButton {...buttonProps} />;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Grid } from '#UNSAFE_Grid';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { IsoMonth } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps } from 'preact/compat';\nimport { range } from 'ramda';\nimport { MonthCell } from './MonthCell';\nimport { BundleType } from '#resources/nls/bundle';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\n\nconst MONTHS = range(1, 13) as IsoMonth[];\n\ntype PickedMonthCellProps = Pick<ComponentProps<typeof MonthCell>, 'onAction' | 'onNavigation'>;\ntype Props = PickedMonthCellProps &\n  TestIdProps & {\n    /**\n     * Specifies the current month determined from the today's date.\n     */\n    currentMonth?: IsoMonth;\n\n    /**\n     * Specifies which month cell should be focused first when tabbing\n     * into the MonthsGridView.\n     */\n    focusableMonth: IsoMonth;\n\n    /**\n     * Specifies if the focusableMonth month cell is currently focused.\n     * @default false\n     */\n    isFocused?: boolean;\n\n    /**\n     * Specifies which month cell is currently selected.\n     */\n    selectedMonth?: IsoMonth;\n  };\n\n/**\n * This component renders the Months Grid View for the DatePicker component.\n */\nexport const MonthsGridView = ({\n  currentMonth,\n  focusableMonth,\n  isFocused = false,\n  selectedMonth,\n  testId,\n  onAction,\n  onNavigation\n}: Props) => {\n  // Lay out the Months in a 3-row grid.\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const monthsAriaLabel = translations.datePicker_months();\n\n  return (\n    <Grid role=\"grid\" gap={['13.5x', '0x']} testId={testId} aria-label={monthsAriaLabel}>\n      {[0, 1, 2].map((rowIndex) => (\n        <Grid key={rowIndex} role=\"row\" gap={['0x', '3x']} gridTemplateColumns=\"repeat(4, 1fr)\">\n          {[0, 1, 2, 3].map((cellIndex) => {\n            const month = MONTHS[rowIndex * 4 + cellIndex];\n            return (\n              <div role=\"gridcell\">\n                <MonthCell\n                  key={`${month}`}\n                  month={month}\n                  isCurrent={month === currentMonth}\n                  isFocusable={month === focusableMonth}\n                  isFocused={month === focusableMonth && isFocused}\n                  isSelected={month === selectedMonth}\n                  onAction={onAction}\n                  onNavigation={onNavigation}\n                />\n              </div>\n            );\n          })}\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { UseYearCellProps, useYearCell } from './useYearCell';\n\ntype PickedUseYearCellProps = Pick<\n  UseYearCellProps,\n  'isCurrent' | 'isFocusable' | 'isFocused' | 'isSelected' | 'year' | 'onAction' | 'onNavigation'\n>;\ntype Props = PickedUseYearCellProps;\n\n/**\n * This component renders the individual year cell in the YearsGridView.\n */\nexport const YearCell = (props: Props) => {\n  const { buttonProps } = useYearCell(props);\n  return <StyledDatePickerButton {...buttonProps} />;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { BundleType } from '#resources/nls/bundle';\nimport { getNumericFormattedYear } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps } from 'preact/compat';\nimport { useCellNavigation } from '../UNSAFE_DatePicker/useCellNavigation';\nimport { useFocusableCell } from '../UNSAFE_DatePicker/useFocusableCell';\n\nexport type UseYearCellProps = {\n  /**\n   * Specifies if this year is today's year.\n   */\n  isCurrent: boolean;\n\n  /**\n   * Specifies if this year should be focused first when one\n   * tabs into the YearsGridView.\n   */\n  isFocusable: boolean;\n\n  /**\n   * Specifies if this year is currently focused.\n   */\n  isFocused: boolean;\n\n  /**\n   * Specifies if this year is currently selected.\n   */\n  isSelected: boolean;\n\n  /**\n   * The year represented by this YearCell.\n   */\n  year: number;\n\n  /**\n   * A callback that will be invoked when a selection action is performed on this YearCell.\n   * @param payload The payload containing the year represented by this cell.\n   */\n  onAction: (payload: { year: number }) => void;\n\n  /**\n   * A callback that will be invoked when a navigation action is performed on this YearCell.\n   * @param payload The payload specifying the direction of the navigation performed and the year.\n   */\n  onNavigation: (payload: {\n    direction: 'up' | 'next' | 'down' | 'previous' | 'previousDecade' | 'nextDecade';\n    year: number;\n  }) => void;\n};\n\n/**\n * A custom hook that adds functionalities to the YearCell component and computes properties for the\n * StyledDatePickerButton.\n */\nexport const useYearCell = ({\n  isCurrent,\n  isFocusable,\n  isFocused,\n  isSelected,\n  year,\n  onAction,\n  onNavigation\n}: UseYearCellProps) => {\n  const { locale } = useUser();\n  const yearText = getNumericFormattedYear(locale, year, 1);\n  // custom aria label for selected and current year\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const ariaLabel = `${yearText}${isCurrent ? `, ${translations.datePicker_currentDate()}` : ''}${\n    isSelected ? `, ${translations.datePicker_selected()}` : ''\n  }`;\n\n  const buttonProps = useFocusableCell({ isFocusable, isFocused });\n  const buttonEventHandlers = useCellNavigation({\n    navigationMap: {\n      ArrowDown: 'down',\n      ArrowLeft: { ltr: 'previous', rtl: 'next' },\n      ArrowRight: { ltr: 'next', rtl: 'previous' },\n      ArrowUp: 'up',\n      PageDown: 'previousDecade',\n      PageUp: 'nextDecade'\n    },\n    payload: { year },\n    onAction,\n    onNavigation\n  });\n\n  return {\n    buttonProps: {\n      'aria-label': ariaLabel,\n      isActivable: true,\n      label: yearText,\n      isHoverable: true,\n      isSelected,\n      isToday: isCurrent,\n      variant: 'year' as const,\n      ...buttonProps,\n      ...buttonEventHandlers\n    } as ComponentProps<typeof StyledDatePickerButton>\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Grid } from '#UNSAFE_Grid';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { getClosestDecade } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps } from 'preact/compat';\nimport { range } from 'ramda';\nimport { YearCell } from './YearCell';\nimport { BundleType } from '#resources/nls/bundle';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\n\n/**\n * Represents the total number of years rendered in the view\n */\nconst NUM_YEARS_IN_GRID = 11;\n\ntype PickedYearCellProps = Pick<ComponentProps<typeof YearCell>, 'onAction' | 'onNavigation'>;\ntype Props = PickedYearCellProps &\n  TestIdProps & {\n    /**\n     * Specifies the current year determined from the today's date.\n     */\n    currentYear?: number;\n\n    /**\n     * Specifies which year cell should be focused first when tabbing\n     * into the YearsGridView.\n     */\n    focusableYear: number;\n\n    /**\n     * Specifies if the focusableYear year cell is currently focused.\n     * @default false\n     */\n    isFocused?: boolean;\n\n    /**\n     * Specifies which year is currently selected.\n     */\n    selectedYear?: number;\n  };\n\n/**\n * This component renders the Years Grid View for the DatePicker component.\n */\nexport const YearsGridView = ({\n  currentYear,\n  focusableYear,\n  isFocused = false,\n  selectedYear,\n  testId,\n  onAction,\n  onNavigation\n}: Props) => {\n  const decade = getClosestDecade(focusableYear);\n  // Lay out the 11 Years in a 3-row grid.\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const yearsAriaLabel = translations.datePicker_years();\n\n  return (\n    <Grid role=\"grid\" gap={['13.5x', '0x']} testId={testId} aria-label={yearsAriaLabel}>\n      {[0, 1, 2].map((rowIndex) => (\n        <Grid key={rowIndex} role=\"row\" gap={['0x', '3x']} gridTemplateColumns=\"repeat(4, 1fr)\">\n          {range(rowIndex * 4, rowIndex * 4 + 4).map((index) => {\n            const year = decade + index;\n            if (year < decade + NUM_YEARS_IN_GRID) {\n              return (\n                <div role=\"gridcell\">\n                  <YearCell\n                    key={`${year}`}\n                    year={year}\n                    isCurrent={year === currentYear}\n                    isFocusable={year === focusableYear}\n                    isFocused={year === focusableYear && isFocused}\n                    isSelected={year === selectedYear}\n                    onAction={onAction}\n                    onNavigation={onNavigation}\n                  />\n                </div>\n              );\n            }\n            return null;\n          })}\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n"],"names":["_isNumber","x","Object","prototype","toString","call","range$1","_curry2","from","to","TypeError","result","n","push","MonthCell","props","buttonProps","isCurrent","isFocusable","isFocused","isSelected","month","onAction","onNavigation","locale","useUser","monthText","useMemo","short","getMonthName","long","translations","useTranslationBundle","ariaLabel","datePicker_currentDate","datePicker_selected","useFocusableCell","buttonEventHandlers","useCellNavigation","navigationMap","ArrowDown","ArrowLeft","ltr","rtl","ArrowRight","ArrowUp","payload","isActivable","label","isHoverable","isToday","variant","useMonthCell","_jsx","jsx","StyledDatePickerButton","MONTHS","range","YearCell","year","yearText","getNumericFormattedYear","PageDown","PageUp","useYearCell","currentMonth","focusableMonth","selectedMonth","testId","monthsAriaLabel","datePicker_months","Grid","role","gap","children","map","rowIndex","gridTemplateColumns","cellIndex","currentYear","focusableYear","selectedYear","decade","getClosestDecade","yearsAriaLabel","datePicker_years","index"],"mappings":"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"}