{"version":3,"file":"useVisAddBusyState-2d2ccb92.js","sources":["../../src/hooks/PRIVATE_useVisAddBusyState/useVisAddBusyState.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useVisBusyStateContext } from '#hooks/UNSAFE_useVisBusyStateContext';\nimport { useRef, useCallback, useLayoutEffect } from 'preact/hooks';\n\n/**\n * Provides way to add and resolve a busy state.\n */\nexport function useVisAddBusyState(description: string) {\n  const { addBusyState } = useVisBusyStateContext();\n  const resolverRef = useRef<() => void>();\n\n  const onBusyEnd = useCallback(() => {\n    resolverRef.current?.();\n    resolverRef.current = undefined;\n  }, []);\n\n  const onBusyStart = useCallback(() => {\n    // Resolve previous busy state if any\n    onBusyEnd();\n    resolverRef.current = addBusyState(description);\n  }, [description, onBusyEnd, addBusyState]);\n\n  // Resolve any pending busy state on unmount\n  useLayoutEffect(() => onBusyEnd(), [onBusyEnd]);\n\n  return {\n    onBusyStart,\n    onBusyEnd\n  };\n}\n"],"names":["description","addBusyState","useVisBusyStateContext","resolverRef","useRef","onBusyEnd","useCallback","current","undefined","onBusyStart","useLayoutEffect"],"mappings":"4JAcM,SAA6BA,GACjC,MAAMC,aAAEA,GAAiBC,EAAAA,yBACnBC,EAAcC,EAAAA,SAEdC,EAAYC,EAAAA,aAAY,KAC5BH,EAAYI,YACZJ,EAAYI,aAAUC,CAAS,GAC9B,IAEGC,EAAcH,EAAAA,aAAY,KAE9BD,IACAF,EAAYI,QAAUN,EAAaD,EAAY,GAC9C,CAACA,EAAaK,EAAWJ,IAK5B,OAFAS,EAAAA,iBAAgB,IAAML,KAAa,CAACA,IAE7B,CACLI,cACAJ,YAEJ"}