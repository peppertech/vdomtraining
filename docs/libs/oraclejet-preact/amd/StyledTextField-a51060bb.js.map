{"version":3,"file":"StyledTextField-a51060bb.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldContent.tsx","../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport type { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport type {\n  ReadonlyTextFieldStyles,\n  ReadonlyTextFieldVariantOptions\n} from './themes/ReadonlyTextFieldStyles.css';\nimport { ReadonlyTextFieldRedwoodTheme } from './themes/redwood/ReadonlyTextFieldTheme';\n\ntype VariantProps =\n  | {\n      variant?: never;\n      resize?: never;\n    }\n  | {\n      variant: 'textarea';\n      resize?: 'horizontal' | 'vertical' | 'both';\n    };\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  endContent?: ComponentChildren;\n  rootRef?: Ref<HTMLDivElement>;\n  hasZeroStartMargin?: boolean;\n};\n\n// Renders the oj-text-field-container dom which includes the\n// main (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const ReadonlyTextFieldContent = ({\n  variant,\n  insideLabel,\n  mainContent,\n  endContent,\n  rootRef,\n  resize\n}: Props) => {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const isInsideNonReadonlyForm = isFormLayout && !isReadonlyForm;\n  const hasInsideLabel = insideLabel !== undefined;\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const {\n    variantClasses: middleStyles,\n    styles: { textFieldEndContent }\n  } = useComponentTheme<TextFieldVariantOptions, TextFieldStyles>(TextFieldRedwoodTheme, {\n    middleContent: variant,\n    textAreaResizeDirection: resize && variant === 'textarea' ? direction : undefined\n  });\n\n  const {\n    classes: readonlyClassNames,\n    styles: {\n      readonlyTextFieldMiddleBase,\n      readonlyTextFieldMiddleNotInEnabledForm,\n      readonlyTextFieldMiddleInEnabledForm,\n      readonlyTextFieldMiddleInEnabledFormNotTextarea\n    }\n  } = useComponentTheme<ReadonlyTextFieldVariantOptions, ReadonlyTextFieldStyles>(\n    ReadonlyTextFieldRedwoodTheme,\n    {\n      insideNonReadonlyForm: isInsideNonReadonlyForm\n        ? 'isInsideNonReadonlyForm'\n        : 'notInsideNonReadonlyForm',\n      insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n      loading: isLoading ? 'isLoading' : 'notLoading',\n      withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n      inputGroupPosition,\n      resize: resize ?? 'none'\n    }\n  );\n\n  const middleClasses = classNames([\n    middleStyles,\n    readonlyTextFieldMiddleBase,\n    isInsideNonReadonlyForm && readonlyTextFieldMiddleInEnabledForm,\n    isInsideNonReadonlyForm &&\n      variant !== 'textarea' &&\n      readonlyTextFieldMiddleInEnabledFormNotTextarea,\n    !isInsideNonReadonlyForm && readonlyTextFieldMiddleNotInEnabledForm\n  ]);\n\n  return (\n    <div role=\"presentation\" class={readonlyClassNames} ref={rootRef}>\n      <div class={middleClasses}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={textFieldEndContent}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport type { VariantProps };\n","import { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { LabelValueLayout } from '#UNSAFE_LabelValueLayout';\nimport { SkeletonRedwoodTheme } from '#UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { HTMLAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan, layoutSpanStyles } from '#utils/UNSAFE_styles/Layout';\nimport { StyledComponentProps } from '#utils/UNSAFE_typeUtils';\nimport { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { ReadonlyTextFieldContent, VariantProps } from './ReadonlyTextFieldContent';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\n\ntype DivProps = HTMLAttributesSignalExcluded<HTMLDivElement>;\ntype UAProps = {\n  compactUserAssistance?: ComponentChildren;\n  inlineUserAssistance?: ComponentChildren;\n};\ntype OuterClassNamesProps = {\n  outerClassNames?: string;\n};\n\ntype PickedPropsFromReadonlyTextFieldContent = Pick<\n  ComponentProps<typeof ReadonlyTextFieldContent>,\n  'mainContent' | 'endContent'\n>;\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n    rootRef?: Ref<HTMLDivElement>;\n  };\n\nconst StartTopLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      label,\n      labelEdge,\n      labelStartWidth,\n      compactUserAssistance,\n      inlineUserAssistance,\n      mainContent,\n      endContent,\n      rootRef,\n      variant,\n      resize,\n      ...props\n    }: StartTopLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    const parentComponentVariant = variant === 'textarea' ? 'textArea' : 'textField';\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <LabelValueLayout\n          label={label}\n          labelEdge={labelEdge}\n          labelStartWidth={labelStartWidth}\n          parentComponentVariant={parentComponentVariant}>\n          <ReadonlyTextFieldContent\n            mainContent={mainContent}\n            endContent={endContent}\n            rootRef={rootRef}\n            {...(variant ? ({ variant, resize } as VariantProps) : {})}\n          />\n        </LabelValueLayout>\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\ntype InsideLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    label?: ComponentChildren;\n    rootRef?: Ref<HTMLDivElement>;\n  };\nconst InsideLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      compactUserAssistance,\n      inlineUserAssistance,\n      mainContent,\n      endContent,\n      label,\n      rootRef,\n      variant,\n      resize,\n      ...props\n    }: InsideLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <ReadonlyTextFieldContent\n          insideLabel={label}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={rootRef}\n          {...(variant ? ({ variant, resize } as VariantProps) : {})}\n        />\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\nexport type StyleProps = UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent & {\n    columnSpan?: LayoutColumnSpan;\n    label?: ComponentChildren;\n    labelEdge?: 'inside' | 'start' | 'top';\n    variant?: 'textarea';\n    mainFieldRef?: Ref<HTMLDivElement>;\n  };\n\ntype Props = TestIdProps & StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = forwardRef(\n  (\n    {\n      columnSpan = 1,\n      label,\n      labelEdge,\n      mainContent,\n      endContent,\n      variant,\n      mainFieldRef,\n      testId,\n      ...props\n    }: Props,\n    ref?: Ref<HTMLElement>\n  ) => {\n    const testIdProps = useTestId(testId);\n    const { classes, styles } = useComponentTheme(TextFieldRedwoodTheme, {\n      readonly: 'isReadonly'\n    });\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n    const { formControlBase } = styles;\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const outerClassNames = classNames([\n      classes,\n      skeletonBaseTheme,\n      formControlBase,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n      return (\n        <StartTopLabelReadonlyTextField\n          outerClassNames={outerClassNames}\n          label={label}\n          labelEdge={labelEdge}\n          ref={ref as Ref<HTMLDivElement> | undefined}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={mainFieldRef}\n          variant={variant}\n          {...props}\n          {...testIdProps}></StartTopLabelReadonlyTextField>\n      );\n    }\n\n    return (\n      <InsideLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        ref={ref as Ref<HTMLDivElement> | undefined}\n        label={label}\n        mainContent={mainContent}\n        endContent={endContent}\n        rootRef={mainFieldRef}\n        variant={variant}\n        {...props}\n        {...testIdProps}></InsideLabelReadonlyTextField>\n    );\n  }\n);\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { SkeletonRedwoodTheme } from '../UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\nexport type StyleProps = {\n  columnSpan?: LayoutColumnSpan;\n  hasInsideLabel?: boolean;\n  variant?: 'default' | 'embedded';\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = forwardRef(\n  (\n    { columnSpan = 1, hasInsideLabel = false, variant = 'default', ...props }: Props,\n    ref?: Ref<HTMLElement>\n  ) => {\n    // because of the mismatch of height for inputs with inside labels and no labels,\n    // we'll have to set everything to the same min-height while within an input group context.\n    // Here we'll look to see if it's present and apply the style as needed\n    const groupContext = useInputGroupContext();\n    const { isReadonly } = useFormFieldContext();\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { classes: textFieldClasses, styles } = useComponentTheme<\n      TextFieldVariantOptions,\n      TextFieldStyles\n    >(TextFieldRedwoodTheme, {\n      readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n      withinGroup: groupContext !== null ? 'isWithinGroup' : undefined\n    });\n\n    const { formControlBase, textFieldBase, textFieldEmbedded } = styles;\n\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const classes = classNames([\n      skeletonBaseTheme,\n      formControlBase,\n      textFieldBase,\n      variant === 'embedded' && textFieldEmbedded,\n      textFieldClasses,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    return <div {...props} class={classes} ref={ref as Ref<HTMLDivElement> | undefined} />;\n  }\n);\n"],"names":["ReadonlyTextFieldContent","variant","insideLabel","mainContent","endContent","rootRef","resize","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","direction","useUser","isLtr","isInsideNonReadonlyForm","hasInsideLabel","undefined","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","variantClasses","middleStyles","styles","textFieldEndContent","useComponentTheme","TextFieldRedwoodTheme","middleContent","textAreaResizeDirection","classes","readonlyClassNames","readonlyTextFieldMiddleBase","readonlyTextFieldMiddleNotInEnabledForm","readonlyTextFieldMiddleInEnabledForm","readonlyTextFieldMiddleInEnabledFormNotTextarea","ReadonlyTextFieldRedwoodTheme","insideNonReadonlyForm","textarea","loading","withinGroup","middleClasses","classNames","_jsxs","jsxs","role","class","ref","children","_jsx","jsx","Flex","justify","align","hasZeroMargins","StartTopLabelReadonlyTextField","forwardRef","outerClassNames","label","labelEdge","labelStartWidth","compactUserAssistance","inlineUserAssistance","props","parentComponentVariant","LabelValueLayout","InsideLabelReadonlyTextField","ReadonlyTextField","columnSpan","mainFieldRef","testId","testIdProps","useTestId","readonly","baseTheme","labelBaseTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","formControlBase","skeletonBaseTheme","SkeletonRedwoodTheme","layoutSpanStyles","layoutSpanColumn","StyledTextField","groupContext","textFieldClasses","textFieldBase","textFieldEmbedded"],"mappings":"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"}