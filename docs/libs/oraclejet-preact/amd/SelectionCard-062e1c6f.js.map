{"version":3,"file":"SelectionCard-062e1c6f.js","sources":["../../src/UNSAFE_SelectionCard/SelectionCard.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { PaddingProps, paddingInterpolations } from '../utils/UNSAFE_interpolations/padding';\nimport { ColorProps, colorInterpolations } from '../utils/UNSAFE_interpolations/colors';\nimport { AriaProps, ariaInterpolations } from '../utils/UNSAFE_interpolations/aria';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport {\n  baseStyle,\n  hoverStyle,\n  selectedStyle,\n  selectedHoverStyle\n} from './themes/SelectionCardStyles.css';\nimport { useHover } from '../hooks/UNSAFE_useHover';\n\ntype StyleProps = DimensionProps & PaddingProps & ColorProps & AriaProps;\n\ntype Props = StyleProps &\n  TestIdProps & {\n    children?: ComponentChildren;\n\n    /**\n     * This flag marks this card as selected within a collection.\n     */\n    isSelected?: boolean;\n  };\n\nconst interpolations = [\n  ...Object.values(dimensionInterpolations),\n  ...Object.values(colorInterpolations),\n  ...Object.values(ariaInterpolations),\n  ...Object.values(paddingInterpolations)\n];\n\nconst mergedInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * A selection card is a container element that is a part of a collection of elements, and renders a group of related information in a styled rectangular area.\n * Width, height, and backgroundColor are set through props.\n */\nexport const SelectionCard = ({ children, isSelected = false, testId, ...rest }: Props) => {\n  const { hoverProps, isHover } = useHover();\n\n  const { class: mergedClasses, ...mergedStyles } = mergedInterpolations(rest);\n  const selectionStyles = classNames([\n    baseStyle,\n    mergedClasses,\n    isHover && hoverStyle,\n    isSelected && (isHover ? selectedHoverStyle : selectedStyle)\n  ]);\n  const testIdProps = useTestId(testId);\n  return (\n    <div\n      role=\"region\"\n      {...hoverProps}\n      class={selectionStyles}\n      style={mergedStyles}\n      {...testIdProps}>\n      {children}\n    </div>\n  );\n};\n"],"names":["interpolations","Object","values","dimensionInterpolations","colorInterpolations","ariaInterpolations","paddingInterpolations","mergedInterpolations","mergeInterpolations","children","isSelected","testId","rest","hoverProps","isHover","useHover","class","mergedClasses","mergedStyles","selectionStyles","classNames","baseStyle","hoverStyle","selectedHoverStyle","selectedStyle","testIdProps","useTestId","_jsx","role","style"],"mappings":"uUAmCA,MAAMA,EAAiB,IAClBC,OAAOC,OAAOC,8BACdF,OAAOC,OAAOE,0BACdH,OAAOC,OAAOG,yBACdJ,OAAOC,OAAOI,0BAGbC,EAAuBC,EAAAA,oBAA2BR,mBAM3B,EAAGS,WAAUC,cAAa,EAAOC,YAAWC,MACvE,MAAMC,WAAEA,EAAUC,QAAEA,GAAYC,EAAQA,YAEhCC,MAAOC,KAAkBC,GAAiBX,EAAqBK,GACjEO,EAAkBC,EAAAA,WAAW,CACjCC,EAASA,UACTJ,EACAH,GAAWQ,EAAUA,WACrBZ,IAAeI,EAAUS,EAAkBA,mBAAGC,mBAE1CC,EAAcC,YAAUf,GAC9B,OACEgB,EAAAA,WACEC,KAAK,YACDf,EACJG,MAAOG,EACPU,MAAOX,KACHO,EACHhB,SAAAA,GAEH"}