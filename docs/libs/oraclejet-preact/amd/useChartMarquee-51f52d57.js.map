{"version":3,"file":"useChartMarquee-51f52d57.js","sources":["../../src/hooks/PRIVATE_useChartMarquee/utils.ts","../../src/hooks/PRIVATE_useChartMarquee/Marquee.tsx","../../src/hooks/PRIVATE_useChartMarquee/useChartMarquee.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nexport function getResolvedDragMode(\n  isUserDragModeButtonShown: boolean,\n  isZoomAndScroll: boolean,\n  isMobile: boolean,\n  dragMode: 'off' | 'pan' | 'zoom' | 'user' | 'select',\n  userSelectedDragMode?: 'pan' | 'zoom' | 'select'\n) {\n  if (userSelectedDragMode != undefined && isUserDragModeButtonShown) {\n    // when dragMode api value change happens, userDragMode state can be stale.\n    // only select userDragMode if there is a button that is present to select it.\n    return userSelectedDragMode;\n  }\n\n  if (dragMode === 'user') {\n    if (!isMobile) {\n      return isZoomAndScroll ? 'pan' : 'off';\n    }\n  }\n\n  return isMobile ? 'off' : dragMode;\n}\n\nexport function getMarqueeDims(\n  initialPoint: { x: number; y: number } | undefined,\n  finalPoint: { x: number; y: number } | undefined,\n  plotAreaSpace: Dimension,\n  xSpace: Dimension,\n  ySpace: Dimension,\n  treatAsXSpace: boolean\n) {\n  if (initialPoint && finalPoint) {\n    const spaceWidth = plotAreaSpace.x + plotAreaSpace.width;\n    const spaceHeight = plotAreaSpace.y + plotAreaSpace.height;\n\n    let x1 = Math.max(Math.min(initialPoint.x, finalPoint.x), plotAreaSpace.x);\n    let x2 = Math.min(Math.max(initialPoint.x, finalPoint.x), spaceWidth);\n\n    let y1 = Math.max(Math.min(initialPoint.y, finalPoint.y), plotAreaSpace.y);\n    const y2 = Math.min(Math.max(initialPoint.y, finalPoint.y), spaceHeight);\n\n    let width = Math.abs(x2 - x1);\n    let height = Math.abs(y2 - y1);\n\n    if (isPointInsideSpace(initialPoint.x, initialPoint.y, xSpace) || treatAsXSpace) {\n      y1 = plotAreaSpace.y;\n      height = plotAreaSpace.height;\n    } else if (isPointInsideSpace(initialPoint.x, initialPoint.y, ySpace)) {\n      x1 = plotAreaSpace.x;\n      x2 = spaceWidth;\n      width = plotAreaSpace.width;\n    }\n    return {\n      x1,\n      y1,\n      width,\n      height,\n      x2,\n      y2\n    };\n  }\n  return;\n}\n\nexport function getCursorType(\n  currentDragMode: 'zoom' | 'select' | 'pan' | 'off' | 'user',\n  isPointerDown: boolean\n) {\n  if (currentDragMode === 'zoom' || currentDragMode === 'select') {\n    return 'crosshair';\n  }\n\n  if (currentDragMode === 'pan') {\n    return isPointerDown ? 'grabbing' : 'grab';\n  }\n\n  return;\n}\n\nexport function isPointInsideSpace(x: number, y: number, space: Dimension) {\n  if (x >= space.x && x <= space.x + space.width && y >= space.y && y <= space.y + space.height) {\n    return true;\n  }\n  return false;\n}\n\nexport function isPointOutsideTargetSpace(\n  x: number,\n  y: number,\n  plotAreaSpace: Dimension,\n  xSpace: Dimension,\n  ySpace: Dimension\n) {\n  if (\n    !isPointInsideSpace(x, y, plotAreaSpace) &&\n    !isPointInsideSpace(x, y, xSpace) &&\n    !isPointInsideSpace(x, y, ySpace)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getPanButtonVisibility(\n  isZoomAndScroll: boolean,\n  dragMode: 'off' | 'pan' | 'zoom' | 'user' | 'select',\n  isMobile: boolean\n) {\n  if (!isMobile || !isZoomAndScroll) {\n    return false;\n  }\n\n  return dragMode === 'user' || dragMode === 'pan';\n}\n\nexport function getZoomButtonVisibility(\n  isZoomAndScroll: boolean,\n  isMobile: boolean,\n  dragMode: 'zoom' | 'select' | 'pan' | 'off' | 'user'\n) {\n  if (!isZoomAndScroll) {\n    return false;\n  }\n\n  // In mobile don't show for user mode\n  return (isMobile && dragMode === 'zoom') || (!isMobile && dragMode === 'user');\n}\n\nexport function getSelectButtonVisibility(\n  isMultiSelection: boolean,\n  isMobile: boolean,\n  dragMode: 'zoom' | 'select' | 'pan' | 'user' | 'off'\n) {\n  if (!isMultiSelection) {\n    return false;\n  }\n\n  return dragMode === 'user' || (isMobile && dragMode === 'select');\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from './themes/useChartMarquee.css';\n\ntype Props = {\n  x1: number;\n  y1: number;\n  width: number;\n  height: number;\n};\nexport function Marquee({ x1, y1, width, height }: Props) {\n  return (\n    <>\n      <rect\n        x={x1}\n        y={y1}\n        width={width}\n        height={height}\n        class={styles.visMarquee}\n        data-oj-id=\"marquee\"\n      />\n      <rect\n        x={x1 + 1}\n        y={y1 + 1}\n        width={Math.max(0, width - 2)}\n        height={Math.max(0, height - 2)}\n        class={styles.visMarqueeInnerArea}\n      />\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { VNode } from 'preact';\nimport { useRef, useState } from 'preact/hooks';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { Scale } from '#utils/UNSAFE_visTypes/chart';\nimport {\n  getCursorType,\n  getMarqueeDims,\n  isPointOutsideTargetSpace,\n  isPointInsideSpace,\n  getPanButtonVisibility,\n  getZoomButtonVisibility,\n  getSelectButtonVisibility,\n  getResolvedDragMode\n} from './utils';\nimport { isTouch } from '#utils/UNSAFE_visUtils/clientUtils';\nimport { useVisDragModeControls } from '#hooks/PRIVATE_useVisDragModeControls';\nimport { Marquee } from './Marquee';\nimport { SelectionDetail } from '#hooks/PRIVATE_useVisSelection/useSelection';\n\ntype MarqueeProps<K, D> = {\n  chartWidth: number;\n  plotAreaSpace: Dimension;\n  xSpace: Dimension;\n  ySpace: Dimension;\n  isZoomScroll: boolean;\n  isMultiSelection: boolean;\n  onSelectionChange?: (detail: SelectionDetail<K, D>) => void;\n  xScale: Scale;\n  onViewportChange?: (x: { xMin?: number; yMin?: number; xMax?: number; yMax?: number }) => void;\n  dragMode: 'user' | 'select' | 'zoom' | 'pan' | 'off';\n  getDataById: (id: K) => D | undefined;\n  xAxisExtent: { min: number; max: number };\n  selectedIds?: Set<K>;\n  viewportMin: number;\n  viewportMax: number;\n  isRtl: boolean;\n  xAxisMinExtent: number;\n};\n\nexport function useChartMarquee<K, D>({\n  plotAreaSpace,\n  xSpace,\n  ySpace,\n  dragMode,\n  chartWidth,\n  isMultiSelection,\n  onViewportChange,\n  isZoomScroll,\n  xAxisExtent,\n  xScale,\n  selectedIds,\n  getDataById,\n  onSelectionChange,\n  viewportMax,\n  viewportMin,\n  isRtl,\n  xAxisMinExtent\n}: MarqueeProps<K, D>) {\n  const isDeviceTouch = isTouch();\n  const isHovered = useRef(false);\n  const numOfActiveTouches = useRef(0);\n\n  const initialPointRef = useRef<{\n    x: number;\n    y: number;\n    isMeta?: boolean;\n  }>();\n\n  const showPanButton = getPanButtonVisibility(isZoomScroll, dragMode, isDeviceTouch);\n  const showZoomButton = getZoomButtonVisibility(isZoomScroll, isDeviceTouch, dragMode);\n  const showSelectButton = getSelectButtonVisibility(isMultiSelection, isDeviceTouch, dragMode);\n\n  const { dragButtonDivRef, toggleButtonContent, userDragMode } = useVisDragModeControls({\n    componentWidth: chartWidth,\n    plotAreaSpace,\n    isRtl,\n    showPanButton,\n    showZoomButton,\n    showSelectButton,\n    dragMode\n  });\n\n  // for drag --> dragging cursor rerender in pan mode\n  const [isPointerDown, setIsPointerDown] = useState(false);\n\n  const [finalPoint, setFinalPoint] = useState<{ x: number; y: number }>();\n\n  const selectedIdsRef = useRef<Set<K>>(new Set());\n\n  const isUserDragModeButtonShown =\n    (showPanButton && userDragMode === 'pan') ||\n    (showSelectButton && userDragMode === 'select') ||\n    (showZoomButton && userDragMode === 'zoom');\n\n  const mode = getResolvedDragMode(\n    isUserDragModeButtonShown,\n    isZoomScroll,\n    isDeviceTouch,\n    dragMode,\n    userDragMode\n  );\n\n  const dims = getMarqueeDims(\n    initialPointRef.current,\n    finalPoint,\n    plotAreaSpace,\n    xSpace,\n    ySpace,\n    mode === 'zoom' // We need to revisit this for scatter chart and others charts\n  );\n\n  const onPointerEnter = () => {\n    isHovered.current = true;\n  };\n\n  const onPointerDown = (event: PointerEvent) => {\n    // prevent setIsPointerDown(true) when clicked on button\n    // otherwise the button will disapper before being clicked.\n    if (dragButtonDivRef?.current?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    const x = event.offsetX;\n    const y = event.offsetY;\n\n    setIsPointerDown(true);\n\n    if (\n      isPointOutsideTargetSpace(x, y, plotAreaSpace, xSpace, ySpace) ||\n      (mode === 'zoom' && isPointInsideSpace(x, y, ySpace))\n    ) {\n      return;\n    }\n\n    initialPointRef.current = { x, y };\n  };\n\n  const onPointerLeave = (event: PointerEvent) => {\n    isHovered.current = false;\n    if (dims && isDeviceTouch && mode != 'off') {\n      (event.currentTarget as HTMLElement).setPointerCapture(event.pointerId);\n    }\n  };\n\n  const onPointerMove = (event: PointerEvent) => {\n    if (!isPointerDown) {\n      return;\n    }\n    if (event.metaKey && initialPointRef.current) {\n      initialPointRef.current.isMeta = true;\n    }\n\n    const x = event.offsetX;\n    const y = event.offsetY;\n\n    if (\n      isPointOutsideTargetSpace(x, y, plotAreaSpace, xSpace, ySpace) ||\n      (mode === 'zoom' && isPointInsideSpace(x, y, ySpace))\n    ) {\n      return;\n    }\n\n    if (\n      mode === 'pan' &&\n      onViewportChange &&\n      (!isDeviceTouch || (isDeviceTouch && numOfActiveTouches.current === 1))\n    ) {\n      const axisDelta =\n        xScale.invert(x) - xScale.invert((finalPoint?.x || initialPointRef.current?.x)!);\n\n      const viewportRange = viewportMax - viewportMin;\n\n      let xMin = viewportMin - axisDelta;\n      let xMax = viewportMax - axisDelta;\n\n      if (xMin < xAxisExtent.min) {\n        xMin = xAxisExtent.min;\n        xMax = xMin + viewportRange;\n      }\n\n      if (xMax > xAxisExtent.max) {\n        xMax = xAxisExtent.max;\n        xMin = xMax - viewportRange;\n      }\n\n      if (xMin != viewportMin && xMax != viewportMax && Math.abs(xMax - xMin) > xAxisMinExtent) {\n        onViewportChange({\n          xMin,\n          xMax\n        });\n      }\n    }\n\n    setFinalPoint({ x, y });\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    setIsPointerDown(false);\n    setFinalPoint(undefined);\n    initialPointRef.current = undefined;\n\n    if (dragButtonDivRef.current?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    if (!dims) {\n      return;\n    }\n\n    if (mode === 'zoom') {\n      const { x1, x2 } = dims;\n      let xMin = Math.min(xScale.invert(x1), xScale.invert(x2));\n      let xMax = Math.max(xScale.invert(x1), xScale.invert(x2));\n      if (Math.abs(xMax - xMin) < xAxisMinExtent) {\n        const mid = (xMin + xMax) / 2;\n        xMin = Math.max(xAxisExtent.min, mid - xAxisMinExtent / 2);\n        xMax = Math.min(xAxisExtent.max, xMin + xAxisMinExtent);\n      }\n      onViewportChange?.({\n        xMin,\n        xMax\n      });\n    }\n\n    if (mode === 'select') {\n      const ids = [\n        ...new Set([\n          ...selectedIdsRef.current,\n          ...(event.metaKey ? selectedIds || new Set<K>() : new Set<K>())\n        ])\n      ];\n      const data = ids.map((id) => getDataById(id));\n      onSelectionChange?.({ ids, data });\n      selectedIdsRef.current = new Set<K>();\n    }\n  };\n\n  // if mode is 'off', we still want to show the toggleButton.\n  // pointerUp will not fire because browser will have already claimed the\n  // pointer\n  const onTouchEnd = (event: TouchEvent) => {\n    setIsPointerDown(false);\n    setFinalPoint(undefined);\n    initialPointRef.current = undefined;\n    numOfActiveTouches.current = event.touches.length;\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    numOfActiveTouches.current = event.touches.length;\n  };\n\n  let marqueeContent: VNode | undefined;\n\n  const isPointInsideMarquee =\n    mode === 'select' && dims\n      ? (id: K, point: { x: number; y: number }) => {\n          if (initialPointRef.current?.isMeta && selectedIds?.has(id)) {\n            return true;\n          }\n          const { x1, x2, y1, y2 } = dims;\n          const { x, y } = point;\n          if (isPointInsideSpace(x, y, { x: x1, width: x2 - x1, y: y1, height: y2 - y1 })) {\n            selectedIdsRef.current?.add(id);\n            return true;\n          } else {\n            selectedIdsRef.current?.delete(id);\n          }\n          return false;\n        }\n      : undefined;\n\n  if (dims && (mode === 'zoom' || mode === 'select')) {\n    marqueeContent = <Marquee {...dims} />;\n  }\n\n  return {\n    cursor: getCursorType(mode, isPointerDown),\n    yAxisCursor: mode !== 'zoom' ? getCursorType(mode, isPointerDown) : 'initial',\n    marqueeContent,\n    toggleButtonContent:\n      !isPointerDown &&\n      ((!isDeviceTouch && isHovered.current) || isDeviceTouch) &&\n      toggleButtonContent,\n    isPointInsideMarquee,\n    dragMode: mode,\n    marqueeProps:\n      dragMode != 'off'\n        ? {\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n            onPointerLeave,\n            onPointerEnter,\n            onTouchEnd,\n            onTouchStart\n          }\n        : {}\n  };\n}\n"],"names":["getCursorType","currentDragMode","isPointerDown","isPointInsideSpace","x","y","space","width","height","isPointOutsideTargetSpace","plotAreaSpace","xSpace","ySpace","Marquee","x1","y1","_jsxs","_Fragment","children","_jsx","class","styles","visMarquee","Math","max","visMarqueeInnerArea","dragMode","chartWidth","isMultiSelection","onViewportChange","isZoomScroll","xAxisExtent","xScale","selectedIds","getDataById","onSelectionChange","viewportMax","viewportMin","isRtl","xAxisMinExtent","isDeviceTouch","isTouch","isHovered","useRef","numOfActiveTouches","initialPointRef","showPanButton","isZoomAndScroll","isMobile","getPanButtonVisibility","showZoomButton","getZoomButtonVisibility","showSelectButton","getSelectButtonVisibility","dragButtonDivRef","toggleButtonContent","userDragMode","useVisDragModeControls","componentWidth","setIsPointerDown","useState","finalPoint","setFinalPoint","selectedIdsRef","Set","mode","isUserDragModeButtonShown","userSelectedDragMode","undefined","getResolvedDragMode","dims","initialPoint","treatAsXSpace","spaceWidth","spaceHeight","min","x2","y2","abs","getMarqueeDims","current","marqueeContent","isPointInsideMarquee","id","point","isMeta","has","add","delete","cursor","yAxisCursor","marqueeProps","onPointerDown","event","contains","target","offsetX","offsetY","onPointerMove","metaKey","axisDelta","invert","viewportRange","xMin","xMax","onPointerUp","mid","ids","data","map","onPointerLeave","currentTarget","setPointerCapture","pointerId","onPointerEnter","onTouchEnd","touches","length","onTouchStart"],"mappings":"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"}