{"version":3,"file":"Label-a4172af7.js","sources":["../../src/UNSAFE_Label/Label.tsx"],"sourcesContent":["import { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { CompactLabelAssistance } from '../UNSAFE_UserAssistance';\n\nimport { LabelStyles, LabelVariantOptions } from './themes/LabelStyles.css';\nimport { TextFieldRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldTheme';\nimport { LabelRedwoodTheme } from './themes/redwood/LabelTheme';\n\ntype StyleProps = Exclude<Props, 'children' | 'forId' | 'id'> & {\n  hasValue?: boolean;\n  isFocused?: boolean;\n};\n\ntype StyledLabelProps = StyledComponentProps<'label', StyleProps> & {\n  onClick?: (e: MouseEvent) => void;\n};\n\nconst StyledLabel = ({\n  hasValue,\n  readonly,\n  disabled,\n  isFocused,\n  isRequiredShown,\n  helpIconId,\n  helpSourceLink,\n  helpSourceText,\n  userAssistanceDensity = 'reflow',\n  variant = 'inside',\n  parentComponentVariant = 'textField',\n  ...props\n}: StyledLabelProps) => {\n  const { isFormLayout, isReadonly: isReadonlyForm, labelWrapping } = useFormContext();\n\n  const isInside = variant === 'inside';\n  const isTextField = parentComponentVariant === 'textField';\n\n  // because variants have to match strings, we have to take any boolean props and convert\n  // them to a string value, (ie prefixed with \"is\" or \"non\")\n  const {\n    classes,\n    styles: { uaDensityCompactLabel, uaDensityCompactLabelStart, uaDensityCompactLabelTopInside }\n  } = useComponentTheme<LabelVariantOptions, LabelStyles>(LabelRedwoodTheme, {\n    labelWrapping,\n    position: variant,\n    inside: isInside ? 'isInside' : 'notInside',\n    inEnabledForm: isFormLayout && !isReadonlyForm ? 'isInEnabledForm' : 'notInEnabledForm',\n    readonly: readonly ? 'isReadonly' : 'notReadonly',\n    focused: isFocused ? 'isFocused' : 'nonFocused',\n    formLayout: isFormLayout ? 'isFormLayout' : 'nonFormLayout',\n    readonlyForm: isReadonlyForm ? 'isReadonlyForm' : 'notReadonlyForm',\n    textField: isTextField ? 'isTextField' : 'notTextField',\n    value: hasValue ? 'hasValue' : 'noValue',\n    valueOrFocus: hasValue || isFocused ? 'hasValueOrFocus' : 'noValueOrFocus',\n    animatedWhenInside: isTextField ? 'isAnimated' : 'notAnimated',\n    disabled: isTextField && disabled ? 'isDisabled' : 'nonDisabled',\n    userAssistanceDensity\n  });\n\n  const { baseTheme: textFieldTheme } = useComponentTheme(TextFieldRedwoodTheme);\n\n  // TODO: We need to decide whether to standardize on 'class' or 'className'.  Otherwise, we'll\n  // run into issues destructuring style interpolations, for example having to concatenate both.\n\n  const compactLabelStyles = classNames([\n    uaDensityCompactLabel,\n    variant === 'start' ? uaDensityCompactLabelStart : uaDensityCompactLabelTopInside\n  ]);\n  const compactUADLabel = <label {...props} class={compactLabelStyles} />;\n\n  return userAssistanceDensity === 'compact' ? (\n    <div class={classNames([classes, textFieldTheme])}>\n      {variant !== 'start' && compactUADLabel}\n      <CompactLabelAssistance\n        isRequiredShown={isRequiredShown}\n        helpIconId={helpIconId}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        labelEdge={variant === 'top' || variant === 'start' ? variant : 'inside'}\n      />\n      {variant === 'start' && compactUADLabel}\n    </div>\n  ) : (\n    <label {...props} class={classNames([classes, textFieldTheme])} />\n  );\n};\n\ntype Props = {\n  /**\n   * Specifies how messages and assistive text are shown.\n   */\n  userAssistanceDensity?: 'reflow' | 'efficient' | 'compact';\n  /**\n   * Id to use for the help icon in compact user assistance density.\n   */\n  helpIconId?: string;\n  /**\n   * Help source link for compact user assistance density.\n   */\n  helpSourceLink?: string;\n  /**\n   * Help source text for compact user assistance density.\n   */\n  helpSourceText?: string;\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: boolean;\n  /**\n   * The text to be used for the label\n   */\n  children?: string;\n  /**\n   * The id to set on the label\n   */\n  id?: string;\n  /**\n   * The id of the form control for which this label will be used\n   */\n  forId?: string;\n  /**\n   * Determines how the label is going to be styled\n   */\n  variant?: 'inside' | 'start' | 'top';\n  /**\n   * Determines how the label is going to be styled in based on parent component.\n   */\n  parentComponentVariant?: 'textField' | 'radioSet' | 'checkboxSet' | 'formComponentWrapper';\n  /**\n   * Handler called when the label is clicked.\n   */\n  onClick?: (e: MouseEvent) => void;\n};\n\nexport const Label = ({ forId, ...props }: Props) => {\n  const { hasValue, isDisabled, isFocused, isReadonly } = useFormFieldContext();\n  return (\n    <StyledLabel\n      for={forId}\n      hasValue={hasValue}\n      disabled={isDisabled}\n      isFocused={isFocused}\n      readonly={isReadonly}\n      {...props}\n    />\n  );\n};\n"],"names":["StyledLabel","hasValue","readonly","disabled","isFocused","isRequiredShown","helpIconId","helpSourceLink","helpSourceText","userAssistanceDensity","variant","parentComponentVariant","props","isFormLayout","isReadonly","isReadonlyForm","labelWrapping","useFormContext","isInside","isTextField","classes","styles","uaDensityCompactLabel","uaDensityCompactLabelStart","uaDensityCompactLabelTopInside","useComponentTheme","LabelRedwoodTheme","position","inside","inEnabledForm","focused","formLayout","readonlyForm","textField","value","valueOrFocus","animatedWhenInside","baseTheme","textFieldTheme","TextFieldRedwoodTheme","compactLabelStyles","classNames","compactUADLabel","_jsx","jsx","class","_jsxs","jsxs","CompactLabelAssistance","labelEdge","forId","isDisabled","useFormFieldContext","for"],"mappings":"4tDAoBA,MAAMA,EAAc,EAClBC,WACAC,WACAC,WACAC,YACAC,kBACAC,aACAC,iBACAC,iBACAC,wBAAwB,SACxBC,UAAU,SACVC,yBAAyB,eACtBC,MAEH,MAAMC,aAAEA,EAAcC,WAAYC,EAAcC,cAAEA,GAAkBC,EAAAA,iBAE9DC,EAAuB,WAAZR,EACXS,EAAyC,cAA3BR,GAIdS,QACJA,EACAC,QAAQC,sBAAEA,EAAqBC,2BAAEA,EAA0BC,+BAAEA,IAC3DC,EAAiBA,kBAAmCC,oBAAmB,CACzEV,gBACAW,SAAUjB,EACVkB,OAAQV,EAAW,WAAa,YAChCW,cAAehB,IAAiBE,EAAiB,kBAAoB,mBACrEb,SAAUA,EAAW,aAAe,cACpC4B,QAAS1B,EAAY,YAAc,aACnC2B,WAAYlB,EAAe,eAAiB,gBAC5CmB,aAAcjB,EAAiB,iBAAmB,kBAClDkB,UAAWd,EAAc,cAAgB,eACzCe,MAAOjC,EAAW,WAAa,UAC/BkC,aAAclC,GAAYG,EAAY,kBAAoB,iBAC1DgC,mBAAoBjB,EAAc,aAAe,cACjDhB,SAAUgB,GAAehB,EAAW,aAAe,cACnDM,2BAGM4B,UAAWC,GAAmBb,EAAiBA,kBAACc,EAAqBA,uBAKvEC,EAAqBC,EAAAA,WAAW,CACpCnB,EACY,UAAZZ,EAAsBa,EAA6BC,IAE/CkB,EAAkBC,EAAWC,IAAA,QAAA,IAAAhC,EAAOiC,MAAOL,IAEjD,MAAiC,YAA1B/B,EACLqC,EAAKC,KAAA,MAAA,CAAAF,MAAOJ,EAAAA,WAAW,CAACrB,EAASkB,cAClB,UAAZ5B,GAAuBgC,EACxBC,EAAAC,IAACI,yBACC,CAAA3C,gBAAiBA,EACjBC,WAAYA,EACZC,eAAgBA,EAChBC,eAAgBA,EAChByC,UAAuB,QAAZvC,GAAiC,UAAZA,EAAsBA,EAAU,WAErD,UAAZA,GAAuBgC,KAG1BC,MAAW,QAAA,IAAA/B,EAAOiC,MAAOJ,aAAW,CAACrB,EAASkB,KAC/C,UAmDkB,EAAGY,WAAUtC,MAChC,MAAMX,SAAEA,EAAQkD,WAAEA,EAAU/C,UAAEA,EAASU,WAAEA,GAAesC,EAAAA,sBACxD,OACET,EAAAA,IAAC3C,EACC,CAAAqD,IAAKH,EACLjD,SAAUA,EACVE,SAAUgD,EACV/C,UAAWA,EACXF,SAAUY,KACNF,GAEN"}