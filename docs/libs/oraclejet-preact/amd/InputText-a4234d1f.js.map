{"version":3,"file":"InputText-a4234d1f.js","sources":["../../src/UNSAFE_InputText/InputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useImperativeHandle, useRef } from 'preact/hooks';\n\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { PrefixSuffix } from '../UNSAFE_PrefixSuffix';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useId } from '../hooks/UNSAFE_useId';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '../PRIVATE_ClearIcon/ClearIcon';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { ComponentMessageItem } from '../UNSAFE_ComponentMessage';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = TestIdProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component: it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n\n  /**\n   * The content to be rendered after the input field, typically a button.\n   */\n  endContent?: TextFieldProps['endContent'];\n\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user. Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n\n  /**\n   * Specifies how the input text characters are to be counted when `maxLength` is specified.\n   */\n  maxLengthUnit?: CountUnit;\n\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n\n  /**\n   * The prefix displays as regular text before the input text.\n   * The prefix is not editable or focusable.\n   */\n  prefix?: string;\n\n  /**\n   * Specifies the role attribute for the input field.\n   */\n  role?: TextFieldInputProps['role'];\n\n  /**\n   * The content to be rendered before the input field, typically an icon.\n   */\n  startContent?: TextFieldProps['startContent'];\n\n  /**\n   * The suffix displays as regular text after the input text.\n   * The suffix is not editable or focusable.\n   */\n  suffix?: string;\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\ntype FocusSelectHandle = FocusableHandle & Partial<SelectableHandle>;\n/**\n * An input text displays a field that allows a user to enter a text value.\n */\nexport const InputText = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      hasClearIcon = 'never',\n      endContent,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      messages,\n      placeholder,\n      prefix,\n      role,\n      startContent,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const formControl_limitReached = maxLength\n      ? translations.formControl_limitReached({\n          CHARACTER_LIMIT: maxLength\n        })\n      : '';\n\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const maxLengthDescribedByIdRef = useRef<string>(useId());\n    // The enabledAriaDescribedBy includes the maxLengthDescribedById in addition to what was passed in to aria-describedby.\n    // We don't need to announce the max length message for readonly, as it only applies when editing the value.\n    const enabledAriaDescribedBy = ariaDescribedBy\n      ? `${ariaDescribedBy} ${maxLengthDescribedByIdRef.current}`\n      : maxLengthDescribedByIdRef.current;\n\n    const limitMessage = [{ detail: formControl_limitReached, severity: 'info' }];\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthReached, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const allMessages = [\n      ...(messages ?? []),\n      ...(isMaxLengthReached ? limitMessage : [])\n    ] as ComponentMessageItem[];\n\n    const enabledElementRef = useRef<HTMLInputElement>(null);\n    const readonlyElementRef = useRef<HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    const { methods: selectMethods } = useSelectableTextField<HTMLInputElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: isReadonly || isDisabled ? ariaDescribedBy : enabledAriaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages: allMessages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value\n    });\n\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} testId={`${testId}_clearicon`} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(endContent, maybeClearIcon);\n\n    const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n\n    const {\n      shouldRenderPrefix,\n      shouldRenderSuffix,\n      prefixProps,\n      suffixProps,\n      valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: endContent !== undefined,\n      hasInsideLabel,\n      hasStartContent: startContent !== undefined,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    const renderedPrefix = shouldRenderPrefix ? <PrefixSuffix {...prefixProps} /> : undefined;\n\n    const renderedSuffix = shouldRenderSuffix ? <PrefixSuffix {...suffixProps} /> : undefined;\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={allMessages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={allMessages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          autoFocus={autoFocus}\n          elementRef={readonlyElementRef}\n          textAlign={textAlign}\n          value={valuePrefixSuffix}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={hasInsideLabel}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={anchorRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n    const hasMaxLength = maxLength !== undefined;\n\n    const mainContent = (\n      <>\n        {renderedPrefix}\n        <TextFieldInput\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasEndContent={endContent !== undefined}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={startContent !== undefined}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={role}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          {...inputProps}\n        />\n        {renderedSuffix}\n        {hasMaxLength && (\n          <HiddenAccessible id={maxLengthDescribedByIdRef.current}>\n            {translations.formControl_maxLength({\n              MAX_LENGTH: `${maxLength}`\n            })}\n          </HiddenAccessible>\n        )}\n        {hasMaxLength && isFocused && (\n          <MaxLengthLiveRegion\n            maxLength={maxLength}\n            valueLength={valueLength}\n            testId={testId + '_remainingChars'}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          columnSpan={columnSpan}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onFocusOut}\n          onFocus={focusProps.onFocusIn}\n          startContent={startContent}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["InputText","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","columnSpan","hasClearIcon","endContent","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","prefix","role","startContent","suffix","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","virtualKeyboard","onInput","onCommit","testId","ref","translations","useTranslationBundle","formControl_limitReached","CHARACTER_LIMIT","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","maxLengthDescribedByIdRef","useRef","useId","enabledAriaDescribedBy","current","limitMessage","severity","isMaxLengthReached","valueLength","onFilteredInput","useLengthFilter","allMessages","enabledElementRef","readonlyElementRef","focusProps","isFocused","methods","focusMethods","useFocusableTextField","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","hoverProps","isHover","useHover","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onClickClearIcon","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","_jsx","jsx","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","hasInsideLabel","undefined","shouldRenderPrefix","shouldRenderSuffix","prefixProps","suffixProps","valuePrefixSuffix","ariaLabelledBy","usePrefixSuffix","hasEndContent","hasStartContent","labelId","id","renderedPrefix","PrefixSuffix","renderedSuffix","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","as","elementRef","hasEmptyLabel","FormFieldContext","Provider","children","ReadonlyTextField","onBlur","onFocusOut","onFocus","onFocusIn","hasMaxLength","_jsxs","_Fragment","Fragment","TextFieldInput","hasPrefix","hasSuffix","inputRef","isMobile","HiddenAccessible","formControl_maxLength","MAX_LENGTH","MaxLengthLiveRegion","TextField","mainFieldRef","deviceType","getClientHints"],"mappings":"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"}