{"version":3,"file":"Chart-96ea9fed.js","sources":["../../src/PRIVATE_Axis/utils/axisNavUtils.ts","../../src/PRIVATE_Chart/ChartWithDimensions.tsx","../../src/PRIVATE_VisSVGText/useTextTruncation.ts","../../src/PRIVATE_Chart/Chart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Group, ChartGroupInfo } from '../../utils/UNSAFE_visTypes/chart';\ntype isGroupNavigableType = (groupIndex: number) => boolean;\n\nexport function getNextGroup(\n  info: ChartGroupInfo,\n  viewportEndIndex: number,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex + 1;\n  if (groupIndex >= viewportEndIndex) {\n    return;\n  }\n\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getNextGroup({ groupIndex }, viewportEndIndex, isGroupNavigable);\n}\n\nexport function getPreviousGroup(\n  info: ChartGroupInfo,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex - 1;\n  if (groupIndex < 0) {\n    return;\n  }\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getPreviousGroup({ groupIndex }, isGroupNavigable);\n}\n\nexport function getGroupNavUtil(\n  groups: Group[],\n  renderedGroups: number[],\n  xIndexExtent: { startIndex: number; endIndex: number },\n  drilling: 'on' | 'off' | 'groupsOnly',\n  isRtl: boolean\n) {\n  const isGroupNavigable = (groupIndex: number) => {\n    const groupsDrilling = groups[renderedGroups[groupIndex]].drilling;\n    return (drilling === 'on' || drilling === 'groupsOnly') && groupsDrilling != 'off';\n  };\n\n  const getDefaultNavGroup = (info: ChartGroupInfo) => {\n    if (xIndexExtent.startIndex > renderedGroups[info.groupIndex]) {\n      info.groupIndex = 0;\n      return info;\n    } else if (xIndexExtent.endIndex < renderedGroups[info.groupIndex]) {\n      info.groupIndex = renderedGroups.length - 1;\n      return info;\n    }\n    return;\n  };\n\n  const getNextNavGroup = (info: ChartGroupInfo, arrow: 'ArrowRight' | 'ArrowLeft') => {\n    let nextGroup = getDefaultNavGroup(info);\n\n    if (nextGroup) return nextGroup;\n\n    if (arrow === 'ArrowRight') {\n      nextGroup = isRtl\n        ? getPreviousGroup(info, isGroupNavigable)\n        : getNextGroup(info, renderedGroups.length, isGroupNavigable);\n    } else {\n      nextGroup = isRtl\n        ? getNextGroup(info, renderedGroups.length, isGroupNavigable)\n        : getPreviousGroup(info, isGroupNavigable);\n    }\n    return nextGroup || info;\n  };\n\n  return { getDefaultNavGroup, getNextNavGroup };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTextDimensions } from '../hooks/PRIVATE_useTextDimensions';\nimport { useCssVars } from '../hooks/PRIVATE_useCssVars/useCssVars';\nimport { styles } from './themes/ChartStyles.css';\nimport { useRef } from 'preact/hooks';\nimport { PlotArea } from '../PRIVATE_PlotArea';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { Axis } from '../PRIVATE_Axis/Axis';\nimport { useChartViewport } from '../hooks/PRIVATE_useChartViewport';\nimport {\n  getAvailSpace,\n  getLayoutInfo,\n  getScrollBarSpace,\n  updateScrollBarSpace\n} from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport { useChartNav } from '../hooks/PRIVATE_useChartNav/useChartNav';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { getAxesPosition } from '../PRIVATE_Axis/utils/axisUtils';\nimport { ScrollBar } from '../PRIVATE_ChartScrollBar';\nimport { useSelectDrill } from '../hooks/PRIVATE_useChartEvents/useSelectDrill';\nimport { useChartDatatipAndCursor } from '../hooks/PRIVATE_useChartEvents/useDatatipAndCursor';\nimport { getGroupNavUtil } from '../PRIVATE_Axis/utils/axisNavUtils';\nimport { ChartItemData, TimeAxisProps } from '../utils/UNSAFE_visTypes/chart';\nimport { Gridlines } from '../PRIVATE_PlotArea/Gridlines';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\nimport { getChartVars } from '../utils/PRIVATE_chartUtils';\nimport { useChartContextMenu } from '#hooks/PRIVATE_useChartContextMenu';\nimport { getElementData } from '#utils/UNSAFE_visUtils';\nimport { useTextTruncation } from '#PRIVATE_VisSVGText/useTextTruncation';\nimport { useChartMarquee } from '#hooks/PRIVATE_useChartMarquee';\nimport { ChartProps } from './Chart';\nimport type { gestureTypes } from '#hooks/PRIVATE_useVisContextMenu';\nimport { useVisTouchResponse } from '#hooks/PRIVATE_useVisTouchResponse';\nimport { merge } from '#utils/UNSAFE_stringUtils';\n\ntype ChartWithDimensionsProps<K, D> = Omit<ChartProps<K, D>, 'width' | 'height'> & {\n  width: number;\n  height: number;\n};\n\nconst chartVars = getChartVars();\n\nexport function ChartWithDimensions<K extends string | number, D extends ChartItemData<K>>({\n  width,\n  height,\n  selectedIds,\n  hiddenIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  xAxis,\n  yAxis,\n  plotArea,\n  dragMode = 'user',\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataCursorPosition,\n  onSelectionChange,\n  isDataCursorEnabled,\n  dataCursorStyle,\n  onViewportChange,\n  onDataCursorPositionChange,\n  onItemDrill,\n  onGroupDrill,\n  onItemHover,\n  onItemFocus,\n  datatip,\n  zoomAndScroll = 'off',\n  offset,\n  getNavUtil,\n  getDataItemPos,\n  getGapRatio,\n  valueFormats,\n  findNearest,\n  getMarkerInfo,\n  isRtl,\n  children,\n  testId,\n  renderGridLinesInFront,\n  contextMenuConfig,\n  ...props\n}: ChartWithDimensionsProps<K, D>) {\n  const testIdProps = useTestId(testId);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isHoriz = orientation === 'horizontal';\n  const { xAxisPosition, yAxisPosition } = getAxesPosition(yAxis, isHoriz, isRtl);\n  const { resolvedVars, cssContent } = useCssVars(chartVars);\n  const colors = Array.from(Array(12)).map((_, index) => {\n    return resolvedVars[`color${index + 1}`];\n  });\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  let availSpace = getAvailSpace(width, height);\n  const updatedSpace = getScrollBarSpace(availSpace, zoomAndScroll, xAxisPosition);\n  let scrollDims = updatedSpace.scrollDims;\n  availSpace = updatedSpace.availSpace;\n  const hiddenSet = new Set(hiddenIds);\n  const { locale } = useUser();\n  const {\n    xProps,\n    xScale,\n    xViewportExtent,\n    xAxisExtent,\n    xIndexExtent,\n    yViewportExtent,\n    yAxisExtent,\n    groupWidth,\n    yProps,\n    yScale,\n    yMaxDim,\n    yMajorTicks,\n    yMinorTicks,\n    plotAreaSpace,\n    idToDataMap,\n    formatAxisLabel,\n    formatYValue\n  } = getLayoutInfo<K, D>(\n    series,\n    groups,\n    getDataItem,\n    xAxis,\n    yAxis,\n    availSpace,\n    hiddenSet,\n    hideAndShowBehavior,\n    isHoriz,\n    isRtl,\n    isStacked,\n    resolvedVars['labelFontSize'],\n    offset,\n    locale,\n    getTextDimensions\n  );\n\n  scrollDims = updateScrollBarSpace(scrollDims, xAxisPosition === 'bottom', isRtl, yMaxDim);\n\n  const gapRatio = getGapRatio(xIndexExtent.startIndex, xIndexExtent.endIndex);\n\n  const getNextChartItem = getNavUtil(xIndexExtent.startIndex, xIndexExtent.endIndex);\n\n  const renderedGroupsIndex = xProps.tickLabels.map(({ index }) => index + xIndexExtent.startIndex);\n  const { getNextNavGroup, getDefaultNavGroup } = getGroupNavUtil(\n    groups,\n    renderedGroupsIndex,\n    xIndexExtent,\n    drilling,\n    isRtl\n  );\n\n  const {\n    cursor,\n    marqueeProps,\n    marqueeContent,\n    toggleButtonContent,\n    isPointInsideMarquee,\n    dragMode: mode\n  } = useChartMarquee<K, D>({\n    plotAreaSpace,\n    dragMode,\n    chartWidth: width,\n    isMultiSelection: selectionMode === 'multiple',\n    onViewportChange,\n    isZoomScroll: zoomAndScroll === 'live',\n    xAxisExtent,\n    xScale,\n    selectedIds,\n    getDataById: (id) => idToDataMap.get(id),\n    onSelectionChange,\n    viewportMax: xViewportExtent.viewportMax,\n    viewportMin: xViewportExtent.viewportMin,\n    isRtl\n  });\n\n  const { touchResponse, touchResponseStyle } = useVisTouchResponse({\n    type: 'auto',\n    supportsTouchDragGestures: mode !== 'off',\n    rootRef\n  });\n\n  const { activeId, focusedItemInfo, hoveredItemInfo, focusedGroupInfo, navProps, onFocusUpdate } =\n    useChartNav({\n      rootRef,\n      getNextChartItem,\n      getNextNavGroup,\n      getDefaultNavGroup,\n      touchResponse,\n      onItemHover,\n      onItemFocus,\n      drilling,\n      xIndexExtent\n    });\n\n  const onContextMenuDismissed = (gesture: gestureTypes) => {\n    if (gesture === 'keyboard') {\n      onFocusUpdate();\n    }\n  };\n\n  const getTextAndBounds = (target: EventTarget | null) => {\n    if (target != rootRef.current) {\n      const dataSet = getElementData(rootRef, target as HTMLElement);\n      const text = dataSet?.['ojText']!;\n\n      if (!text) {\n        return;\n      }\n\n      if (text === xAxis?.title) {\n        return {\n          text,\n          bounds: xProps.titleProps?.dims\n        };\n      } else if (text === yAxis?.title) {\n        return {\n          text,\n          bounds: yProps.titleProps?.dims\n        };\n      } else if (dataSet?.['ojGroupIndex']) {\n        const index = parseInt(dataSet['ojGroupIndex']);\n        return {\n          bounds: xProps.tickLabels[index].dims,\n          text: text!\n        };\n      }\n    }\n\n    if (target === rootRef.current && focusedGroupInfo.isFocusVisible) {\n      const group = groups[focusedGroupInfo.groupIndex];\n      return {\n        bounds: xProps.tickLabels[focusedGroupInfo.groupIndex].dims,\n        text: group.name || group.id\n      };\n    }\n    return;\n  };\n\n  const { tooltipContent, tooltipProps } = useTextTruncation({\n    getTextAndBounds,\n    width,\n    isRtl\n  });\n\n  const { selectDrillProps, selectionContent } = useSelectDrill<K, D>({\n    selectionMode,\n    selection: [...selectedIds],\n    onChange: onSelectionChange,\n    rootRef,\n    drilling,\n    onItemDrill,\n    onGroupDrill,\n    focusedGroupInfo,\n    focusedItemInfo,\n    groups,\n    getDataItem,\n    getDataById: (id) => idToDataMap.get(id)\n  });\n\n  const viewportProps = useChartViewport({\n    rootRef,\n    width,\n    height,\n    xViewportExtent,\n    yViewportExtent,\n    xAxisExtent,\n    yAxisExtent,\n    xScale,\n    yScale,\n    plotAreaSpace,\n    isRtl,\n    isHoriz,\n    zoomAndScroll,\n    onViewportChange\n  });\n\n  const findNearestData = findNearest(xScale as any, yScale, groupWidth, gapRatio);\n  const getDataItemPosition = getDataItemPos(xScale as any, yScale, groupWidth, gapRatio);\n\n  const {\n    datatipContent,\n    dataCursorContent,\n    datatipProps: { 'aria-describedby': datatipAriaDescribedby, ...datatipProps }\n  } = useChartDatatipAndCursor<K, D>({\n    series,\n    groups,\n    width,\n    height,\n    findNearest: findNearestData,\n    plotAreaSpace,\n    onDataCursorPositionChange,\n    isDataCursorEnabled,\n    dataCursorPosition,\n    dataCursorStyle,\n    hoveredItemInfo,\n    focusedItemInfo,\n    getDataItem,\n    getMarkerInfo,\n    getDataItemPos: getDataItemPosition,\n    datatip,\n    valueFormats,\n    isHoriz,\n    touchResponse,\n    isDisabled: mode != 'off',\n    xScale: xScale as any,\n    yScale,\n    timeAxisType: (xAxis as TimeAxisProps)?.timeAxisType,\n    formatAxisLabel,\n    formatYValue\n  });\n\n  const isGroupInteractive = (index: number) => {\n    if ((xAxis as TimeAxisProps)?.timeAxisType != null) {\n      return false;\n    }\n    const groupDrill = groups[index].drilling;\n    if (groupDrill === 'on') {\n      return true;\n    }\n\n    if (groupDrill != 'off' && (drilling === 'on' || drilling === 'groupsOnly')) {\n      return true;\n    }\n    return false;\n  };\n\n  const plotAreaClipPathId = useId();\n  const { viewportMin: xViewportMin, viewportMax: xViewportMax } = xViewportExtent;\n  const { startIndex: xStartIndex, endIndex: xEndIndex } = xIndexExtent;\n  const gridLines = (\n    <Gridlines\n      plotArea={plotArea}\n      yMinorTicks={yMinorTicks}\n      xScale={xScale}\n      yScale={yScale}\n      isLog={yAxis?.scale === 'log'}\n      xViewportMin={xViewportMin}\n      xViewportMax={xViewportMax}\n      yTicks={yMajorTicks}\n      yAxisPosition={yAxisPosition}\n    />\n  );\n  const { contextMenuContent, contextMenuProps } = useChartContextMenu<K, D>({\n    series,\n    groups,\n    getDataItem,\n    focusedItemInfo,\n    rootRef,\n    xAxisTitle: xAxis?.title,\n    yAxisTitle: yAxis?.title,\n    contextMenuConfig,\n    onContextMenuDismissed\n  });\n\n  const eventsProps = mergeProps(\n    navProps,\n    selectDrillProps,\n    viewportProps,\n    datatipProps,\n    marqueeProps,\n    tooltipProps,\n    contextMenuProps\n  );\n\n  return (\n    <div\n      tabIndex={0}\n      ref={rootRef}\n      aria-activedescendant={activeId}\n      aria-label={props['aria-label']}\n      aria-labelledby={props['aria-labelledby']}\n      aria-describedby={merge([props['aria-describedby'], datatipAriaDescribedby])}\n      style={touchResponseStyle}\n      role=\"application\"\n      className={styles.baseChartStyle}\n      {...testIdProps}\n      {...eventsProps}>\n      <svg width=\"100%\" height=\"100%\">\n        <clipPath id={`${plotAreaClipPathId}`}>\n          <rect {...plotAreaSpace}></rect>\n        </clipPath>\n        <PlotArea\n          color={plotArea?.color}\n          yScale={yScale}\n          cursor={cursor}\n          isLog={yAxis?.scale === 'log'}\n          availSpace={plotAreaSpace}\n          xAxisPosition={xAxisPosition}\n        />\n        {!renderGridLinesInFront && gridLines}\n        <Axis {...(yProps as any)} axisPosition={yAxisPosition} isRtl={isRtl} />\n        <Axis\n          {...xProps}\n          isRtl={isRtl}\n          axisPosition={xAxisPosition}\n          isTextInteractive={isGroupInteractive}\n          activeId={activeId}\n          focusedGroupIndex={\n            focusedGroupInfo.isFocusVisible ? focusedGroupInfo.groupIndex : undefined\n          }\n        />\n        <g clip-path={`url(#${plotAreaClipPathId})`}>\n          {children({\n            xStartIndex,\n            xEndIndex,\n            colors,\n            xScale: xScale as any,\n            yScale,\n            isPointInsideMarquee,\n            defaultFontSize: resolvedVars['labelFontSize'],\n            gapRatio,\n            activeId,\n            focusedItemInfo,\n            hoveredItemInfo,\n            getTextDimensions,\n            groupWidth\n          })}\n          {renderGridLinesInFront && gridLines}\n          {dataCursorContent}\n        </g>\n        {zoomAndScroll === 'live' && (\n          <ScrollBar\n            availSpace={scrollDims}\n            isRtl={isRtl}\n            viewport={xViewportExtent}\n            axisExtent={xAxisExtent}\n            isHoriz={xAxisPosition === 'bottom'}\n          />\n        )}\n        {marqueeContent}\n      </svg>\n      {toggleButtonContent}\n      {textMeasureContent}\n      {cssContent}\n      {datatipContent}\n      {tooltipContent}\n      {contextMenuContent}\n      {selectionContent}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { calculateOffset } from '#hooks/PRIVATE_useDatatip';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useRef, useState } from 'preact/hooks';\n\ntype Props = {\n  getTextAndBounds: (target: EventTarget | null) =>\n    | {\n        text?: string;\n        bounds?: Dimension;\n      }\n    | undefined;\n  isRtl: boolean;\n  width: number;\n};\n\nexport function useTextTruncation({ getTextAndBounds, width, isRtl }: Props) {\n  const [text, setText] = useState<string>();\n  const bounds = useRef<Dimension>();\n\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text,\n    position: 'top-start',\n    offset: calculateOffset(isRtl, width, bounds.current)\n  });\n\n  const onPointerMove = (event: Event) => {\n    const textAndBounds = getTextAndBounds(event.target);\n\n    if (textAndBounds) {\n      bounds.current = textAndBounds.bounds;\n      setText(textAndBounds.text);\n    } else {\n      setText(undefined);\n    }\n  };\n\n  return {\n    tooltipContent,\n    tooltipProps: mergeProps({ onPointerMove }, tooltipProps)\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { dimensionStyle } from './themes/ChartStyles.css';\nimport { TrackResizeContainer } from '../PRIVATE_TrackResizeContainer';\nimport { ChartWithDimensions } from './ChartWithDimensions';\nimport {\n  ChartItemData,\n  ChartCommonProps,\n  ChartSeriesData,\n  GetNextChartItemType,\n  Info,\n  Scale,\n  getDataPosType\n} from '../utils/UNSAFE_visTypes/chart';\nimport { Dimension, MarkerShapes } from '#utils/UNSAFE_visTypes/common';\nimport { VNode } from 'preact';\nimport { Property } from 'csstype';\n\nexport type ChartProps<K, D> = {\n  selectedIds: Set<K>;\n  getGapRatio: (startIndex: number, endIndex: number) => number;\n  getNavUtil: (startIndex: number, endIndex: number) => GetNextChartItemType;\n  getDataItemPos: (\n    xScale: Scale,\n    yScale: Scale,\n    groupWidth: number,\n    gapRatio: number\n  ) => getDataPosType;\n  findNearest: (\n    xScale: Scale,\n    yScale: Scale,\n    groupWidth: number,\n    gapRatio: number\n  ) => (\n    x: number,\n    y: number\n  ) =>\n    | {\n        seriesIndex: number;\n        groupIndex: number;\n        y: number | undefined;\n        x: number;\n      }\n    | undefined;\n  children: (context: {\n    xStartIndex: number;\n    xEndIndex: number;\n    xScale: Scale;\n    yScale: Scale;\n    gapRatio: number;\n    activeId?: string;\n    focusedItemInfo: Info;\n    hoveredItemInfo?: Info;\n    groupWidth: number;\n    isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n    getTextDimensions?: (text: string, style: Record<string, any>) => Dimension;\n    defaultFontSize: string;\n    colors: string[];\n  }) => VNode;\n  offset: number;\n  series: ChartSeriesData<K, D>[];\n  isRtl: boolean;\n  renderGridLinesInFront: boolean;\n  getMarkerInfo: (\n    seriesIndex: number,\n    groupIndex: number\n  ) => { color: Property.Color | undefined; type?: MarkerShapes };\n} & Omit<ChartCommonProps<K, D>, 'highlightedIds' | 'hoverBehavior' | 'selectedIds'>;\n\nexport function Chart<K extends string | number, D extends ChartItemData<K>>({\n  width,\n  height,\n  ...props\n}: ChartProps<K, D>) {\n  // TODO: reevaluate how we handle empty data\n  return (\n    <TrackResizeContainer width={width} height={height} class={dimensionStyle}>\n      {(width, height) =>\n        width || height ? (\n          <ChartWithDimensions width={width} height={height} {...props} />\n        ) : undefined\n      }\n    </TrackResizeContainer>\n  );\n}\n"],"names":["getNextGroup","info","viewportEndIndex","isGroupNavigable","groupIndex","getPreviousGroup","chartVars","getChartVars","ChartWithDimensions","width","height","selectedIds","hiddenIds","hideAndShowBehavior","orientation","xAxis","yAxis","plotArea","dragMode","series","groups","isStacked","getDataItem","selectionMode","drilling","dataCursorPosition","onSelectionChange","isDataCursorEnabled","dataCursorStyle","onViewportChange","onDataCursorPositionChange","onItemDrill","onGroupDrill","onItemHover","onItemFocus","datatip","zoomAndScroll","offset","getNavUtil","getDataItemPos","getGapRatio","valueFormats","findNearest","getMarkerInfo","isRtl","children","testId","renderGridLinesInFront","contextMenuConfig","props","testIdProps","useTestId","rootRef","useRef","isHoriz","xAxisPosition","yAxisPosition","getAxesPosition","resolvedVars","cssContent","useCssVars","colors","Array","from","map","_","index","textMeasureContent","getTextDimensions","useTextDimensions","availSpace","getAvailSpace","updatedSpace","getScrollBarSpace","scrollDims","hiddenSet","Set","locale","useUser","xProps","xScale","xViewportExtent","xAxisExtent","xIndexExtent","yViewportExtent","yAxisExtent","groupWidth","yProps","yScale","yMaxDim","yMajorTicks","yMinorTicks","plotAreaSpace","idToDataMap","formatAxisLabel","formatYValue","getLayoutInfo","updateScrollBarSpace","gapRatio","startIndex","endIndex","getNextChartItem","renderedGroupsIndex","tickLabels","getNextNavGroup","getDefaultNavGroup","renderedGroups","groupsDrilling","length","arrow","nextGroup","getGroupNavUtil","cursor","marqueeProps","marqueeContent","toggleButtonContent","isPointInsideMarquee","mode","useChartMarquee","chartWidth","isMultiSelection","isZoomScroll","getDataById","id","get","viewportMax","viewportMin","touchResponse","touchResponseStyle","useVisTouchResponse","type","supportsTouchDragGestures","activeId","focusedItemInfo","hoveredItemInfo","focusedGroupInfo","navProps","onFocusUpdate","useChartNav","tooltipContent","tooltipProps","getTextAndBounds","text","setText","useState","bounds","useTooltip","position","calculateOffset","current","mergeProps","onPointerMove","event","textAndBounds","target","undefined","useTextTruncation","dataSet","getElementData","title","titleProps","dims","parseInt","isFocusVisible","group","name","selectDrillProps","selectionContent","useSelectDrill","selection","onChange","viewportProps","useChartViewport","findNearestData","getDataItemPosition","datatipContent","dataCursorContent","datatipProps","datatipAriaDescribedby","useChartDatatipAndCursor","isDisabled","timeAxisType","plotAreaClipPathId","useId","xViewportMin","xViewportMax","xStartIndex","xEndIndex","gridLines","_jsx","Gridlines","isLog","scale","yTicks","contextMenuContent","contextMenuProps","useChartContextMenu","xAxisTitle","yAxisTitle","onContextMenuDismissed","gesture","eventsProps","_jsxs","jsxs","tabIndex","ref","merge","style","role","className","styles","baseChartStyle","jsx","PlotArea","color","Axis","axisPosition","isTextInteractive","groupDrill","focusedGroupIndex","defaultFontSize","ScrollBar","viewport","axisExtent","TrackResizeContainer","class","dimensionStyle"],"mappings":"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"}