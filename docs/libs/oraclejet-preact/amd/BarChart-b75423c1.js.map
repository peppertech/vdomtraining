{"version":3,"file":"BarChart-b75423c1.js","sources":["../../src/UNSAFE_BarChart/utils/barSeriesUtils.ts","../../src/UNSAFE_BarChart/Bar.tsx","../../src/UNSAFE_BarChart/utils/barItemUtils.ts","../../src/UNSAFE_BarChart/utils/barLayoutUtils.ts","../../src/UNSAFE_BarChart/utils/barItemLabelUtils.ts","../../src/UNSAFE_BarChart/BarChartStackLabel.tsx","../../src/UNSAFE_BarChart/BarLabel.tsx","../../src/UNSAFE_BarChart/BarGroup.tsx","../../src/UNSAFE_BarChart/utils/barNavUtils.ts","../../src/UNSAFE_BarChart/BarChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nconst IDEAL_DATA_ITEM_GAP = 2;\nconst DEFAULT_BAR_GAP_RATIO = 0.25;\n\n/**\n * The function that calculates the barWidth and offset from group center for each series.\n * @param groupWidth The width of the group.\n * @param noOfSeries The number of series present in the chart.\n * @param barGapRatio The ratio of gap to groupWidth.\n * @param dataItemGaps The ratio that determines the gap between the bars.\n */\nexport function getBarGapsInfo(\n  seriesIndex: number,\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const numSeries = isStacked ? 1 : numOfSeries;\n  const itemsGaps = IDEAL_DATA_ITEM_GAP * dataItemGaps;\n  const barWidth = (groupWidth * (1 - barGapRatio) - (numSeries - 1) * itemsGaps) / numSeries;\n  if (isStacked) {\n    return { barWidth, offset: (-1 * barWidth) / 2, itemsGaps };\n  }\n  const center = groupWidth / 2;\n  const seriesStart =\n    groupWidth * (barGapRatio / 2) + seriesIndex * (barWidth + IDEAL_DATA_ITEM_GAP * dataItemGaps);\n  const offset = isRtl ? center - seriesStart - barWidth : seriesStart - center;\n\n  return { barWidth, offset, itemsGaps };\n}\n\n/**\n * Returns the bar gap ratio.\n * @param isStacked Whether the chart is a stacked bar chart.\n * @param startIndex The viewport start index.\n * @param endIndex The viewport end index.\n */\nexport function getBarGapRatio(isStacked: boolean, startIndex: number, endIndex: number) {\n  const noOfGroups = endIndex - startIndex + 1;\n  // logic from legacy\n  return isStacked ? 0.37 + 0.26 / noOfGroups : DEFAULT_BAR_GAP_RATIO;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from '../PRIVATE_Chart/themes/ChartStyles.css';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype BarProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDimmed: boolean;\n  activeId?: string;\n  isPointerEnabled: boolean;\n  fill: ColorProps['color'];\n  stroke?: ColorProps['color'];\n  strokeWidth?: number;\n  seriesIndex: number;\n  groupIndex: number;\n  'aria-label'?: string;\n};\n\nconst HOVERED_INNER_INSET = 1.5;\nconst SELECTED_INNER_INSET = 2.5;\n\n/**\n * The rect representing the bar item.\n * @param props\n * @returns\n */\nexport function Bar(props: BarProps) {\n  const isInteractive = props.isSelected || props.isFocused;\n\n  if (isInteractive) {\n    return <InteractiveBar {...props} />;\n  }\n\n  return (\n    <rect\n      x={props.x}\n      y={props.y}\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      data-oj-object=\"bar\"\n      aria-label={props['aria-label']}\n      role={props['aria-label'] ? 'img' : undefined}\n      id={props.activeId}\n      style={{\n        width: props.width,\n        height: props.height,\n        fill: props.fill,\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth\n      }}\n      class={classNames([\n        props.isPointerEnabled ? styles.cursorEnable : undefined,\n        props.isDimmed ? styles.dimmed : undefined\n      ])}\n    />\n  );\n}\n\n/**\n * The selected or hovered selected bar.\n */\nexport function InteractiveBar(props: BarProps) {\n  const { x, y, width, height, fill, isSelected, isFocused } = props;\n  const inset = isSelected ? SELECTED_INNER_INSET : HOVERED_INNER_INSET;\n  return (\n    <g\n      id={props.activeId}\n      data-oj-object=\"bar\"\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      className={props.isDimmed ? styles.dimmed : ''}\n      role={props['aria-label'] ? 'img' : undefined}\n      aria-label={props['aria-label']}>\n      <rect\n        x={x}\n        y={y}\n        class={classNames([isSelected ? styles.selectedBorder : ''])}\n        style={{\n          width: width,\n          height: height,\n          fill: !isSelected && isFocused ? fill : undefined\n        }}></rect>\n      <rect\n        x={x + inset}\n        y={y + inset}\n        class={classNames([\n          styles.contrastBorder,\n          props.isPointerEnabled ? styles.cursorEnable : undefined\n        ])}\n        style={{\n          width: width - 2 * inset,\n          height: height - 2 * inset,\n          fill: fill\n        }}></rect>\n    </g>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ColorProps } from '../../utils/UNSAFE_interpolations/colors';\nimport { BarItemData, BarSeriesData } from '../barChart.types';\n\nexport function getBarProps<K, D>(\n  item: BarItemData<K>,\n  series: BarSeriesData<K, D>,\n  seriesColor: ColorProps['color']\n) {\n  const fill = item.color || series.color || seriesColor;\n  const stroke = item.borderColor || series.borderColor;\n  return { fill, stroke };\n}\n\n/**\n * Returns the coordinate of bar rect.\n * @param x1 The bar start coordinate in x axis.\n * @param x2 The bar end coordinate in x axis.\n * @param endCoord The coordinate of bar top in y axis.\n * @param baselineCoord The coordinate of bar base in y axis.\n * @param isHoriz Whether the chart is horizontal chart.\n * @returns\n */\nexport function getRectCoord(\n  x1: number,\n  x2: number,\n  endCoord: number,\n  baselineCoord: number,\n  isHoriz: boolean\n) {\n  let x: number;\n  let y: number;\n  let width: number;\n  let height: number;\n\n  let x_1 = x1;\n  let x_2 = x2;\n\n  // Bar width has to be at least 1px to prevent disappearing bars\n  let barWidth = x2 - x1;\n  if (barWidth < 1) {\n    x_1 = Math.floor(x_1);\n    x_2 = x_1 + 1;\n    barWidth = 1;\n  }\n\n  if (!isHoriz) {\n    x = x_1;\n    y = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(x_2 - x_1);\n    height = Math.abs(baselineCoord - endCoord);\n  } else {\n    y = x_1;\n    x = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(baselineCoord - endCoord);\n    height = Math.abs(x_2 - x_1);\n  }\n\n  return { x, y, width, height };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getBarGapsInfo } from './barSeriesUtils';\nimport { getRectCoord } from './barItemUtils';\nimport { BarSeriesData } from '../barChart.types';\nimport { ChartItemData, Scale, Group } from '../../utils/UNSAFE_visTypes/chart';\n\n/**\n * Returns the base and end coordinate of the bar.\n * @param value The value of the bar item.\n * @param yScale The yscale.\n * @param isStacked Whether the bar chart is stacked or not.\n * @param isLog Whether the y axis is in log scale.\n * @param itemsGaps The gap between data item.\n * @param negCummulativeValue The negative cummulative value of the group.\n * @param posCummulativeValue The positive cummulative value of the group.\n * @returns\n */\nexport function getBaseAndEndCoord(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  itemsGaps: number,\n  negCummulativeValue: number,\n  posCummulativeValue: number\n) {\n  let baselineCoord;\n  let endCoord;\n  if (isStacked) {\n    baselineCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n    negCummulativeValue += value < 0 ? value : 0;\n    posCummulativeValue += value > 0 ? value : 0;\n    endCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n\n    baselineCoord += endCoord > baselineCoord ? itemsGaps : -itemsGaps;\n  } else {\n    baselineCoord = isLog ? yScale.range()[0] : yScale.transform(0);\n    endCoord = yScale.transform(value);\n  }\n  return { baselineCoord, endCoord };\n}\n\nexport function getBarPosition<K extends string | number, D extends ChartItemData<K>>(\n  series: BarSeriesData<K, D>[],\n  groups: Group[],\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  xScale: Scale,\n  yScale: Scale,\n  hiddenIds: Set<number | string> | undefined,\n  dataItemGaps: number,\n  groupWidth: number,\n  barGapRatio: number,\n  isLog: boolean,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean,\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps'\n) {\n  return (seriesIndex: number, groupIndex: number) => {\n    const numOfSeries = series.length;\n    let posCumulativeValue = 0;\n    let negCumulativeValue = 0;\n    for (let index = 0; index < numOfSeries; index += 1) {\n      const item = getDataItem(index, groupIndex);\n      let xVal = groupIndex;\n      if (timeAxisType) {\n        const val =\n          timeAxisType === 'mixedFrequency'\n            ? getDataItem(seriesIndex, groupIndex)?.x\n            : groups[groupIndex].id;\n        xVal = new Date(val!).getTime();\n      }\n      if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n        continue;\n      }\n      const groupCenter = xScale.transform(xVal);\n      const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n        index,\n        groupWidth,\n        barGapRatio,\n        numOfSeries,\n        dataItemGaps,\n        isStacked,\n        isRtl\n      );\n      const x1 = groupCenter + offset;\n      const x2 = x1 + barWidth;\n\n      const { baselineCoord, endCoord } = getBaseAndEndCoord(\n        item.value,\n        yScale,\n        isStacked,\n        isLog,\n        itemsGaps,\n        negCumulativeValue,\n        posCumulativeValue\n      );\n      negCumulativeValue += item.value < 0 ? item.value : 0;\n      posCumulativeValue += item.value > 0 ? item.value : 0;\n\n      if (seriesIndex === index) {\n        return getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n      }\n    }\n    return;\n  };\n}\n\n/**\n * Returns the center coordinate of the bar item.\n * @param value\n * @param yScale\n * @param isStacked\n * @param isLog\n * @param dataItemGaps\n * @param negCummValue\n * @param posCummValue\n * @returns\n */\nexport function getBarCenterCoordinate(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  dataItemGaps: number,\n  negCummValue: number,\n  posCummValue: number\n) {\n  const { baselineCoord, endCoord } = getBaseAndEndCoord(\n    value,\n    yScale,\n    isStacked,\n    isLog,\n    dataItemGaps,\n    negCummValue,\n    posCummValue\n  );\n  return (baselineCoord + endCoord) / 2;\n}\n\nexport function getSeriesOffsetAndWidth(\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  return (seriesIndex: number) => {\n    const { offset, barWidth } = getBarGapsInfo(\n      seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numOfSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    return { offset, dataWidth: barWidth };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\n\nconst LABEL_OFFSET = 2;\n\nfunction getValueCoord(isHoriz: boolean, isRtl: boolean, isNegative: boolean, barDims: Dimension) {\n  if (isHoriz) {\n    return (isNegative && !isRtl) || (!isNegative && isRtl) ? barDims.x : barDims.x + barDims.width;\n  }\n  return isNegative ? barDims.height + barDims.y : barDims.y;\n}\n\nexport function getLabelProps(\n  isHoriz: boolean,\n  isRtl: boolean,\n  isNegative: boolean,\n  barDims: Dimension,\n  dataLabelPosition: 'insideBarEdge' | 'outsideBarEdge' | 'center',\n  labelDims?: Dimension\n) {\n  if (!labelDims) {\n    return {};\n  }\n\n  const valueCoord = getValueCoord(isHoriz, isRtl, isNegative, barDims);\n\n  if (dataLabelPosition === 'insideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord + (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET + 2),\n      x: isHoriz\n        ? valueCoord -\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  if (dataLabelPosition === 'outsideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n      x: isHoriz\n        ? valueCoord +\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  return {\n    x: barDims.x + barDims.width / 2,\n    y: barDims.y + barDims.height / 2\n  };\n}\n\nexport function canFitLabel(\n  isHoriz: boolean,\n  labelDims: Dimension,\n  barDims: Dimension,\n  labelPos: 'insideBarEdge' | 'outsideBarEdge' | 'center'\n) {\n  if (isHoriz) {\n    if (labelDims.height > barDims.height) {\n      return false;\n    }\n    if (labelPos != 'outsideBarEdge') {\n      return labelDims.width < barDims.width;\n    }\n    return true;\n  }\n\n  if (labelDims.width > barDims.width) {\n    return false;\n  }\n\n  if (labelPos != 'outsideBarEdge') {\n    return labelDims.height < barDims.height;\n  }\n  return true;\n}\n\nexport const getStackLabelProps = (\n  groupCenterCoord: number,\n  valueCoord: number,\n  isNegative: boolean,\n  isHoriz: boolean,\n  isRtl: boolean,\n  labelDims: Dimension\n) => {\n  return {\n    y: isHoriz\n      ? groupCenterCoord\n      : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n    x: isHoriz\n      ? valueCoord +\n        ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n          (labelDims.width / 2 + LABEL_OFFSET)\n      : groupCenterCoord\n  };\n};\n","import { Scale, Group } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { VisTextStyle } from '#utils/UNSAFE_visUtils';\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getStackLabelProps } from './utils/barItemLabelUtils';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions/textDimensionsUtils';\n\ntype Props<K, D extends BarItemData<K>> = {\n  groupCenter: number;\n  labelStyle?: VisTextStyle;\n  yScale: Scale;\n  defaultFontSize: string;\n  getStackLabel: NonNullable<BarChartProps<K, D>['getStackLabel']>;\n  group: Group;\n  isRtl: boolean;\n  posValue: number;\n  negValue: number;\n  posItemsData: D[];\n  isHoriz: boolean;\n  negItemsData: D[];\n  getTextDimensions: (text: string, font: Font) => Dimension;\n};\n\nexport function StackLabels<K, D extends BarItemData<K>>({\n  groupCenter,\n  getStackLabel,\n  group,\n  posValue,\n  negValue,\n  posItemsData,\n  yScale,\n  isHoriz,\n  isRtl,\n  negItemsData,\n  defaultFontSize,\n  labelStyle,\n  getTextDimensions\n}: Props<K, D>) {\n  const positiveStackLabel = getStackLabel({\n    group,\n    value: posValue,\n    data: posItemsData\n  });\n\n  // default style used for text dims calc. should match with styles.stackLabelStyle\n  const stackLabelStyle = { fontSize: defaultFontSize, fontWeight: 'bold', ...labelStyle };\n\n  const negativeStackLabel =\n    negValue < 0\n      ? getStackLabel?.({\n          group,\n          value: negValue,\n          data: negItemsData\n        })\n      : '';\n\n  const posProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(posValue),\n    false,\n    isHoriz,\n    isRtl,\n    getTextDimensions(positiveStackLabel, stackLabelStyle)\n  );\n  const negProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(negValue),\n    true,\n    isHoriz,\n    isRtl,\n    getTextDimensions(negativeStackLabel, stackLabelStyle)\n  );\n\n  return (\n    <>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...posProps}>\n        {positiveStackLabel}\n      </text>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...negProps}>\n        {negativeStackLabel}\n      </text>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions';\nimport { BarItemData } from './barChart.types';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { canFitLabel, getLabelProps } from './utils/barItemLabelUtils';\nimport { VNode } from 'preact';\nimport { getContrastingTextColor } from '#utils/PRIVATE_colorUtils/colorUtils';\n\ntype Props<K> = {\n  item: BarItemData<K>;\n  seriesColor?: string;\n  isStacked: boolean;\n  defaultFontSize: string;\n  isHoriz: boolean;\n  barDim: Dimension;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  isRtl: boolean;\n};\n\nexport function BarLabel<K>({\n  item,\n  seriesColor,\n  isStacked,\n  defaultFontSize,\n  barDim,\n  isRtl,\n  isHoriz,\n  getTextDimensions\n}: Props<K>) {\n  let label: VNode | null = null;\n  const position =\n    !item.labelPosition || (item.labelPosition === 'outsideBarEdge' && isStacked)\n      ? 'center'\n      : item.labelPosition;\n  const labelString = item.label;\n  const color = item.color || seriesColor;\n  const needsContrastColor = isStacked || !(position === 'outsideBarEdge');\n\n  if (\n    position != 'none' &&\n    labelString &&\n    getTextDimensions &&\n    !(isStacked && position === 'outsideBarEdge')\n  ) {\n    const labelStyle = {\n      fontSize: defaultFontSize,\n      fill: needsContrastColor ? getContrastingTextColor(color!) : undefined,\n      ...item.labelStyle\n    };\n    const labelDims = getTextDimensions(labelString, labelStyle);\n    const canFit = canFitLabel(isHoriz, labelDims, barDim, position || 'center');\n    label = canFit ? (\n      <text\n        class={styles.dataLabelStyle}\n        style={labelStyle}\n        {...getLabelProps(\n          isHoriz,\n          isRtl,\n          item.value < 0,\n          barDim,\n          position || 'center',\n          getTextDimensions?.(labelString, labelStyle)\n        )}>\n        {labelString}\n      </text>\n    ) : null;\n  }\n\n  return label;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Bar } from './Bar';\nimport { BarItemData, BarSeriesData, StackLabelContext } from './barChart.types';\nimport { getBarProps, getRectCoord } from './utils/barItemUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { getBarGapsInfo } from './utils/barSeriesUtils';\nimport { getBaseAndEndCoord } from './utils/barLayoutUtils';\nimport { getMixedFreqGroupCenter } from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport { Info, Scale, Group } from '../utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '../utils/UNSAFE_visTypes/common';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { getItemAriaLabel } from '../utils/PRIVATE_chartUtils/accUtils';\nimport { VisTextStyle, supportsMobileScreenReader } from '../utils/UNSAFE_visUtils';\nimport { Font } from '../hooks/PRIVATE_useTextDimensions';\nimport { StackLabels } from './BarChartStackLabel';\nimport { BarLabel } from './BarLabel';\n\ntype BarGroupProps<K, D> = {\n  yScale: Scale;\n  xScale: Scale;\n  colors: ColorProps['color'][];\n  series: BarSeriesData<K, D>[];\n  group: Group;\n  timeAxisType?: 'enabled' | 'skipGaps' | 'mixedFrequency';\n  focusedItemInfo?: Info;\n  hoveredItemInfo?: Info;\n  isSelectionEnabled: boolean;\n  selectedIds?: Set<K>;\n  hiddenIds?: Set<K>;\n  highlightedIds?: Set<K>;\n  groupIndex: number;\n  barGapRatio: number;\n  dataItemGaps: number;\n  groupWidth: number;\n  isStacked: boolean;\n  activeId?: string;\n  orientation: 'horizontal' | 'vertical';\n  isDrillEnabled: boolean;\n  isLog: boolean;\n  isRtl: boolean;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  defaultFontSize: string;\n  stacklabelStyle?: VisTextStyle;\n  getStackLabel?: (context: StackLabelContext<D>) => string;\n};\n\nexport function BarGroup<K extends string | number, D extends BarItemData<K>>({\n  yScale,\n  xScale,\n  colors,\n  series,\n  groupIndex,\n  hiddenIds,\n  barGapRatio,\n  dataItemGaps,\n  groupWidth,\n  highlightedIds,\n  selectedIds,\n  isPointInsideMarquee,\n  orientation,\n  isLog,\n  activeId,\n  getDataItem,\n  isRtl,\n  isStacked,\n  isSelectionEnabled,\n  focusedItemInfo,\n  hoveredItemInfo,\n  isDrillEnabled,\n  group,\n  timeAxisType,\n  getTextDimensions,\n  defaultFontSize,\n  stacklabelStyle,\n  getStackLabel\n}: BarGroupProps<K, D>) {\n  const isHoriz = orientation === 'horizontal';\n  const items = [];\n  const numSeries = series.length;\n\n  let posCumulativeValue = isLog ? yScale.domain()[0] : 0;\n  let negCumulativeValue = 0;\n\n  const positiveValueItems: D[] = [];\n  const negativeValueItems: D[] = [];\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const isStackLabelRendered = isStacked && !!getStackLabel && timeAxisType != 'mixedFrequency';\n\n  let groupCenter =\n    timeAxisType != 'mixedFrequency'\n      ? xScale.transform(timeAxisType != undefined ? new Date(group.id).getTime() : groupIndex)\n      : undefined;\n\n  for (let seriesIndex = 0; seriesIndex < numSeries; seriesIndex += 1) {\n    const item = getDataItem(seriesIndex, groupIndex);\n    if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n      continue;\n    }\n\n    if (timeAxisType === 'mixedFrequency') {\n      groupCenter = getMixedFreqGroupCenter<K, D>(xScale, item);\n    }\n\n    const isFocused =\n      focusedItemInfo?.groupIndex === groupIndex &&\n      focusedItemInfo?.seriesIndex === seriesIndex &&\n      focusedItemInfo?.isFocusVisible;\n    const isHovered =\n      hoveredItemInfo?.groupIndex === groupIndex &&\n      hoveredItemInfo?.seriesIndex === seriesIndex &&\n      hoveredItemInfo?.isCurrent;\n    const isFocusVisible = !!isFocused || (!!isHovered && isSelectionEnabled);\n    const isActive = (isFocused && focusedItemInfo.isCurrent) || isHovered;\n    const isHighlighted = highlightedIds === undefined || highlightedIds.has(item.id);\n\n    const isDrillable = item.drilling === 'on' || (item.drilling != 'off' && isDrillEnabled);\n\n    const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n      seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    const x1 = groupCenter! + offset;\n    const x2 = x1 + barWidth;\n\n    const { baselineCoord, endCoord } = getBaseAndEndCoord(\n      item.value,\n      yScale,\n      isStacked,\n      isLog,\n      itemsGaps,\n      negCumulativeValue,\n      posCumulativeValue\n    );\n\n    negCumulativeValue += item.value < 0 ? item.value : 0;\n    posCumulativeValue += item.value > 0 ? item.value : 0;\n\n    if (isStackLabelRendered) {\n      if (item.value >= 0) {\n        positiveValueItems.push(item);\n      } else {\n        negativeValueItems.push(item);\n      }\n    }\n\n    const barprops = getBarProps(item, series[seriesIndex], colors?.[seriesIndex]);\n    const rectParam = getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n    const isSelected = isPointInsideMarquee\n      ? isPointInsideMarquee?.(item.id, {\n          x: rectParam.x + rectParam.width / 2,\n          y: rectParam.y\n        })\n      : selectedIds?.has(item.id!);\n\n    const ariaLabel =\n      supportsMobileScreenReader || isActive\n        ? getItemAriaLabel(\n            translations,\n            series[seriesIndex].name || series[seriesIndex].id.toString(),\n            group.name || group.id,\n            item.value,\n            isSelectionEnabled,\n            !!isSelected,\n            isDrillable,\n            item.accessibleLabel\n          )\n        : '';\n\n    items.push(\n      <>\n        <Bar\n          {...rectParam}\n          {...barprops}\n          seriesIndex={seriesIndex}\n          groupIndex={groupIndex}\n          isFocused={isFocusVisible}\n          activeId={isActive ? activeId : ''}\n          aria-label={ariaLabel}\n          isDimmed={!isHighlighted}\n          isSelected={!!isSelected}\n          isPointerEnabled={isDrillable || isSelectionEnabled}\n          key={`${groupIndex};${seriesIndex}`}\n        />\n        <BarLabel\n          item={item}\n          isRtl={isRtl}\n          seriesColor={colors[seriesIndex % 12]}\n          isStacked={isStacked}\n          defaultFontSize={defaultFontSize}\n          barDim={rectParam}\n          isHoriz={isHoriz}\n          getTextDimensions={getTextDimensions}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      {items}\n      {isStackLabelRendered && getTextDimensions && (\n        <StackLabels\n          group={group}\n          isRtl={isRtl}\n          yScale={yScale}\n          getStackLabel={getStackLabel}\n          defaultFontSize={defaultFontSize}\n          getTextDimensions={getTextDimensions}\n          posItemsData={positiveValueItems}\n          negItemsData={negativeValueItems}\n          isHoriz={isHoriz}\n          groupCenter={groupCenter!}\n          labelStyle={stacklabelStyle}\n          posValue={posCumulativeValue}\n          negValue={negCumulativeValue}\n        />\n      )}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ChartItemData, Info, ItemInfo } from '../../utils/UNSAFE_visTypes/chart';\nimport {\n  getNextItemInGroup,\n  getNextItemInSeries,\n  getPrevItemInGroup,\n  getPrevItemInSeries\n} from '../../utils/PRIVATE_chartUtils/navUtils';\n\ntype isItemNavigableType = (seriesIndex: number, groupIndex: number) => boolean;\n\n/**\n * Get next item in unstacked bar chart.\n * @param info\n * @param viewportEndIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getNextItem(\n  info: ItemInfo,\n  viewportEndIndex: number,\n  numSeries: number,\n  isNavigable: isItemNavigableType\n): ItemInfo {\n  const nextItemInGroup = getNextItemInGroup(info, numSeries, isNavigable);\n  if (nextItemInGroup) return nextItemInGroup;\n\n  if (info.groupIndex < viewportEndIndex) {\n    let nextItem = { seriesIndex: 0, groupIndex: info.groupIndex + 1 };\n    if (isNavigable(nextItem.seriesIndex, nextItem.groupIndex)) return nextItem;\n    nextItem = getNextItem(nextItem, viewportEndIndex, numSeries, isNavigable);\n    if (nextItem) return nextItem;\n  }\n  return info;\n}\n\n/**\n * Get prev item in unstacked bar chart.\n * @param info\n * @param viewportStartIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getPreviousItem(\n  info: ItemInfo,\n  viewportStartIndex: number,\n  numSeries: number,\n  isNavigable: (seriesIndex: number, groupIndex: number) => boolean\n) {\n  const prevItemInGroup = getPrevItemInGroup(info, isNavigable);\n  if (prevItemInGroup) return prevItemInGroup;\n\n  if (info.groupIndex > viewportStartIndex) {\n    let prevItem = { groupIndex: info.groupIndex - 1, seriesIndex: numSeries - 1 };\n    if (isNavigable(prevItem.seriesIndex, prevItem.groupIndex)) return prevItem;\n    prevItem = getPreviousItem(prevItem, viewportStartIndex, numSeries, isNavigable);\n    if (prevItem) return prevItem;\n  }\n  return info;\n}\n\nexport function getBarChartNavUtil<K, D extends ChartItemData<K>>(\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  numSeries: number,\n  viewportStartIndex: number,\n  viewportEndIndex: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const isItemNavigable = (seriesIndex: number, groupIndex: number) => {\n    const barItem = getDataItem(seriesIndex, groupIndex);\n    return Boolean(barItem);\n  };\n\n  const getNextChartItem = (\n    itemInfo: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ): Info => {\n    if (!isStacked && (arrow === 'ArrowDown' || arrow === 'ArrowUp')) {\n      return itemInfo;\n    }\n    let newInfo: Info | undefined;\n    // TODO: this is just to keep typescript happy.\n    // figure out consistent typing while doing type cleanup.\n    const info = {\n      groupIndex: itemInfo.groupIndex!,\n      seriesIndex: itemInfo.seriesIndex!\n    };\n\n    if (info.groupIndex! < viewportStartIndex) {\n      info.groupIndex = viewportStartIndex;\n      return info;\n    } else if (info.groupIndex! > viewportEndIndex) {\n      info.groupIndex = viewportEndIndex;\n      return info;\n    }\n\n    if (isStacked) {\n      if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItemInSeries(info, viewportEndIndex, isItemNavigable)\n          : getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPrevItemInSeries(info, viewportStartIndex, isItemNavigable)\n          : getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else if (arrow === 'ArrowDown') {\n        newInfo = getPrevItemInGroup(info, isItemNavigable);\n      } else {\n        newInfo = getNextItemInGroup(info, numSeries, isItemNavigable);\n      }\n    } else {\n      if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable)\n          : getNextItem(info, viewportEndIndex, numSeries, isItemNavigable);\n      } else if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItem(info, viewportEndIndex, numSeries, isItemNavigable)\n          : getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable);\n      }\n    }\n    return newInfo || info;\n  };\n\n  return getNextChartItem;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getBarGapRatio } from './utils/barSeriesUtils';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { BarGroup } from './BarGroup';\nimport { findNearestDataPoint } from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport {\n  getBarCenterCoordinate,\n  getBarPosition,\n  getSeriesOffsetAndWidth\n} from './utils/barLayoutUtils';\nimport { getBarChartNavUtil } from './utils/barNavUtils';\nimport { Chart } from '../PRIVATE_Chart';\nimport { TimeAxisProps, Scale } from '../utils/UNSAFE_visTypes/chart';\nimport { getItemColor, getMarkerType } from '../utils/PRIVATE_chartUtils/dataStyleUtils';\n\n/* bar chart start and end axis offset */\nconst AXIS_OFFSET = 0.5;\n\n/**\n * A Bar chart displays information graphically using rectangular bars with heights or lengths proportional to the values that they represent,\n * making relationships among the data easier to understand.\n */\nexport function BarChart<K extends string | number, D extends BarItemData<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataItemGaps = 0.5,\n  ...props\n}: BarChartProps<K, D>) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const hiddenSet = new Set(hiddenIds);\n  const isHoriz = orientation === 'horizontal';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const getGapRatio = (startIndex: number, endIndex: number) => {\n    return getBarGapRatio(isStacked, startIndex, endIndex);\n  };\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    return getBarChartNavUtil(getDataItem, series.length, startIndex, endIndex, isStacked, isRtl);\n  };\n  const getDataItemPos = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    return getBarPosition(\n      series,\n      groups,\n      getDataItem,\n      xScale,\n      yScale,\n      hiddenSet,\n      dataItemGaps,\n      groupWidth,\n      gapRatio,\n      yAxis?.scale === 'log',\n      isStacked,\n      isRtl,\n      isHoriz,\n      timeAxisType\n    );\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    const getSeriesDataInfo = getSeriesOffsetAndWidth(\n      groupWidth,\n      gapRatio,\n      series.length,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    return findNearestDataPoint(\n      series,\n      groups,\n      xScale,\n      yScale,\n      getDataItem,\n      isStacked,\n      getSeriesDataInfo,\n      getBarCenterCoordinate,\n      yAxis?.scale === 'log',\n      dataItemGaps,\n      hiddenSet,\n      timeAxisType\n    );\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    return {\n      color: getItemColor<K, D>(seriesIndex, groupIndex, series, getDataItem),\n      type: getMarkerType<K>(seriesIndex, groupIndex, 'bar', getDataItem)\n    };\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      isStacked={isStacked}\n      getDataItem={getDataItem}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      renderGridLinesInFront={false}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      getMarkerInfo={getMarkerColorAndType}\n      isRtl={isRtl}\n      offset={AXIS_OFFSET}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        gapRatio,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        groupWidth,\n        isPointInsideMarquee,\n        getTextDimensions,\n        defaultFontSize,\n        colors\n      }) => {\n        return (\n          <>\n            {groups.slice(xStartIndex, xEndIndex + 1).map((_, index) => (\n              <BarGroup\n                yScale={yScale}\n                xScale={xScale}\n                groupIndex={index + xStartIndex}\n                selectedIds={selectedSet}\n                hiddenIds={hiddenSet}\n                highlightedIds={highlightedIds ? highlightedSet : highlightedIds}\n                isDrillEnabled={drilling === 'on'}\n                series={series}\n                barGapRatio={gapRatio}\n                dataItemGaps={dataItemGaps}\n                isPointInsideMarquee={isPointInsideMarquee}\n                isStacked={isStacked}\n                groupWidth={groupWidth}\n                group={groups[index]}\n                timeAxisType={(props.xAxis as TimeAxisProps)?.timeAxisType}\n                colors={colors}\n                activeId={activeId}\n                isLog={yAxis?.scale === 'log'}\n                orientation={orientation}\n                getDataItem={getDataItem}\n                isSelectionEnabled={selectionMode != 'none'}\n                isRtl={isRtl}\n                focusedItemInfo={focusedItemInfo}\n                hoveredItemInfo={hoveredItemInfo}\n                getTextDimensions={getTextDimensions}\n                defaultFontSize={defaultFontSize}\n                getStackLabel={props.getStackLabel}\n              />\n            ))}\n          </>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["IDEAL_DATA_ITEM_GAP","DEFAULT_BAR_GAP_RATIO","getBarGapsInfo","seriesIndex","groupWidth","barGapRatio","numOfSeries","dataItemGaps","isStacked","isRtl","numSeries","itemsGaps","barWidth","offset","center","seriesStart","HOVERED_INNER_INSET","SELECTED_INNER_INSET","Bar","props","isSelected","isFocused","_jsx","jsx","InteractiveBar","x","y","groupIndex","role","undefined","id","activeId","style","width","height","fill","stroke","strokeWidth","class","classNames","isPointerEnabled","styles","cursorEnable","isDimmed","dimmed","inset","_jsxs","jsxs","className","children","selectedBorder","contrastBorder","getBarProps","item","series","seriesColor","color","borderColor","getRectCoord","x1","x2","endCoord","baselineCoord","isHoriz","x_1","x_2","Math","floor","abs","getBaseAndEndCoord","value","yScale","isLog","negCummulativeValue","posCummulativeValue","transform","range","getBarCenterCoordinate","negCummValue","posCummValue","LABEL_OFFSET","getLabelProps","isNegative","barDims","dataLabelPosition","labelDims","valueCoord","getValueCoord","getStackLabelProps","groupCenterCoord","StackLabels","groupCenter","getStackLabel","group","posValue","negValue","posItemsData","negItemsData","defaultFontSize","labelStyle","getTextDimensions","positiveStackLabel","data","stackLabelStyle","fontSize","fontWeight","negativeStackLabel","posProps","negProps","_Fragment","Fragment","BarLabel","barDim","label","position","labelPosition","labelString","getContrastingTextColor","canFit","labelPos","canFitLabel","dataLabelStyle","BarGroup","xScale","colors","hiddenIds","highlightedIds","selectedIds","isPointInsideMarquee","orientation","getDataItem","isSelectionEnabled","focusedItemInfo","hoveredItemInfo","isDrillEnabled","timeAxisType","stacklabelStyle","items","length","posCumulativeValue","domain","negCumulativeValue","positiveValueItems","negativeValueItems","translations","useTranslationBundle","isStackLabelRendered","Date","getTime","has","getMixedFreqGroupCenter","isFocusVisible","isHovered","isCurrent","isActive","isHighlighted","isDrillable","drilling","push","barprops","rectParam","ariaLabel","supportsMobileScreenReader","getItemAriaLabel","name","toString","accessibleLabel","_createElement","key","getNextItem","info","viewportEndIndex","isNavigable","nextItemInGroup","getNextItemInGroup","nextItem","getPreviousItem","viewportStartIndex","prevItemInGroup","getPrevItemInGroup","prevItem","hideAndShowBehavior","yAxis","groups","selectionMode","direction","useUser","hiddenSet","Set","xAxis","selectedSet","highlightedSet","Chart","renderGridLinesInFront","findNearest","gapRatio","getSeriesDataInfo","dataWidth","getSeriesOffsetAndWidth","findNearestDataPoint","scale","getDataItemPos","index","xVal","val","getBarPosition","getNavUtil","startIndex","endIndex","isItemNavigable","barItem","Boolean","itemInfo","arrow","newInfo","getNextItemInSeries","getPrevItemInSeries","getBarChartNavUtil","getGapRatio","getBarGapRatio","getMarkerInfo","getItemColor","type","getMarkerType","xStartIndex","xEndIndex","slice","map","_"],"mappings":"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"}