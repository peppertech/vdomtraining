{"version":3,"file":"positionUtils-3193ab54.js","sources":["../../src/utils/PRIVATE_floatingUtils/positionUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { RtlSide } from '../../UNSAFE_Floating';\n\n/**\n * Returns the normalized Position depending on the reading direction\n * @param side The side that should be normalized\n * @param direction The reading direction\n * @returns The normalized 'right' or 'left' position if the side was 'start' or 'end', otherwise returns unchanged position\n */\nexport const normalizePosition = (side: RtlSide, direction: 'rtl' | 'ltr'): RtlSide => {\n  const sideHashLtr = {\n    start: 'left',\n    end: 'right'\n  };\n  const sideHashRtl = {\n    start: 'right',\n    end: 'left'\n  };\n  if (direction === 'rtl') {\n    return side.replace(/start|end/g, (matched) => (sideHashRtl as any)[matched]) as RtlSide;\n  } else {\n    return side.replace(/start|end/g, (matched) => (sideHashLtr as any)[matched]) as RtlSide;\n  }\n};\n/**\n * Returns the reversed normalized Position depending on the reading direction\n * @param side The side that should be reversed\n * @param direction The reading direction\n * @returns The 'start' or 'end' position if the side was 'right' or 'left', otherwise returns unchanged position\n */\nexport const reverseNormalizePosition = (side: RtlSide, direction: 'rtl' | 'ltr'): RtlSide => {\n  const sideHashLtr = {\n    left: 'start',\n    right: 'end'\n  };\n  const sideHashRtl = {\n    right: 'start',\n    left: 'end'\n  };\n  if (direction === 'rtl') {\n    return side.replace(/left|right/g, (matched) => (sideHashRtl as any)[matched]) as RtlSide;\n  } else {\n    return side.replace(/left|right/g, (matched) => (sideHashLtr as any)[matched]) as RtlSide;\n  }\n};\n"],"names":["side","direction","sideHashLtr","start","end","sideHashRtl","replace","matched","left","right"],"mappings":"iEAgBiC,CAACA,EAAeC,KAC/C,MAAMC,EAAc,CAClBC,MAAO,OACPC,IAAK,SAEDC,EAAc,CAClBF,MAAO,QACPC,IAAK,QAEP,MAAkB,QAAdH,EACKD,EAAKM,QAAQ,cAAeC,GAAaF,EAAoBE,KAE7DP,EAAKM,QAAQ,cAAeC,GAAaL,EAAoBK,IACrE,6BAQqC,CAACP,EAAeC,KACtD,MAAMC,EAAc,CAClBM,KAAM,QACNC,MAAO,OAEHJ,EAAc,CAClBI,MAAO,QACPD,KAAM,OAER,MAAkB,QAAdP,EACKD,EAAKM,QAAQ,eAAgBC,GAAaF,EAAoBE,KAE9DP,EAAKM,QAAQ,eAAgBC,GAAaL,EAAoBK,IACtE"}