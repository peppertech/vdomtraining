{"version":3,"file":"IconUserAssistance-2f809060.js","sources":["../../src/UNSAFE_UserAssistance/IconUserAssistance.tsx"],"sourcesContent":["import { useCallback, useRef } from 'preact/hooks';\n\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { BundleType } from '#resources/nls/bundle';\n\nimport { HelpIcon } from '#PRIVATE_ThemedIcons/HelpIcon';\nimport { Popup } from '#UNSAFE_Popup';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { InlineHelp } from './InlineHelp';\nimport {\n  iconUserAssistanceIcon,\n  iconUserAssistancePopupFocus\n} from './themes/UserAssistanceStyles.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { PopupRedwoodTheme } from '#UNSAFE_Popup/themes/redwood/PopupTheme';\nimport { useToggle } from '#hooks/UNSAFE_useToggle';\n\ntype Props = {\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: string;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: string;\n  /**\n   * Custom text to be rendered for the `helpSourceLink`. \"Learn more\" will be used if no custom text is provided.\n   */\n  helpSourceText?: string;\n  /**\n   * Whether the trigger element is in tab sequence\n   */\n  isTabbable?: boolean;\n  /**\n   * ID of the pop up content that can be used for aria-describedby\n   */\n  id?: string;\n};\n\n/**\n * Created to match icon user assistance spec for use with radio option, pending design review\n * of inline UA assistance.\n */\nconst IconUserAssistance = ({\n  assistiveText,\n  helpSourceLink,\n  helpSourceText,\n  isTabbable = true,\n  id\n}: Props) => {\n  const { bool: isOpen, setFalse: setIsOpenFalse, toggle } = useToggle(false);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const userAssistance_learnMoreStr = translations.userAssistance_learnMore();\n  const sourceText = helpSourceLink && (helpSourceText || userAssistance_learnMoreStr);\n  const helpForRadioString = translations.radio_helpForRadio();\n  const helpStringId = `${id}-help-string`;\n  const anchorRef = useRef<HTMLSpanElement>(null);\n\n  const handleOutsideClick = useCallback(\n    (event: MouseEvent) => {\n      const target = event?.target;\n      // We need to filter out anchor click events, because anchor is responsible for the toggling\n      if (\n        (target instanceof Element || target instanceof Document) &&\n        !anchorRef.current?.contains(target) &&\n        isOpen\n      ) {\n        setIsOpenFalse();\n      }\n    },\n    [isOpen, setIsOpenFalse]\n  );\n\n  const handleOnKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      // allow user to close popup without having to focus it\n      if (['Tab', 'Escape'].includes(e.key) && isOpen) {\n        setIsOpenFalse();\n      }\n\n      // prevent scroll jump\n      if (e.code === 'Space') {\n        e.preventDefault();\n      }\n    },\n    [isOpen, setIsOpenFalse]\n  );\n\n  const { pressProps } = usePress((e) => {\n    e.preventDefault();\n    toggle();\n  });\n\n  const handleLinkEvent = useCallback(\n    (e: Event) => {\n      // if it's a key event that is not \"enter\", return early\n      const { key } = e as KeyboardEvent;\n      if (key && key !== 'Enter') {\n        return;\n      }\n\n      // We want to close the pop up if a link is triggered with mouse or keyboard\n      const { tagName } = e.target as Element;\n\n      if (tagName?.toLowerCase() === 'a') {\n        setIsOpenFalse();\n\n        // we want to refocus to the help icon after the browser has launched the link\n        // prematurely doing so prevents keyboard events from firing\n        setTimeout(() => anchorRef.current?.focus());\n      }\n    },\n    [setIsOpenFalse]\n  );\n\n  // We are referencing popup vars, so we need to bring in the baseTheme for popup\n  const { baseTheme: popupBaseTheme } = useComponentTheme(PopupRedwoodTheme);\n  const iconUserAssistanceClasses = classNames([popupBaseTheme, iconUserAssistancePopupFocus]);\n\n  return helpSourceLink || assistiveText ? (\n    <>\n      <span\n        {...pressProps}\n        role=\"link\"\n        aria-describedby={helpStringId}\n        aria-haspopup=\"dialog\"\n        ref={anchorRef}\n        tabIndex={isTabbable ? 0 : -1}\n        class={iconUserAssistanceIcon}\n        onKeyDown={handleOnKeyDown}\n        id={`${id}-help-icon`}>\n        <HelpIcon />\n      </span>\n      <HiddenAccessible id={helpStringId} isHidden={true}>\n        {helpForRadioString}\n      </HiddenAccessible>\n      <Popup\n        placement=\"top\"\n        isOpen={isOpen}\n        anchorRef={anchorRef}\n        onClose={setIsOpenFalse}\n        onClickOutside={handleOutsideClick}\n        shiftOptions={{ mainAxis: true, crossAxis: false }}\n        maxWidth={'296px'}>\n        <div\n          id={id}\n          tabIndex={0}\n          class={iconUserAssistanceClasses}\n          onMouseUp={handleLinkEvent}\n          onKeyDown={handleLinkEvent}>\n          <InlineHelp\n            assistiveText={assistiveText}\n            sourceLink={helpSourceLink}\n            sourceText={sourceText}\n          />\n        </div>\n      </Popup>\n    </>\n  ) : null;\n};\n\nexport { IconUserAssistance };\n"],"names":["assistiveText","helpSourceLink","helpSourceText","isTabbable","id","bool","isOpen","setFalse","setIsOpenFalse","toggle","useToggle","translations","useTranslationBundle","userAssistance_learnMoreStr","userAssistance_learnMore","sourceText","helpForRadioString","radio_helpForRadio","helpStringId","anchorRef","useRef","handleOutsideClick","useCallback","event","target","Element","Document","current","contains","handleOnKeyDown","e","includes","key","code","preventDefault","pressProps","usePress","handleLinkEvent","tagName","toLowerCase","setTimeout","focus","baseTheme","popupBaseTheme","useComponentTheme","PopupRedwoodTheme","iconUserAssistanceClasses","classNames","iconUserAssistancePopupFocus","_jsxs","jsxs","_Fragment","children","_jsx","role","ref","tabIndex","class","iconUserAssistanceIcon","onKeyDown","jsx","HelpIcon","HiddenAccessible","isHidden","Popup","placement","onClose","onClickOutside","shiftOptions","mainAxis","crossAxis","maxWidth","onMouseUp","InlineHelp","sourceLink"],"mappings":"scA8C2B,EACzBA,gBACAC,iBACAC,iBACAC,cAAa,EACbC,SAEA,MAAQC,KAAMC,EAAQC,SAAUC,EAAcC,OAAEA,GAAWC,aAAU,GAE/DC,EAAeC,uBAAiC,4BAChDC,EAA8BF,EAAaG,2BAC3CC,EAAad,IAAmBC,GAAkBW,GAClDG,EAAqBL,EAAaM,qBAClCC,EAAe,GAAGd,gBAClBe,EAAYC,SAAwB,MAEpCC,EAAqBC,eACxBC,IACC,MAAMC,EAASD,GAAOC,QAGnBA,aAAkBC,SAAWD,aAAkBE,YAC/CP,EAAUQ,SAASC,SAASJ,IAC7BlB,GAEAE,GACD,GAEH,CAACF,EAAQE,IAGLqB,EAAkBP,eACrBQ,IAEK,CAAC,MAAO,UAAUC,SAASD,EAAEE,MAAQ1B,GACvCE,IAIa,UAAXsB,EAAEG,MACJH,EAAEI,gBACH,GAEH,CAAC5B,EAAQE,KAGL2B,WAAEA,GAAeC,EAAQA,UAAEN,IAC/BA,EAAEI,iBACFzB,GAAQ,IAGJ4B,EAAkBf,eACrBQ,IAEC,MAAME,IAAEA,GAAQF,EAChB,GAAIE,GAAe,UAARA,EACT,OAIF,MAAMM,QAAEA,GAAYR,EAAEN,OAES,MAA3Bc,GAASC,gBACX/B,IAIAgC,YAAW,IAAMrB,EAAUQ,SAASc,UACrC,GAEH,CAACjC,KAIKkC,UAAWC,GAAmBC,EAAiBA,kBAACC,EAAiBA,mBACnEC,EAA4BC,EAAUA,WAAC,CAACJ,EAAgBK,EAAAA,+BAE9D,OAAO/C,GAAkBD,EACvBiD,EACEC,KAAAC,WAAA,CAAAC,SAAA,CAAAC,MAAA,OAAA,IACMlB,EACJmB,KAAK,0BACapC,EAAY,gBAChB,SACdqC,IAAKpC,EACLqC,SAAUrD,EAAa,GAAK,EAC5BsD,MAAOC,EAAAA,uBACPC,UAAW9B,EACXzB,GAAI,GAAGA,cACPgD,SAAAC,EAAAO,IAACC,UAAQ,CAAA,KAEXR,EAAAO,IAACE,mBAAgB,CAAC1D,GAAIc,EAAc6C,UAAU,EAAIX,SAC/CpC,IAEHqC,EAACO,IAAAI,QACC,CAAAC,UAAU,MACV3D,OAAQA,EACRa,UAAWA,EACX+C,QAAS1D,EACT2D,eAAgB9C,EAChB+C,aAAc,CAAEC,UAAU,EAAMC,WAAW,GAC3CC,SAAU,iBACVlB,EAAAA,IACE,MAAA,CAAAjD,GAAIA,EACJoD,SAAU,EACVC,MAAOX,EACP0B,UAAWnC,EACXsB,UAAWtB,EAAee,SAC1BC,EAAAA,IAACoB,EAAUA,YACTzE,cAAeA,EACf0E,WAAYzE,EACZc,WAAYA,WAKlB,IAAI"}