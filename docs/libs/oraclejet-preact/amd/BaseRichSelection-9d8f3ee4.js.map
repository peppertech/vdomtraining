{"version":3,"file":"BaseRichSelection-9d8f3ee4.js","sources":["../../src/PRIVATE_RichSelectionCommon/useRichSelectionGrid.ts","../../src/PRIVATE_RichSelectionCommon/RichSelectionField.tsx","../../src/PRIVATE_RichSelectionCommon/BaseRichSelection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Ref } from 'preact';\nimport { useContainerBreakpoints } from '#hooks/UNSAFE_useContainerBreakpoints';\nimport {\n  useRichSelectionContext,\n  type RichSelectionContextValue\n} from '#PRIVATE_RichSelectionCommon/RichSelectionContext';\n\nconst sizes = ['xl', 'lg', 'md', 'sm', 'xs'] as const;\n\nconst columnMatrix = {\n  xl: { xl: 6, md: 4, sm: 4 },\n  lg: { xl: 4, md: 3, sm: 3 },\n  md: { xl: 3, md: 2, sm: 2 },\n  sm: { xl: 2, md: 2, sm: 2 },\n  xs: { xl: 1, md: 1, sm: 1 }\n} as const;\n\nconst breakpointSizes = {\n  xs: '0px',\n  sm: '600px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1440px'\n} as const;\n\nconst breakpointColumns = (\n  breakpoints: Record<(typeof sizes)[number], boolean>,\n  layout: RichSelectionContextValue['layout']\n) => {\n  // incrementally go from largest to smallest breakpoint\n  for (const size of sizes) {\n    if (breakpoints[size]) {\n      return columnMatrix[size][layout];\n    }\n  }\n  // defaults to xs columns if no breakpoints are true\n  return columnMatrix['xs'][layout];\n};\n/**\n * Hook to be used with rich selection items that are in a grid layout within RichSelectionField\n * @returns An object containing a ref to be placed on the container and a string\n * with the calculated grid template columns to be placed on the Grid component\n */\nconst useRichSelectionGrid = () => {\n  const context = useRichSelectionContext()!;\n  const { breakpointMatches, ref } = useContainerBreakpoints(breakpointSizes);\n\n  return {\n    ref: ref as Ref<HTMLDivElement>,\n    gridTemplateColumns:\n      context !== null ? `repeat(${breakpointColumns(breakpointMatches, context.layout)}, 1fr)` : ''\n  };\n};\n\nexport { useRichSelectionGrid };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useImperativeHandle, useRef } from 'preact/compat';\n\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '#hooks/PRIVATE_useCollectionFocusRing';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  type UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { topUAContainerStyles } from '#PRIVATE_CheckboxRadioField/CheckboxRadioFieldStyles.css';\nimport { CheckboxRadioContext } from '#PRIVATE_CheckboxRadioField/CheckboxRadioContext';\nimport { useCheckboxRadioField } from '#PRIVATE_CheckboxRadioField/useCheckboxRadioField';\nimport { LabelValueLayout } from '#UNSAFE_LabelValueLayout';\nimport { layoutSpanStyles, type LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { Grid } from '#UNSAFE_Grid';\nimport { mergeRefs } from '#utils/PRIVATE_refUtils';\nimport { useRichSelectionGrid } from './useRichSelectionGrid';\nimport { View } from '#UNSAFE_View';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype AriaProps = Pick<AriaAttributesSignalExcluded, 'aria-describedby'>;\n\ntype Props = TestIdProps &\n  AriaProps & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * baseId, used to generate other element IDs.\n     */\n    baseId: string;\n    /**\n     * <RichSelectionItems />\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * Value of the option.\n     */\n    hasValue?: boolean;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the set is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the set is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the set requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the set.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field. Maps to \"top\" in forms using \"start\".\n     */\n    labelEdge?: 'none' | 'top' | 'inside';\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n    /**\n     * Specifies the parent field type.\n     */\n    parentComponentVariant: 'radioSet' | 'checkboxSet';\n    /**\n     * Specifies the ARIA role type.\n     */\n    role?: 'radiogroup' | 'group';\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\n/**\n * Internal component use by rich selection components to manage focus and layout labels and messages\n */\nexport const RichSelectionField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      children,\n      columnSpan = 1,\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      messages,\n      parentComponentVariant,\n      role,\n      testId,\n      userAssistanceDensity\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const testIdProps = useTestId(testId);\n    const UAtestId = `${testId}-inline-user-assistance`;\n    const UAtestIdTop = testId ? `${UAtestId}-top` : undefined;\n    const UAtestIdBottom = testId ? `${UAtestId}-bottom` : undefined;\n    const hasTopUserAssistance =\n      !isDisabled && !isReadonly && (!!assistiveText || (!!helpSourceLink && !!helpSourceText));\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled or readonly fields\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const {\n      groupProps,\n      labelProps,\n      topUserAssistanceProps,\n      bottomUserAssistanceProps,\n      readonlyId\n    } = useCheckboxRadioField({\n      ariaDescribedBy,\n      baseId,\n      isRequired,\n      isReadonly,\n      isDisabled,\n      label,\n      labelEdge,\n      messages,\n      hasValue,\n      hasTopUserAssistance,\n      hasBottomUserAssistance,\n      parentComponentVariant\n    });\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const readonlyLabel = translations.formControl_readOnly();\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    // the props from the hook are used for focus management on the radioset variant to allow for arrow navigation\n    // while checkboxset uses tabbing\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      groupRef,\n      parentComponentVariant === 'radioSet'\n        ? ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft']\n        : ['Tab']\n    );\n\n    const { gridTemplateColumns, ref: breakpointRef } = useRichSelectionGrid();\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div id={`${baseId}-top-ua-container`} class={topUAContainerStyles.start}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps} testId={UAtestIdTop}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <View padding={['2x', 0]} width=\"100%\">\n          <Grid gridTemplateColumns={gridTemplateColumns} gap=\"6x\" role=\"list\">\n            <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n              {children}\n            </CheckboxRadioContext.Provider>\n          </Grid>\n        </View>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestIdBottom}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n          <InlineUserAssistance\n            id={bottomUserAssistanceProps?.id}\n            userAssistanceDensity=\"efficient\"\n            testId={UAtestIdBottom}\n          />\n        )}\n      </>\n    );\n    // The top level element needs the column span class on it.\n    const classes = layoutSpanStyles.layoutSpanColumn[columnSpan];\n\n    return (\n      <div\n        ref={mergeRefs(groupRef, breakpointRef)}\n        class={classes}\n        role={role}\n        {...groupProps}\n        {...focusRingProps}\n        {...testIdProps}>\n        {labelEdge === 'none' ? (\n          content\n        ) : (\n          <LabelValueLayout\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge}>\n            {content}\n          </LabelValueLayout>\n        )}\n        {isReadonly && (\n          <HiddenAccessible id={readonlyId} isHidden={true}>\n            {readonlyLabel}\n          </HiddenAccessible>\n        )}\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useFormFieldContextProps } from '#hooks/UNSAFE_useFormFieldContextProps';\nimport { RichSelectionField } from './RichSelectionField';\nimport { RichSelectionContext, type RichSelectionContextValue } from './RichSelectionContext';\nimport { useMessageSeverity } from '#hooks/PRIVATE_useMessageSeverity';\n\ntype RichSelectionFieldProps = ComponentProps<typeof RichSelectionField>;\n\ntype Props = TestIdProps &\n  Pick<\n    RichSelectionFieldProps,\n    | 'aria-describedby'\n    | 'assistiveText'\n    | 'baseId'\n    | 'children'\n    | 'columnSpan'\n    | 'helpSourceLink'\n    | 'helpSourceText'\n    | 'isDisabled'\n    | 'isReadonly'\n    | 'isRequired'\n    | 'label'\n    | 'messages'\n    | 'userAssistanceDensity'\n  > & {\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'inside';\n    /**\n     * Specifies the layout of the cards and media\n     */\n    layout: RichSelectionContextValue['layout'];\n  } & (\n    | {\n        selection: 'single';\n        value?: string | number;\n      }\n    | {\n        selection: 'multiple';\n        value?: Set<string | number>;\n      }\n  );\n\n/**\n * Internal component used by Rich Selection components to provide context and wrap RichSelectionField\n */\nexport const BaseRichSelection = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      children,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired,\n      label,\n      labelEdge: propLabelEdge,\n      layout,\n      messages,\n      selection,\n      testId,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const hasValue = value != null && (selection === 'single' || value.size > 0);\n\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const formFieldContext = useFormFieldContextProps({\n      hasValue,\n      isDisabled,\n      isReadonly\n    });\n\n    // rich selection only need to be aware of error severity\n    const messageSeverity = useMessageSeverity(messages) === 'error' ? 'error' : undefined;\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <RichSelectionContext.Provider\n          value={{\n            selection,\n            layout,\n            messageSeverity\n          }}>\n          <RichSelectionField\n            aria-describedby={ariaDescribedBy}\n            assistiveText={assistiveText}\n            baseId={baseId}\n            columnSpan={columnSpan}\n            hasValue={hasValue}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isRequired={isRequired}\n            label={label}\n            // start is not supported by Rich Selection and will default to \"top\" if the form is using \"start\"\n            labelEdge={labelEdge === 'start' ? 'top' : labelEdge}\n            messages={messages}\n            parentComponentVariant={selection === 'single' ? 'radioSet' : 'checkboxSet'}\n            ref={ref}\n            role={selection === 'single' ? 'radiogroup' : 'group'}\n            testId={testId}\n            userAssistanceDensity={userAssistanceDensity}>\n            {children}\n          </RichSelectionField>\n        </RichSelectionContext.Provider>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["sizes","columnMatrix","xl","md","sm","lg","xs","breakpointSizes","breakpointColumns","breakpoints","layout","size","RichSelectionField","forwardRef","ariaDescribedBy","assistiveText","baseId","children","columnSpan","hasValue","helpSourceLink","helpSourceText","isDisabled","isReadonly","isRequired","label","labelEdge","messages","parentComponentVariant","role","testId","userAssistanceDensity","ref","testIdProps","useTestId","UAtestId","UAtestIdTop","undefined","UAtestIdBottom","hasTopUserAssistance","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","readonlyId","useCheckboxRadioField","readonlyLabel","useTranslationBundle","formControl_readOnly","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","gridTemplateColumns","breakpointRef","context","useRichSelectionContext","breakpointMatches","useContainerBreakpoints","useRichSelectionGrid","content","_jsxs","_Fragment","_jsx","id","class","topUAContainerStyles","start","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","jsx","View","padding","width","Grid","gap","CheckboxRadioContext","Provider","value","InlineUserAssistance","requiredAlignment","classes","layoutSpanStyles","layoutSpanColumn","mergeRefs","LabelValueLayout","Label","variant","HiddenAccessible","isHidden","BaseRichSelection","propIsDisabled","propIsReadonly","propLabelEdge","selection","propUserAssistanceDensity","isFormDisabled","isFormReadonly","formLabelEdge","formUserAssistanceDensity","useFormContext","formFieldContext","useFormFieldContextProps","messageSeverity","useMessageSeverity","FormFieldContext","RichSelectionContext"],"mappings":"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"}