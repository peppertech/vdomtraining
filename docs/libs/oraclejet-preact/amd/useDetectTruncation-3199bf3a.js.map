{"version":3,"file":"useDetectTruncation-3199bf3a.js","sources":["../../src/hooks/PRIVATE_useDetectTruncation/useDetectTruncation.tsx"],"sourcesContent":["import { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\nimport { useCallback, useRef, useState } from 'preact/hooks';\n\nconst useDetectTruncation = (isDisabled = false) => {\n  const rootRef = useRef<HTMLElement>(null);\n  const [isTextTruncated, setIsTextTruncated] = useState<boolean>(false);\n\n  const detectTruncation = useCallback(() => {\n    if (rootRef.current && !isDisabled) {\n      setIsTextTruncated(rootRef.current.scrollWidth > rootRef.current.offsetWidth);\n    }\n  }, [isDisabled]);\n  useResizeObserver(rootRef, detectTruncation, { isDisabled: isDisabled });\n\n  const detectTruncationProps = {\n    ref: rootRef\n  };\n\n  return { detectTruncationProps, isTextTruncated };\n};\n\nexport { useDetectTruncation };\n"],"names":["isDisabled","rootRef","useRef","isTextTruncated","setIsTextTruncated","useState","detectTruncation","useCallback","current","scrollWidth","offsetWidth","useResizeObserver","detectTruncationProps","ref"],"mappings":"qHAG4B,CAACA,GAAa,KACxC,MAAMC,EAAUC,SAAoB,OAC7BC,EAAiBC,GAAsBC,EAAQA,UAAU,GAE1DC,EAAmBC,EAAAA,aAAY,KAC/BN,EAAQO,UAAYR,GACtBI,EAAmBH,EAAQO,QAAQC,YAAcR,EAAQO,QAAQE,YAClE,GACA,CAACV,IACJW,EAAiBA,kBAACV,EAASK,EAAkB,CAAEN,WAAYA,IAM3D,MAAO,CAAEY,sBAJqB,CAC5BC,IAAKZ,GAGyBE,kBAAiB"}