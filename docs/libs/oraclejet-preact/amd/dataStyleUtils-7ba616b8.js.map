{"version":3,"file":"dataStyleUtils-7ba616b8.js","sources":["../../src/utils/PRIVATE_chartUtils/navUtils.ts","../../src/utils/PRIVATE_chartUtils/accUtils.ts","../../src/utils/PRIVATE_chartUtils/dataStyleUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ItemInfo, Info } from '../UNSAFE_visTypes/chart';\ntype isItemNavigableType = (seriesIndex: number, groupIndex: number) => boolean;\n\n/**\n * Returns the next navigable item in the same series.\n * @param seriesIndex\n * @param groupIndex\n * @param numOfGroups\n * @returns\n */\nexport function getNextItemInSeries(\n  info: ItemInfo,\n  viewportEndIndex: number,\n  isNavigable: isItemNavigableType\n): ItemInfo | undefined {\n  const { seriesIndex, groupIndex } = info;\n  const nextGroupIndex = groupIndex + 1;\n\n  if (nextGroupIndex > viewportEndIndex) {\n    return;\n  }\n\n  if (isNavigable(seriesIndex, nextGroupIndex)) {\n    return { seriesIndex, groupIndex: nextGroupIndex };\n  }\n\n  return getNextItemInSeries(\n    {\n      seriesIndex,\n      groupIndex: nextGroupIndex\n    },\n    viewportEndIndex,\n    isNavigable\n  );\n}\n\n/**\n * Returns the previous navigable item in the same series.\n * @param seriesIndex\n * @param itemIndex\n * @returns\n */\nexport function getPrevItemInSeries(\n  info: ItemInfo,\n  viewportStartIndex: number,\n  isNavigable: isItemNavigableType\n): ItemInfo | undefined {\n  const { seriesIndex, groupIndex } = info;\n  const prevGroupIndex = groupIndex - 1;\n\n  if (prevGroupIndex < viewportStartIndex) {\n    return;\n  }\n\n  if (isNavigable(seriesIndex, prevGroupIndex)) {\n    return { seriesIndex, groupIndex: prevGroupIndex };\n  }\n  if (prevGroupIndex === 0) {\n    return undefined;\n  }\n  return getPrevItemInSeries(\n    { seriesIndex, groupIndex: prevGroupIndex },\n    viewportStartIndex,\n    isNavigable\n  );\n}\n\n/**\n * Returns the previous navigable item in the same group.\n * @param seriesIndex\n * @param groupIndex\n * @param isNavigable\n */\nexport function getPrevItemInGroup(\n  info: ItemInfo,\n  isNavigable: isItemNavigableType\n): ItemInfo | undefined {\n  const { seriesIndex, groupIndex } = info;\n  const prevSeriesIndex = seriesIndex - 1;\n  if (prevSeriesIndex < 0) {\n    return;\n  }\n\n  if (isNavigable(prevSeriesIndex, groupIndex)) {\n    return { seriesIndex: prevSeriesIndex, groupIndex };\n  }\n\n  return getPrevItemInGroup(\n    {\n      seriesIndex: prevSeriesIndex,\n      groupIndex\n    },\n    isNavigable\n  );\n}\n\n/**\n * Returns the next navigable item in the same group.\n * @param seriesIndex\n * @param groupIndex\n * @param numOfSeries\n * @param numOfGroups\n */\nexport function getNextItemInGroup(\n  info: ItemInfo,\n  numOfSeries: number,\n  isNavigable: isItemNavigableType\n): ItemInfo | undefined {\n  const { seriesIndex, groupIndex } = info;\n  const nextSeriesIndex = seriesIndex + 1;\n\n  if (nextSeriesIndex >= numOfSeries) {\n    return;\n  }\n\n  if (isNavigable(nextSeriesIndex, groupIndex)) {\n    return { seriesIndex: nextSeriesIndex, groupIndex };\n  }\n\n  return getNextItemInGroup(\n    {\n      seriesIndex: nextSeriesIndex,\n      groupIndex\n    },\n    numOfSeries,\n    isNavigable\n  );\n}\n\n/**\n * Returns the next item in the group with higher value than the current item.\n * @param info The ItemInfo of current item.\n * @param numSeries The number of series in the group.\n * @param getDataItem The function that returns the chart data item.\n * @returns\n */\nexport function getNextHigherItemInGroup<D extends { x?: number; y?: number; value?: number }>(\n  info: ItemInfo,\n  numSeries: number,\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  isItemNavigable: isItemNavigableType\n) {\n  const getValue = (_item: any) => {\n    return 'value' in _item && _item.value !== undefined\n      ? _item.value\n      : 'y' in _item && _item.y !== undefined\n      ? _item.y\n      : undefined;\n  };\n\n  const { groupIndex, seriesIndex } = info;\n  const item = getDataItem(seriesIndex, groupIndex);\n  const itemValue = getValue(item);\n  if (!item || itemValue === undefined) {\n    return info;\n  }\n\n  let minValue = Number.MAX_VALUE;\n  let minIndex = seriesIndex;\n\n  for (let i = 0; i < numSeries; i++) {\n    const currentItem = getDataItem(i, groupIndex);\n    const currentItemValue = currentItem !== undefined ? getValue(currentItem) : undefined;\n    if (\n      currentItemValue === undefined ||\n      currentItemValue < itemValue ||\n      !isItemNavigable(i, groupIndex) ||\n      seriesIndex === i\n    ) {\n      continue;\n    }\n    if (currentItemValue < minValue) {\n      minValue = currentItemValue;\n      minIndex = i;\n    }\n  }\n  return { seriesIndex: minIndex, groupIndex };\n}\n\n/**\n * Returns the item info of the item in the group with lower value than the current item.\n * @param info The ItemInfo of the current item.\n * @param numSeries The number of series in the group.\n * @param getDataItem The function that returns the chart data item.\n * @returns\n */\nexport function getNextLowerItemInGroup<D extends { x?: number; y?: number; value?: number }>(\n  info: ItemInfo,\n  numSeries: number,\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  isItemNavigable: isItemNavigableType\n) {\n  const getValue = (_item: any) => {\n    return 'value' in _item && _item.value !== undefined\n      ? _item.value\n      : 'y' in _item && _item.y !== undefined\n      ? _item.y\n      : undefined;\n  };\n\n  const { groupIndex, seriesIndex } = info;\n  const item = getDataItem(seriesIndex, groupIndex);\n  const itemValue = getValue(item);\n  if (!item || itemValue === undefined) {\n    return info;\n  }\n\n  let maxValue = Number.MIN_VALUE;\n  let maxIndex = seriesIndex;\n\n  for (let i = 0; i < numSeries; i++) {\n    const currentItem = getDataItem(i, groupIndex);\n    const currentItemValue = currentItem !== undefined ? getValue(currentItem) : undefined;\n    if (\n      currentItemValue === undefined ||\n      currentItemValue > itemValue ||\n      !isItemNavigable(i, groupIndex) ||\n      seriesIndex === i\n    ) {\n      continue;\n    }\n    if (currentItemValue > maxValue) {\n      maxValue = currentItemValue;\n      maxIndex = i;\n    }\n  }\n  return { seriesIndex: maxIndex, groupIndex };\n}\n\nexport function getLineAreaChartNavUtil<D extends { x?: number; y?: number; value?: number }>(\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  numSeries: number,\n  viewportStartIndex: number,\n  viewportEndIndex: number,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const isItemNavigable = (seriesIndex: number, groupIndex: number) => {\n    const barItem = getDataItem(seriesIndex, groupIndex);\n    return Boolean(barItem);\n  };\n\n  const getNextChartItem = (\n    itemInfo: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ): Info => {\n    let newInfo: Info | undefined;\n\n    const info = {\n      groupIndex: itemInfo.groupIndex!,\n      seriesIndex: itemInfo.seriesIndex!\n    };\n\n    if (info.groupIndex < viewportStartIndex) {\n      info.groupIndex = viewportStartIndex;\n      return info;\n    } else if (info.groupIndex > viewportEndIndex) {\n      info.groupIndex = viewportEndIndex;\n      return info;\n    }\n\n    if (arrow === 'ArrowLeft') {\n      if (!isHoriz) {\n        newInfo = isRtl\n          ? getNextItemInSeries(info, viewportEndIndex, isItemNavigable)\n          : getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else {\n        newInfo = isRtl\n          ? getNextHigherItemInGroup(info, numSeries, getDataItem, isItemNavigable)\n          : getNextLowerItemInGroup(info, numSeries, getDataItem, isItemNavigable);\n      }\n    } else if (arrow === 'ArrowRight') {\n      if (!isHoriz) {\n        newInfo = isRtl\n          ? getPrevItemInSeries(info, viewportStartIndex, isItemNavigable)\n          : getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else {\n        newInfo = !isRtl\n          ? getNextHigherItemInGroup(info, numSeries, getDataItem, isItemNavigable)\n          : getNextLowerItemInGroup(info, numSeries, getDataItem, isItemNavigable);\n      }\n    } else if (arrow === 'ArrowDown') {\n      if (isHoriz) {\n        newInfo = getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else {\n        if (isStacked) {\n          newInfo = getPrevItemInGroup(info, isItemNavigable);\n        } else {\n          newInfo = getNextLowerItemInGroup(info, numSeries, getDataItem, isItemNavigable);\n        }\n      }\n    } else {\n      if (isHoriz) {\n        newInfo = getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else {\n        if (isStacked) {\n          newInfo = getNextItemInGroup(info, numSeries, isItemNavigable);\n        } else {\n          newInfo = getNextHigherItemInGroup(info, numSeries, getDataItem, isItemNavigable);\n        }\n      }\n    }\n    return newInfo || info;\n  };\n\n  return getNextChartItem;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { generateAriaLabel } from '#utils/UNSAFE_visUtils/accUtils';\nimport { BundleType } from '../../resources/nls/bundle';\n\n/**\n * Returns the aria label for the chart item\n * @param translations The translations bundle.\n * @param series The series of the item.\n * @param group The group of the item.\n * @param value The value of the item.\n * @param isSelected Whether the item is selected.\n * @param isDrillable Whether the item is drillable.\n * @param accessibleLabel The accessible label of the item.\n * @returns\n */\nexport function getItemAriaLabel(\n  translations: BundleType,\n  series: string,\n  group: string,\n  isSelectionEnabled: boolean,\n  isSelected: boolean,\n  isDrillable: boolean,\n  accessibleLabel?: string,\n  value?: number,\n  x?: number | string,\n  y?: number\n) {\n  const seriesLabel = translations.chart_labelSeries();\n  const groupLabel = translations.chart_labelGroup();\n\n  let valuesSection = '';\n  if (value) {\n    const valueLabel = translations.chart_labelValue();\n    valuesSection = `${valueLabel}: ${value}`;\n  } else if (x && y) {\n    const xLabel = translations.chart_labelX();\n    const yLabel = translations.chart_labelY();\n    valuesSection = `${xLabel}: ${x}, ${yLabel}: ${y}`;\n  }\n\n  const label =\n    accessibleLabel || `${seriesLabel}: ${series}, ${groupLabel}: ${group}, ${valuesSection}`;\n\n  return generateAriaLabel(translations, label, {\n    isSelected: !isSelectionEnabled ? undefined : isSelected,\n    isDrillable\n  });\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Property } from 'csstype';\nimport { getColorRamp } from '../../utils/UNSAFE_visUtils';\nimport { getMarkers } from './utils';\nimport { MarkerShapes } from '#utils/UNSAFE_visTypes/common';\n\nexport function getItemColor(\n  seriesIndex: number,\n  groupIndex: number,\n  series: { color?: Property.Color; lineColor?: Property.Color; areaColor?: Property.Color }[],\n  getDataItem: (\n    seriesIndex: number,\n    groupIndex: number\n  ) => { color?: Property.Color; markerColor?: Property.Color } | undefined\n) {\n  const item = getDataItem(seriesIndex, groupIndex);\n  if (item?.color) {\n    return item.color;\n  }\n\n  if (item?.markerColor) {\n    return item.markerColor;\n  }\n  const itemSeries = series[seriesIndex];\n\n  const colors = getColorRamp();\n  return (\n    itemSeries.color ||\n    itemSeries.lineColor ||\n    itemSeries.areaColor ||\n    colors[seriesIndex % colors.length]\n  );\n}\n\nexport function getMarkerType(\n  seriesIndex: number,\n  groupIndex: number,\n  getDataItem: (\n    seriesIndex: number,\n    groupIndex: number\n  ) => { markerType?: MarkerShapes } | undefined\n) {\n  const item = getDataItem(seriesIndex, groupIndex);\n  if (item?.markerType) {\n    return item.markerType;\n  }\n  const shapes = getMarkers();\n  return shapes[seriesIndex % shapes.length];\n}\n"],"names":["getNextItemInSeries","info","viewportEndIndex","isNavigable","seriesIndex","groupIndex","nextGroupIndex","getPrevItemInSeries","viewportStartIndex","prevGroupIndex","getPrevItemInGroup","prevSeriesIndex","getNextItemInGroup","numOfSeries","nextSeriesIndex","getNextHigherItemInGroup","numSeries","getDataItem","isItemNavigable","getValue","_item","undefined","value","y","item","itemValue","minValue","Number","MAX_VALUE","minIndex","i","currentItem","currentItemValue","getNextLowerItemInGroup","maxValue","MIN_VALUE","maxIndex","translations","series","group","isSelectionEnabled","isSelected","isDrillable","accessibleLabel","x","seriesLabel","chart_labelSeries","groupLabel","chart_labelGroup","valuesSection","chart_labelValue","chart_labelX","chart_labelY","label","generateAriaLabel","color","markerColor","itemSeries","colors","getColorRamp","lineColor","areaColor","length","isStacked","isRtl","isHoriz","barItem","Boolean","itemInfo","arrow","newInfo","markerType","shapes","getMarkers"],"mappings":"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"}