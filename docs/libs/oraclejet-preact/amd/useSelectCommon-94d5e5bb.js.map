{"version":3,"file":"useSelectCommon-94d5e5bb.js","sources":["../../src/PRIVATE_SelectCommon/itemTextUtils.ts","../../src/PRIVATE_SelectCommon/DefaultList.tsx","../../src/PRIVATE_SelectCommon/eventUtils.ts","../../src/PRIVATE_SelectCommon/Dropdown.tsx","../../src/PRIVATE_SelectCommon/DropdownArrow.tsx","../../src/PRIVATE_SelectCommon/MobileDropdown.tsx","../../src/PRIVATE_SelectCommon/SelectMobileFieldInput.tsx","../../src/PRIVATE_SelectCommon/DropdownList.tsx","../../src/PRIVATE_SelectCommon/DropdownUserAssistance.tsx","../../src/PRIVATE_SelectCommon/EmptyResults.tsx","../../src/PRIVATE_SelectCommon/LinkItem.tsx","../../src/PRIVATE_SelectCommon/SelectMobileDropdown.tsx","../../src/PRIVATE_SelectCommon/selectUtils.ts","../../src/PRIVATE_SelectCommon/useCollectionRenderer.ts","../../src/PRIVATE_SelectCommon/useSelectCommon.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { error } from '../utils/UNSAFE_logger';\nimport { ItemTextFunctionType, ItemTextType } from '../utils/UNSAFE_selectUtils';\n\nexport function renderItemText<K, D>(item: Item<K, D>, itemText: ItemTextType<K, D>) {\n  // if item-text is a string and the data has the specified field, return it;\n  // otherwise log an error\n  if (typeof itemText === 'string') {\n    if ((item.data as any)?.hasOwnProperty(itemText)) {\n      const retData = item.data[itemText];\n      return String(retData);\n    }\n    error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);\n    // return undefined if the field doesn't exist\n    return undefined;\n  }\n  // if item-text is a function, call it to create a display label\n  return (itemText as ItemTextFunctionType<K, D>)(item);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { List, SkeletonContainer } from '#PRIVATE_List';\nimport type {\n  CurrentItemDetail,\n  DataState,\n  ListItemRendererContext,\n  Metadata\n} from '#UNSAFE_Collection';\nimport { Flex } from '#UNSAFE_Flex';\nimport { HighlightText } from '#UNSAFE_HighlightText';\nimport { ListItemText } from '#UNSAFE_ListItemLayout';\nimport { Skeleton } from '#UNSAFE_Skeleton';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { Keys } from '#utils/UNSAFE_keys';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { ComponentChildren, ComponentProps } from 'preact';\nimport { useCallback, useMemo } from 'preact/hooks';\nimport { renderItemText } from './itemTextUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype ListProps<K extends string | number, D> = ComponentProps<typeof List<K, D>>;\ntype PickedPropsFromList = Pick<\n  ComponentProps<typeof List>,\n  'aria-label' | 'currentItemVariant' | 'selectionMode'\n>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemRendererContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype ItemRendererSelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  metadata: ItemRendererMetadata<K>;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  onSelectionChange: (detail: ItemRendererSelectionDetail<K>) => void;\n};\n\ntype DefaultListCurrentKeyDetail<K> = { value: K };\ntype DefaultListItemActionDetail<K, D> = { context: Item<K, D> };\ntype DefaultListSelectionDetail<K> = { value: Set<K> };\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromList & {\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  // props from List that we constrain or unconstrain\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  onCurrentKeyChange: (detail: DefaultListCurrentKeyDetail<K>) => void;\n  onItemAction?: (detail: DefaultListItemActionDetail<K, D>) => void;\n  onLoadRange?: ComponentProps<typeof List>['onLoadRange'];\n  onSelectionChange?: (detail: DefaultListSelectionDetail<K>) => void;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n};\n\nconst noOp = () => {};\n\nexport function DefaultList<K extends string | number, D extends Record<string, any>>({\n  'aria-label': ariaLabel,\n  currentItemVariant,\n  currentKey,\n  data,\n  itemRenderer,\n  itemText,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange = noOp,\n  onSelectionChange,\n  searchText,\n  selectedKeys,\n  selectionMode\n}: Props<K, D>) {\n  const listItemRenderer = useCallback(\n    (listItemContext: ListItemRendererContext<K, D>) => {\n      // specify the listItemContext props that we want to expose individually instead of\n      // spreading the whole object so that we don't automatically include any new props that\n      // may be added to it\n      const itemRendererProps: ItemRendererProps<K, D> = {\n        data: listItemContext.data,\n        index: listItemContext.index,\n        metadata: listItemContext.metadata,\n        selector: listItemContext.selector,\n        searchText,\n        selectedKeys,\n        onSelectionChange: ({ value }) => {\n          onSelectionChange?.({ value });\n        }\n      };\n      const itemContext = {\n        data: listItemContext.data,\n        key: listItemContext.metadata.key,\n        metadata: listItemContext.metadata\n      };\n      return itemRenderer ? (\n        itemRenderer(itemRendererProps)\n      ) : (\n        <Flex align=\"center\">\n          {listItemContext.selector && (\n            <div class={dropdownStyles.selectorWrapper}>{listItemContext.selector()}</div>\n          )}\n          <div\n            class={\n              selectionMode === 'single'\n                ? dropdownStyles.singleSelectItem\n                : dropdownStyles.multiSelectItem\n            }>\n            <ListItemText variant=\"primary\">\n              <HighlightText matchText={searchText}>\n                {renderItemText(itemContext, itemText) as string}\n              </HighlightText>\n            </ListItemText>\n          </div>\n        </Flex>\n      );\n    },\n    [itemRenderer, itemText, onSelectionChange, searchText, selectedKeys, selectionMode]\n  );\n\n  const keys = useMemo(() => {\n    return { all: false, keys: selectedKeys ?? new Set<K>() };\n  }, [selectedKeys]) as Keys<K>;\n\n  const currentItemOverride = useMemo(\n    () => (currentKey !== undefined ? { rowKey: currentKey } : undefined),\n    [currentKey]\n  );\n  const handleOnPersistCurrentItem = useCallback(\n    (detail: CurrentItemDetail<K>) => {\n      const key = detail.value?.rowKey;\n      key !== undefined && onCurrentKeyChange?.({ value: key });\n    },\n    [onCurrentKeyChange]\n  );\n  const handleItemAction = useCallback<NonNullable<ListProps<K, D>['onItemAction']>>(\n    ({ context: { data, metadata } }) => {\n      onItemAction?.({ context: { data, key: metadata.key, metadata } });\n    },\n    [onItemAction]\n  );\n  const handleSelectionChange = useCallback<NonNullable<ListProps<K, D>['onSelectionChange']>>(\n    ({ value }) => {\n      onSelectionChange?.({ value: new Set(value.keys?.values()) });\n    },\n    [onSelectionChange]\n  );\n\n  return (\n    <List<K, D>\n      aria-label={ariaLabel}\n      allowTabbableMode={false}\n      currentItemVariant={currentItemVariant}\n      currentItemOverride={currentItemOverride}\n      data={data ?? null}\n      loadingIndicator={loadingIndicator}\n      onPersistCurrentItem={handleOnPersistCurrentItem}\n      onItemAction={handleItemAction}\n      onLoadRange={onLoadRange}\n      onSelectionChange={handleSelectionChange}\n      role=\"listbox\"\n      selectedKeys={keys}\n      selectionMode={selectionMode}>\n      {(context: ListItemRendererContext<K, D>) => listItemRenderer(context)}\n    </List>\n  );\n}\n\n/**\n * Custom 3 Skeleton loader for select multiple\n * TODO: to remove this once  is solved\n */\nconst loadingIndicator = (\n  <SkeletonContainer minimumCount={3}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n","export const isSimpleClick = (event: MouseEvent) => {\n  return event.button === 0 && !event.ctrlKey;\n};\n\nexport const preventDefault = (event: Event) => {\n  event.preventDefault();\n};\n\nexport const preventDefaultForCurrentTarget = (event: MouseEvent) => {\n  if (event.currentTarget === event.target) {\n    event.preventDefault();\n  }\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useState } from 'preact/hooks';\nimport { Floating, PositionData } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n//Once Dropdown is consumed this will be removed\nimport { useOutsideMousedown } from '../hooks/PRIVATE_useOutsideMousedown';\n\ntype FloatingProps = ComponentProps<typeof Floating>;\n\ntype Props = {\n  anchorRef: MutableRef<HTMLElement | null>;\n  children?: ComponentChildren;\n  dropdownRef: MutableRef<HTMLElement | null>;\n  id?: string;\n  isOpen?: boolean;\n  onAutoDismiss?: (event?: Event) => void;\n  onPosition?: FloatingProps['onPosition'];\n};\n\nconst DEFAULT_PLACEMENT = 'bottom-start';\n\n//TODO: Start consuming PRIVATE_Dropdown. JET-62565\nexport function Dropdown({\n  anchorRef,\n  children,\n  dropdownRef,\n  id,\n  isOpen,\n  onAutoDismiss,\n  onPosition\n}: Props) {\n  const [placement, setPlacement] = useState<FloatingProps['placement']>(DEFAULT_PLACEMENT);\n\n  const [prevIsOpen, setPrevIsOpen] = useState(isOpen);\n\n  if (prevIsOpen !== isOpen) {\n    // reset the placement to the default when the dropdown closes, not opens, so that it doesn't\n    // initially open in the previous position and then move to the default position on the\n    // rerender after the state is updated\n    if (!isOpen) {\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  }\n\n  const handlePosition = useCallback(\n    (positionData: PositionData) => {\n      // update the placement so that the dropdown stays where it is until there is a collision,\n      // i.e. it no longer fits, instead of letting it try to move back to the default position\n      // on every render\n      setPlacement(positionData.placement);\n\n      // call the callback that was passed in through props\n      onPosition?.(positionData);\n    },\n    [onPosition, setPlacement]\n  );\n\n  const handleAutoDismiss = useCallback(\n    (event: Event) => {\n      onAutoDismiss?.(event);\n    },\n    [onAutoDismiss]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented || isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          handleAutoDismiss(event);\n          break;\n      }\n    },\n    [handleAutoDismiss]\n  );\n\n  // use the mousedown event to be consistent with legacy JET and so that we're hiding the dropdown\n  // on the same event where focus will transfer\n  useOutsideMousedown({\n    isDisabled: !isOpen,\n    ref: [anchorRef, dropdownRef],\n    handler: handleAutoDismiss\n  });\n\n  // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset\n  const offsetValue = { mainAxis: 4, crossAxis: 0 };\n\n  const inlineStyle = isOpen\n    ? {\n        minWidth: `${anchorRef.current?.offsetWidth}px`\n      }\n    : {};\n\n  if (prevIsOpen !== isOpen) {\n    setPrevIsOpen(isOpen);\n  }\n\n  return !isOpen ? null : (\n    <Layer logicalParentRef={anchorRef}>\n      <Floating\n        anchorRef={anchorRef}\n        sizeOptions={{\n          isMaxHeightAdjusted: true,\n          maxHeightCeiling: 400\n        }}\n        ref={dropdownRef}\n        placement={placement}\n        offsetValue={offsetValue}\n        onPosition={handlePosition}>\n        <div\n          class={dropdownStyles.base}\n          id={id}\n          style={inlineStyle}\n          onKeyDown={handleKeyDown}\n          onMouseDown={preventDefaultForCurrentTarget}>\n          {children}\n        </div>\n      </Floating>\n    </Layer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { DropdownArrowIcon } from '../PRIVATE_ThemedIcons/DropdownArrowIcon';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { ButtonLabelLayoutRedwoodTheme } from '#UNSAFE_ButtonLabelLayout/themes/redwood/ButtonLabelLayoutTheme';\nimport type { ButtonLabelLayoutVariantOptions } from '#UNSAFE_ButtonLabelLayout/themes/ButtonLabelLayoutStyles.css';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { BaseButtonRedwoodTheme } from '#UNSAFE_BaseButton/themes/redwood/BaseButtonTheme';\n\ntype Props = TestIdProps & {\n  isDisabled?: boolean;\n  onClick?: () => void;\n};\n\nconst noop = () => {};\n\nexport function DropdownArrow({ isDisabled = false, onClick, testId }: Props) {\n  const { classes } = useComponentTheme<ButtonLabelLayoutVariantOptions>(\n    ButtonLabelLayoutRedwoodTheme,\n    { size: 'sm' }\n  );\n  const { baseTheme } = useComponentTheme(BaseButtonRedwoodTheme);\n\n  const preventDefault = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const { pressProps } = usePress(onClick ?? noop, { isDisabled });\n\n  // TODO: JET-67410 replace this with a icon button\n  const styleClasses = classNames([\n    classes,\n    baseTheme,\n    dropdownStyles.arrow.base,\n    isDisabled ? dropdownStyles.arrow.disabled : dropdownStyles.arrow.enabled\n  ]);\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <span\n      aria-hidden=\"true\"\n      class={styleClasses}\n      tabIndex={-1}\n      onMouseDown={preventDefault}\n      {...testIdProps}\n      {...pressProps}>\n      <DropdownArrowIcon />\n    </span>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Layer } from '../UNSAFE_Layer';\nimport { WindowOverlay } from '../UNSAFE_WindowOverlay';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { mobileDropdownStyles } from './themes/mobileDropdownStyles.css';\n\ntype Props = {\n  /**\n   * Id of the label to associate with the dropdown (e.g. the label of the filter field).\n   */\n  'aria-labelledby'?: HTMLAttributesSignalExcluded['aria-labelledby'];\n\n  /**\n   * The dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The id for the top level element\n   */\n  id?: string;\n\n  /**\n   * Specifies whether the dropdown is being shown\n   */\n  isOpen?: boolean;\n};\n\nexport function MobileDropdown({ 'aria-labelledby': ariaLabelledBy, children, id, isOpen }: Props) {\n  return !isOpen ? null : (\n    <Layer>\n      <WindowOverlay>\n        <div\n          id={id}\n          class={mobileDropdownStyles.base}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby={ariaLabelledBy}>\n          <Flex width=\"100%\" height=\"100%\" maxHeight=\"100%\" direction=\"column\">\n            {children}\n          </Flex>\n        </div>\n      </WindowOverlay>\n    </Layer>\n  );\n}\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '../utils/UNSAFE_attributeUtils';\nimport { TextProps, textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldInputVariantOptions } from '../UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { selectMobileFieldInputStyles } from './themes/SelectMobileFieldInputStyles.css';\nimport { isInputPlaceholderShown } from '../UNSAFE_TextField/TextFieldUtils';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Text } from '../UNSAFE_Text';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { TextFieldInputRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ntype EventProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onBlur' | 'onFocus'>;\n\ntype Props = AriaProps &\n  EventProps &\n  TextProps & {\n    displayValue?: string;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    isRequired?: boolean;\n    placeholder?: string;\n    variant?: 'default' | 'embedded';\n  };\n\nconst interpolations = [...Object.values(textInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * This component is used for rendering the main field in mobile phones. This is a bit different from the\n * normal main field (TextFieldInput) that we use for desktop & tablet devices in the way that\n * a user will not be able to edit the value of this field. But, one can still have other functionalities\n * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.\n *\n * This also differs from ReadonlyTextFieldInput in the following ways:\n * 1. This will be rendered as div as well, but has a role of combobox set on it\n * 2. This will not be read as readonly input by the screen readers\n * 3. This has the stylings much similar to the TextFieldInput component\n * 4. This supports the use of placeholder and shows it when there is no value present\n * 5. This supports having the variant property and styles accordingly\n *\n * As such, this is very similar to the TextFieldInput except that this does not allow user input.\n * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the\n * behavior we need, it will make the field as readonly and screen readers read the same about this\n * field. This will be an incorrect representation contextually as one can still edit the value by opening\n * the dropdown and changing the selection.\n */\nexport const SelectMobileFieldInput = forwardRef(\n  (\n    {\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': ariaExpanded,\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      displayValue,\n      hasEmptyLabel,\n      hasInsideLabel = false,\n      isRequired,\n      onBlur,\n      onFocus,\n      placeholder,\n      textAlign,\n      variant = 'default'\n    }: Props,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    // consume required contexts\n    const { isDisabled, isFocused, hasValue = false } = useFormFieldContext();\n    const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n    // setup properties\n    const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n      ? placeholder\n      : undefined;\n\n    // Add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n    // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n    // kinds of labels, this helps to ensure we don't override a meaningful label.\n    const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n    const mergedAriaLabelledBy = hasEmptyLabel\n      ? merge([ariaLabelledBy, UNSAFE_ariaLabelledBy])\n      : ariaLabelledBy;\n\n    // setup style classes\n    const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n    const { classes: themeClasses } = useComponentTheme<TextFieldInputVariantOptions>(\n      TextFieldInputRedwoodTheme,\n      {\n        type: 'notPassword',\n        styleVariant: variant,\n        textarea: 'notTextArea',\n        input: 'isInput',\n        prefix: 'noPrefix',\n        suffix: 'noSuffix',\n        startContent: 'noStartContent',\n        endContent: 'hasEndContent',\n        insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n        value: hasValue ? 'hasValue' : 'noValue',\n        focused: isFocused ? 'isFocused' : 'notFocused',\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n      }\n    );\n    const rootDivStyleClasses = classNames([\n      selectMobileFieldInputStyles.base,\n      styleInterpolationClasses,\n      themeClasses\n    ]);\n\n    return (\n      <div\n        aria-autocomplete=\"list\"\n        aria-controls={ariaControls}\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-invalid={ariaInvalid}\n        aria-label={ariaLabel}\n        aria-labelledby={mergedAriaLabelledBy}\n        aria-required={isRequired ? 'true' : undefined}\n        class={rootDivStyleClasses}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={ref}\n        role=\"combobox\"\n        {...(isTabbable && tabbableModeProps)}>\n        <div class={selectMobileFieldInputStyles.content}>\n          <Text variant={displayValue ? 'inherit' : 'secondary'}>\n            {displayValue || myPlaceholder}\n          </Text>\n        </div>\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { CollectionInteractionContext } from '../hooks/UNSAFE_useCollectionInteractionContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype Props = {\n  children?: ComponentChildren;\n  hasTopGap?: boolean;\n  hasBottomGap?: boolean;\n  isLoading?: boolean;\n};\n\nexport function DropdownList({\n  children,\n  hasTopGap = true,\n  hasBottomGap = true,\n  isLoading = false\n}: Props) {\n  const styleClasses = classNames([\n    dropdownStyles.list.base,\n    hasTopGap && dropdownStyles.list.topGap,\n    hasBottomGap && dropdownStyles.list.bottomGap,\n    isLoading && dropdownStyles.list.loading\n  ]);\n  return (\n    <CollectionInteractionContext.Provider value={'embedded'}>\n      <div class={styleClasses} onMouseDown={preventDefaultForCurrentTarget}>\n        {children}\n      </div>\n    </CollectionInteractionContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype InlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'fieldLabel'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'id'\n  | 'userAssistanceDensity'\n>;\n\nexport function DropdownUserAssistance(props: InlineUserAssistanceProps) {\n  // Prevent the focus from transferring when the user clicks on an empty/non-clickable area\n  // of the user assistance\n  const handleMouseDown = useCallback((event: MouseEvent) => {\n    // Don't call preventDefault when the user clicks on the help source link, so that the\n    // focus is allowed to transfer in that case.\n    if ((event.target as Element)?.tagName !== 'A') {\n      event.preventDefault();\n    }\n  }, []);\n\n  return (\n    <FormFieldContext.Provider value={{ isFocused: true }}>\n      <div class={dropdownStyles.userAssistance} onMouseDown={handleMouseDown}>\n        <InlineUserAssistance {...props} />\n      </div>\n    </FormFieldContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\nexport function EmptyResults() {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  // call preventDefault for mousedown on this div so that focus does not transfer from\n  // the input\n  return (\n    <div class={dropdownStyles.results.extraItem} onMouseDown={preventDefaultForCurrentTarget}>\n      {translations.select_noMatchesFound()}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { Link } from '#UNSAFE_Link';\nimport { useFocusWithin } from '#hooks/UNSAFE_useFocusWithin';\nimport { useHover } from '#hooks/UNSAFE_useHover';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype Props = {\n  /**\n   * Child content of the item.\n   */\n  children: string;\n  /**\n   * Specifies whether to highlight the item.\n   */\n  isHighlighted?: boolean;\n  /**\n   * Callback invoked when the user triggers the link, for example by clicking or pressing Enter.\n   */\n  onAction?: () => void;\n};\n\n/**\n * This component renders a link that looks like a list item in a Select* component dropdown.\n * It fires an action when the user triggers it, and is intended to be used for launching\n * external application UI from within the dropdown, for example to provide advanced search or\n * add to list functionality.\n * The LinkItem would typically be shown in a fixed position above or below the list itself.\n */\nconst LinkItem = ({ children, isHighlighted, onAction }: Props) => {\n  const { isHover, hoverProps } = useHover();\n  const { isFocused, focusProps } = useFocusWithin();\n\n  const handleClick = useCallback(\n    (e: Event) => {\n      // prevent the link from actually navigating by preventing default and returning false\n      e.preventDefault();\n      onAction?.();\n      return false;\n    },\n    [onAction]\n  );\n\n  const rootClasses = classNames([isFocused ? dropdownStyles.results.linkItemFocus : undefined]);\n\n  const linkClasses = classNames([\n    dropdownStyles.results.extraItem,\n    isHover || isFocused || isHighlighted ? dropdownStyles.results.linkItemHighlight : undefined\n  ]);\n\n  return (\n    <div class={rootClasses} {...focusProps}>\n      <Link href=\"#\" onClick={handleClick}>\n        <div class={linkClasses} {...hoverProps}>\n          {children}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport { LinkItem };\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { Separator } from '../UNSAFE_Separator';\nimport { MobileDropdown } from './MobileDropdown';\nimport { selectMobileDropdownStyles } from './themes/selectMobileDropdownStyles.css';\n\ntype MobileDropdownProps = ComponentProps<typeof MobileDropdown>;\ntype PassThroughMobileDropdownProps = Pick<MobileDropdownProps, 'id' | 'isOpen'>;\n\ntype Props = PassThroughMobileDropdownProps & {\n  /**\n   * The main dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The components to be placed in the end of the dropdown\n   */\n  footer?: ComponentChildren;\n\n  /**\n   * The components to be placed in the beginning of the dropdown\n   */\n  header?: ComponentChildren;\n\n  /**\n   * Specifies whether to have a separator between header and content\n   */\n  hasHeaderSeparator?: boolean;\n\n  /**\n   * Id of the label for the filter field.\n   */\n  labelId?: string;\n};\n\nexport function SelectMobileDropdown({\n  children,\n  footer,\n  hasHeaderSeparator = true,\n  header,\n  id,\n  isOpen,\n  labelId\n}: Props) {\n  return (\n    <MobileDropdown id={id} isOpen={isOpen} aria-labelledby={labelId}>\n      {header}\n      {hasHeaderSeparator && <Separator />}\n      {/* TODO: Add overflow support to View and use it here */}\n      {/*  */}\n      <div class={selectMobileDropdownStyles.content}>{children}</div>\n      <Separator />\n      {footer}\n    </MobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DataState } from '#UNSAFE_Collection';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nexport function isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\n/**\n * Helper function to determine whether the current device is a phone\n * @returns true if running on a phone, false otherwise\n */\nexport function isPhone() {\n  return getClientHints().deviceType === 'phone';\n}\n\n/**\n * Helper function to determine whether the current device is a tablet\n * @returns true if running on a tablet, false otherwise\n */\nexport function isTablet() {\n  return getClientHints().deviceType === 'tablet';\n}\n\nexport function isBeforeDataFetch<K, D>(data: DataState<K, D>) {\n  return data.sizePrecision === 'atLeast' && data.totalSize === 0;\n}\n\nexport function isSearchTextEmptyOrUndefined(searchText?: string) {\n  return searchText === undefined || searchText.length === 0;\n}\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nexport function createKeysFromValueItems<K, D>(valueItems?: Item<K, D>[]) {\n  const keys = valueItems?.reduce((accumKeys, currentItem) => {\n    accumKeys.add(currentItem.key);\n    return accumKeys;\n  }, new Set<K>());\n  return keys;\n}\n","import type { DataState } from '#UNSAFE_Collection';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport { useMemo } from 'preact/compat';\n\ntype Key = string | number;\ntype Data = Record<string, any>;\n\ntype UseCollectionRendererCommonParams<K> = {\n  currentKey?: K;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  onCurrentKeyChange: (detail: { value?: K }) => void;\n};\n\nexport type UseCollectionRendererSelectSingleParams<K, D> = UseCollectionRendererCommonParams<K> & {\n  onItemAction: (detail: { context: Item<K, D> }) => void;\n  onSelectedKeysChange?: never;\n  selectedOnlyData?: never;\n};\n\nexport type UseCollectionRendererSelectMultipleParams<K, D> =\n  UseCollectionRendererCommonParams<K> & {\n    onItemAction?: never;\n    onSelectedKeysChange: (detail: { value: Set<K> }) => void;\n    selectedOnlyData?: DataState<K, D>;\n  };\n\ntype UseCollectionRendererParams<K, D> =\n  | UseCollectionRendererSelectSingleParams<K, D>\n  | UseCollectionRendererSelectMultipleParams<K, D>;\n\ntype CommonCollectionRendererContext<K extends Key> = {\n  searchText?: string;\n  currentRowKeyOverride?: K;\n  onPersistCurrentRowKey: (detail: { value?: K }) => void;\n  selected?: Set<K>;\n};\n\nexport type SelectSingleCollectionRendererContext<\n  K extends Key,\n  D extends Data\n> = CommonCollectionRendererContext<K> & {\n  onRowAction: (detail: { context: Item<K, D> }) => void;\n};\n\nexport type SelectMultipleCollectionRendererContext<\n  K extends Key,\n  D extends Data\n> = CommonCollectionRendererContext<K> & {\n  onSelectedChange: (detail: { value: Set<K> }) => void;\n  selectedOnlyData?: DataState<K, D>;\n};\n\ntype CollectionRendererContext<K extends Key, D extends Data> =\n  | SelectSingleCollectionRendererContext<K, D>\n  | SelectMultipleCollectionRendererContext<K, D>;\n\n// NOTE: We will using a single hook that constructs the collection renderer context for both select single and\n// select multiple. This is ok as they both share most of the properties and differ only in a few areas. So, we will\n// be using function overloading to determine which component is calling the hook (based on the args) and return the\n// correct context.\n\n/**\n * A custom hook that constructs the context for SelectSingle's collectionRenderer.\n * @param params Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>(\n  params: UseCollectionRendererSelectSingleParams<K, D>\n): SelectSingleCollectionRendererContext<K, D>;\n\n/**\n * A custom hook that constructs the context for SelectMultiple's collectionRenderer.\n * @param params Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>(\n  params: UseCollectionRendererSelectMultipleParams<K, D>\n): SelectMultipleCollectionRendererContext<K, D>;\n\n/**\n * A custom hook that constructs the context for SelectSingle/SelectMultiple's collectionRenderer.\n * @param param0 Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>({\n  currentKey,\n  onCurrentKeyChange,\n  onItemAction,\n  onSelectedKeysChange,\n  searchText,\n  selectedKeys,\n  selectedOnlyData\n}: UseCollectionRendererParams<K, D>) {\n  return useMemo<CollectionRendererContext<K, D>>(() => {\n    const common = {\n      searchText,\n      currentRowKeyOverride: currentKey,\n      onPersistCurrentRowKey: onCurrentKeyChange,\n      selected: selectedKeys\n    } satisfies CommonCollectionRendererContext<K>;\n\n    // If onItemAction is present, then we are constructing context for SelectSingle. So,\n    // return the context satisfying SelectSingleCollectionRendererContext type.\n    if (onItemAction !== undefined)\n      return {\n        ...common,\n        onRowAction: onItemAction\n      } satisfies SelectSingleCollectionRendererContext<K, D>;\n\n    // If onItemAction is not present, then we are constructing context for SelectMultiple. So,\n    // return the context satisfying SelectMultipleCollectionRendererContext type.\n    return {\n      ...common,\n      onSelectedChange: onSelectedKeysChange,\n      selectedOnlyData\n    } satisfies SelectMultipleCollectionRendererContext<K, D>;\n  }, [\n    currentKey,\n    onCurrentKeyChange,\n    onItemAction,\n    onSelectedKeysChange,\n    searchText,\n    selectedKeys,\n    selectedOnlyData\n  ]);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DataState } from '#UNSAFE_Collection';\nimport type { PositionData } from '#UNSAFE_Floating';\nimport { KEYS, isControlOrFunctionKey } from '#utils/PRIVATE_keyboardUtils';\nimport { allTabbableElements } from '#utils/PRIVATE_tabbableUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { useCallback, useEffect, useRef, useState, type Ref } from 'preact/hooks';\nimport { isSimpleClick } from './eventUtils';\n\ntype UseSelectCommonProps<K, D> = {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n};\n\nexport type CurrentKeyDetail<K> = {\n  value?: K;\n};\n\n/**\n * Hook that manages state and behavior for a Select* component.  This hook creates state\n * variables and event listeners, returning properties to apply to components internally\n * rendered by a Select* component, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isFocused Specifies whether the component has focus.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n *\n * @returns Component state and event listeners.\n */\nexport function useSelectCommon<K, D>({\n  data,\n  inputRef,\n  isFocused,\n  onFilter\n}: UseSelectCommonProps<K, D>) {\n  const mainFieldRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n\n  // We only need to push currentRow when we need to override the\n  // current row, like when the dropdown is opened and we want to set the initial\n  // focused row or when filtering and we want to focus the first row.\n  const [currentRowOverride, _setCurrentRowOverride] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  // We still need information on what the current row actually is, but we do not need\n  // to react to it until certain scenarios like pressing Tab from the dropdown. So, we\n  // just store this in a ref.\n  const currentRowKeyRef = useRef<K>();\n  // When we want to update the currentRowOverride, we also want to keep the currentRowKeyRef\n  // in sync as the collection will not call onChanged for this change.\n  const setCurrentRowOverride = useCallback((currentRow: { rowKey?: K }) => {\n    currentRowKeyRef.current = currentRow.rowKey;\n    _setCurrentRowOverride(currentRow);\n  }, []);\n  const [isUserFiltering, setUserFiltering] = useState(false);\n  const [userInput, setUserInput] = useState<string>();\n  const [searchText, setSearchText] = useState<string>();\n\n  const [prevIsDropdownOpen, setPrevIsDropdownOpen] = useState(isDropdownOpen);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [prevIsUserFiltering, setPrevIsUserFiltering] = useState(isUserFiltering);\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // const target = event.target as HTMLElement;\n      if (event.defaultPrevented || !isSimpleClick(event)) {\n        return;\n      }\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      // this is needed to focus the input when clicking on the inside label when there is no\n      // value;  otherwise the component looks focused but doesn't actually have physical focus\n      setTimeout(function () {\n        inputRef.current?.focus();\n      }, 0);\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownArrowClick = useCallback(() => {\n    setDropdownOpen(!isDropdownOpen);\n\n    // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes\n    inputRef.current?.focus();\n  }, [inputRef, isDropdownOpen]);\n\n  const handleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        setDropdownOpen(false);\n\n        switch (event?.type) {\n          case 'keydown':\n            const keyboardEvent = event as KeyboardEvent;\n            switch (keyboardEvent.code) {\n              case KEYS.ESC:\n                // focus the input when the user cancels out of the dropdown\n                inputRef.current?.focus();\n                break;\n              default:\n                break;\n            }\n            break;\n          case 'mousedown':\n            // if focus is in the dropdown, focus the input before the dropdown is hidden so that\n            // focus will transfer correctly when the target is not focusable;\n            // otherwise the text cursor appears in the input again\n            if (dropdownRef.current?.contains(document.activeElement)) {\n              inputRef.current?.focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownPosition = useCallback((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n\n  const getDropdownTabbableElems = useCallback(() => {\n    return isDropdownOpen && dropdownRef.current\n      ? allTabbableElements(dropdownRef.current)\n      : undefined;\n  }, [isDropdownOpen]);\n\n  const handleUpDownArrowKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      } else {\n        // JET-64909 - focus / 'current' dropped when arrow keying during loading\n        // Transfer physical focus into the dropdown only if the data is present and the dropdown\n        // has rendered the data. Otherwise, keep the focus in the field.\n        if (data != null) {\n          const tabbableElems = getDropdownTabbableElems();\n          tabbableElems?.[0]?.focus();\n\n          // if there is no current item set, make the first item current\n          if (currentRowOverride.rowKey === undefined) {\n            setCurrentRowOverride({ rowKey: data.data[0]?.metadata?.key });\n          }\n        }\n      }\n\n      // prevent the page from scrolling\n      event.preventDefault();\n    },\n    [currentRowOverride, data, getDropdownTabbableElems, isDropdownOpen, setCurrentRowOverride]\n  );\n\n  const handleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.PAGE_UP:\n        case KEYS.PAGE_DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n\n          return;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleMainFieldKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      setUserFiltering(true);\n      setUserInput(detail.value);\n      const str = detail.value;\n      setSearchText(str);\n      onFilter?.({ searchText: str });\n    },\n    [isDropdownOpen, onFilter]\n  );\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K>) => {\n    // when the collection changes the current key, we only want to store the information\n    // and not do anything.\n    currentRowKeyRef.current = detail.value;\n  }, []);\n\n  const stopFiltering = useCallback(() => {\n    setUserFiltering(false);\n    setUserInput('');\n    setSearchText('');\n  }, []);\n\n  // the user is not actively filtering if the dropdown is closed and the component doesn't\n  // have focus\n  if (\n    prevIsDropdownOpen !== isDropdownOpen ||\n    prevIsFocused !== isFocused ||\n    prevIsUserFiltering !== isUserFiltering\n  ) {\n    if (!isDropdownOpen && !isFocused && isUserFiltering) {\n      stopFiltering();\n    }\n  }\n\n  // need to call onFilter with undefined searchText when the dropdown opens and the\n  // user is NOT filtering\n  useEffect(() => {\n    if (isDropdownOpen && !isUserFiltering) {\n      onFilter?.({ searchText: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering, onFilter]);\n\n  // when the dropdown closes, reset the isDropdownAbove flag\n  if (prevIsDropdownOpen !== isDropdownOpen) {\n    if (!isDropdownOpen) {\n      setDropdownAbove(false);\n    }\n    setPrevIsDropdownOpen(isDropdownOpen);\n  }\n\n  if (prevIsFocused !== isFocused) {\n    setPrevIsFocused(isFocused);\n  }\n  if (prevIsUserFiltering !== isUserFiltering) {\n    setPrevIsUserFiltering(isUserFiltering);\n  }\n\n  return {\n    currentRowKeyRef,\n    currentRowOverride,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    // the field should remain to look focused while the dropdown is open,\n    // in case physical focus is in the dropdown\n    isFocused: isFocused || isDropdownOpen,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRowOverride,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  };\n}\n"],"names":["renderItemText","item","itemText","data","hasOwnProperty","retData","String","error","noOp","loadingIndicator","_jsx","jsx","SkeletonContainer","minimumCount","children","Flex","height","align","Skeleton","isSimpleClick","event","button","ctrlKey","preventDefaultForCurrentTarget","currentTarget","target","preventDefault","DEFAULT_PLACEMENT","noop","MobileDropdown","ariaLabelledBy","id","isOpen","Layer","WindowOverlay","class","mobileDropdownStyles","base","role","width","maxHeight","direction","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","SelectMobileFieldInput","forwardRef","ariaControls","ariaDescribedBy","ariaExpanded","ariaInvalid","ariaLabel","displayValue","hasEmptyLabel","hasInsideLabel","isRequired","onBlur","onFocus","placeholder","textAlign","variant","ref","isDisabled","isFocused","hasValue","useFormFieldContext","isTabbable","tabbableModeProps","useTabbableMode","myPlaceholder","isInputPlaceholderShown","undefined","UNSAFE_ariaLabelledBy","useAccessibleContext","mergedAriaLabelledBy","merge","styleInterpolationClasses","classes","themeClasses","useComponentTheme","TextFieldInputRedwoodTheme","type","styleVariant","textarea","input","prefix","suffix","startContent","endContent","insideLabel","value","focused","disabled","rootDivStyleClasses","classNames","selectMobileFieldInputStyles","content","Text","currentItemVariant","currentKey","itemRenderer","onCurrentKeyChange","onItemAction","onLoadRange","onSelectionChange","searchText","selectedKeys","selectionMode","listItemRenderer","useCallback","listItemContext","itemRendererProps","index","metadata","selector","itemContext","key","_jsxs","jsxs","dropdownStyles","selectorWrapper","singleSelectItem","multiSelectItem","ListItemText","HighlightText","matchText","keys","useMemo","all","Set","currentItemOverride","rowKey","handleOnPersistCurrentItem","detail","handleItemAction","context","handleSelectionChange","List","allowTabbableMode","onPersistCurrentItem","anchorRef","dropdownRef","onAutoDismiss","onPosition","placement","setPlacement","useState","prevIsOpen","setPrevIsOpen","handlePosition","positionData","handleAutoDismiss","handleKeyDown","defaultPrevented","isControlOrFunctionKey","code","KEYS","ESC","TAB","useOutsideMousedown","handler","inlineStyle","minWidth","current","offsetWidth","logicalParentRef","Floating","sizeOptions","isMaxHeightAdjusted","maxHeightCeiling","offsetValue","mainAxis","crossAxis","style","onKeyDown","onMouseDown","onClick","testId","ButtonLabelLayoutRedwoodTheme","size","baseTheme","BaseButtonRedwoodTheme","pressProps","usePress","styleClasses","arrow","enabled","testIdProps","useTestId","tabIndex","DropdownArrowIcon","SvgCaretDown","hasTopGap","hasBottomGap","isLoading","list","topGap","bottomGap","loading","CollectionInteractionContext","Provider","props","handleMouseDown","tagName","FormFieldContext","userAssistance","InlineUserAssistance","translations","useTranslationBundle","results","extraItem","select_noMatchesFound","isHighlighted","onAction","isHover","hoverProps","useHover","focusProps","useFocusWithin","handleClick","e","rootClasses","linkItemFocus","linkClasses","linkItemHighlight","Link","href","footer","hasHeaderSeparator","header","labelId","Separator","selectMobileDropdownStyles","valueItems","reduce","accumKeys","currentItem","add","sizePrecision","totalSize","deviceType","getClientHints","length","onSelectedKeysChange","selectedOnlyData","common","currentRowKeyOverride","onPersistCurrentRowKey","selected","onRowAction","onSelectedChange","inputRef","onFilter","mainFieldRef","useRef","isDropdownOpen","setDropdownOpen","isDropdownAbove","setDropdownAbove","currentRowOverride","_setCurrentRowOverride","currentRowKeyRef","setCurrentRowOverride","currentRow","isUserFiltering","setUserFiltering","userInput","setUserInput","setSearchText","prevIsDropdownOpen","setPrevIsDropdownOpen","prevIsFocused","setPrevIsFocused","prevIsUserFiltering","setPrevIsUserFiltering","setTimeout","focus","handleDropdownArrowClick","handleDropdownAutoDismiss","contains","document","activeElement","handleDropdownPosition","startsWith","getDropdownTabbableElems","allTabbableElements","handleUpDownArrowKeys","tabbableElems","handleMainFieldKeyDown","PAGE_UP","PAGE_DOWN","UP","DOWN","stopPropagation","handleMainFieldKeyUp","handleInput","str","stopFiltering","useEffect"],"mappings":"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"}