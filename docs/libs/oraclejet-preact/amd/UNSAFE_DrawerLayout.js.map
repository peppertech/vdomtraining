{"version":3,"file":"UNSAFE_DrawerLayout.js","sources":["../../src/UNSAFE_DrawerLayout/DrawerLayout.tsx"],"sourcesContent":["import { JSX, ComponentChildren, type RefObject } from 'preact';\nimport { useState, useRef, useEffect, useCallback } from 'preact/hooks';\nimport { normalizePosition } from '../utils/PRIVATE_floatingUtils';\nimport { Floating, ShiftOptions, RtlSide } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport {\n  getAutofocusFocusables,\n  focusOn,\n  focusWithin,\n  focusOnElementOrNearestAncestor\n} from '../utils/PRIVATE_tabbableUtils';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { allTabbableElements, getActiveElement } from '../utils/PRIVATE_tabbableUtils';\n\n// Hooks\nimport { useAnimation } from '../hooks/UNSAFE_useAnimation';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useBreakpointValues } from '../hooks/UNSAFE_useBreakpointValues';\nimport { useResizeObserver } from '../hooks/UNSAFE_useResizeObserver';\n\n// Style imports\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DrawerLayoutStyles } from './themes/DrawerLayoutStyles.css';\nimport { DrawerLayoutRedwoodTheme } from './themes/redwood/DrawerLayoutTheme';\n\n// Types\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\ntype Placement = 'start' | 'end' | 'bottom';\ntype Status = 'unmounted' | 'initial' | 'opening' | 'open' | 'closing';\n\ntype OnCloseDetail = {\n  placement: Placement;\n  reason: 'escapeKey';\n};\ntype OnTransitionEndDetail = {\n  placement: Placement;\n  value: boolean;\n};\ntype DisplayMode = 'overlay' | 'reflow';\ntype ResolvedDisplayMode = 'full-overlay' | 'overlay' | 'reflow';\ntype Visibility = 'hidden' | 'visible';\n\ntype Props = IntrinsicProps & {\n  /**\n   * The content node to be shown within the Start Drawer\n   */\n  startDrawer?: ComponentChildren;\n  /**\n   * The content node to be shown within the End Drawer\n   */\n  endDrawer?: ComponentChildren;\n  /**\n   * The content node to be shown within the Bottom Drawer\n   */\n  bottomDrawer?: ComponentChildren;\n  /**\n   * Specifies whether Start drawer is open.\n   */\n  isStartOpen?: boolean;\n  /**\n   * Specifies the display mode of the Start drawer.\n   *\n   * Supported values are:\n   * <p><code>overlay</code>, <code>reflow</code></p>\n   * Default is <code>undefined</code>.\n   */\n  startDisplay?: DisplayMode;\n  /**\n   * Specifies whether End drawer is open.\n   */\n  isEndOpen?: boolean;\n  /**\n   * Specifies the display mode of the End drawer.\n   *\n   * Supported values are:\n   * <p><code>overlay</code>, <code>reflow</code></p>\n   * Default is <code>undefined</code>.\n   */\n  endDisplay?: DisplayMode;\n  /**\n   * Specifies whether Bottom drawer is open.\n   */\n  isBottomOpen?: boolean;\n  /**\n   * Specifies the display mode of the Bottom drawer.\n   *\n   * Supported values are:\n   * <p><code>overlay</code>, <code>reflow</code></p>\n   * Default is <code>undefined</code>.\n   */\n  bottomDisplay?: DisplayMode;\n  /**\n   * Specifies callback triggered when a user tries to close a Drawer through UI interaction.\n   * The parent should listen to this event and close the Drawer. If the parent fails to remove\n   * the Popup, then no change will be done in the UI by the component.\n   *\n   * Supported detail values are:\n   * <p><code>placement: start | end | bottom</code></p>\n   * <p><code>reason: escapeKey</code></p>\n   */\n  onClose?: (detail: OnCloseDetail) => void;\n  /**\n   * Specifies callback triggered after the animation ends.\n   *\n   * Supported detail values are:\n   * <p><code>placement: start | end | bottom</code></p>\n   * <p><code>value: boolean</code></p>\n   */\n  onTransitionEnd?: (detail: OnTransitionEndDetail) => void;\n} & TestIdProps;\n\n/**\n * A drawer layout adds expandable side contents (drawers) alongside some primary content.\n *\n * These drawers automatically swap 'reflow' and 'overlay' display mode based on width of the page and can be placed at the 'start', 'end' or 'bottom' edge.\n */\nexport const DrawerLayout = ({\n  children,\n  startDrawer,\n  endDrawer,\n  bottomDrawer,\n  isStartOpen = false,\n  isEndOpen = false,\n  isBottomOpen = false,\n  startDisplay,\n  endDisplay,\n  bottomDisplay,\n  onClose,\n  onTransitionEnd,\n  testId // ...props\n}: Props) => {\n  // Constants\n  const zeroPx = '0px';\n  const duration = 250;\n  const verticalBreakpoint = 600;\n  const stringStart = 'start';\n  const stringEnd = 'end';\n  const stringBottom = 'bottom';\n  const stringInitial = 'initial';\n  const stringOpening = 'opening';\n  const stringOpen = 'open';\n  const stringClosing = 'closing';\n  const stringUnmounted = 'unmounted';\n  const stringFullOverlay = 'full-overlay';\n  const stringOverlay = 'overlay';\n  const stringReflow = 'reflow';\n  const stringHidden = 'hidden';\n  const stringVisible = 'visible';\n\n  // Initialize states\n  const [startDrawerStatus, setStartDrawerStatus] = useState<Status>(\n    isStartOpen ? stringInitial : stringUnmounted\n  );\n  const [endDrawerStatus, setEndDrawerStatus] = useState<Status>(\n    isEndOpen ? stringInitial : stringUnmounted\n  );\n  const [bottomDrawerStatus, setBottomDrawerStatus] = useState<Status>(\n    isBottomOpen ? stringInitial : stringUnmounted\n  );\n  const [startVisibility, setStartVisibility] = useState<Visibility>(stringHidden);\n  const [endVisibility, setEndVisibility] = useState<Visibility>(stringHidden);\n  const [bottomVisibility, setBottomVisibility] = useState<Visibility>(stringHidden);\n\n  const [startOffset, setStartOffset] = useState<number>();\n  const [endOffset, setEndOffset] = useState<number>();\n  const [bottomOffset, setBottomOffset] = useState<number>();\n\n  // Breakpoints:\n  // sm: 0-600px (full-overlay)\n  // md: 600-1024px (overlay)\n  // lg: >1024px (reflow)\n  const displayMode: ResolvedDisplayMode = useBreakpointValues({\n    sm: stringFullOverlay,\n    md: stringOverlay,\n    lg: stringReflow\n  });\n  const [viewportDisplayModeHorizontal, setViewportDisplayModeHorizontal] =\n    useState<ResolvedDisplayMode>(displayMode);\n  const [viewportDisplayModeVertical, setViewportDisplayModeVertical] =\n    useState<ResolvedDisplayMode>(displayMode);\n\n  // Refs\n  const rootRef = useRef<HTMLDivElement>(null);\n  const centerRef = useRef<HTMLDivElement>(null);\n  const startDrawerRef = useRef<HTMLDivElement>(null);\n  const endDrawerRef = useRef<HTMLDivElement>(null);\n  const bottomDrawerRef = useRef<HTMLDivElement>(null);\n  const placementOfLastlyFocusedRef = useRef<Placement | null>(null);\n  const indexOfLastlyFocusedRef = useRef<number | null>(null);\n\n  const startLauncherRef = useRef<HTMLElement | null>(null);\n  const endLauncherRef = useRef<HTMLElement | null>(null);\n  const bottomLauncherRef = useRef<HTMLElement | null>(null);\n  const elementWithFocusBeforeDrawerClosesRef = useRef<HTMLElement | null>(null);\n\n  const [startResolvedDisplayMode, setStartResolvedDisplayMode] =\n    useState<ResolvedDisplayMode | null>(null);\n  const [endResolvedDisplayMode, setEndResolvedDisplayMode] = useState<ResolvedDisplayMode | null>(\n    null\n  );\n  const [bottomResolvedDisplayMode, setBottomResolvedDisplayMode] =\n    useState<ResolvedDisplayMode | null>(null);\n\n  const getDrawerEl = useCallback((placement: Placement) => {\n    return getDrawerRef(placement).current;\n  }, []);\n\n  const getPlacementOfDrawerWithFocus = useCallback(() => {\n    const startDrawerEl = getDrawerEl(stringStart);\n    const endDrawerEl = getDrawerEl(stringEnd);\n    const bottomDrawerEl = getDrawerEl(stringBottom);\n    const activeElement = getActiveElement();\n    if (startDrawerEl && startDrawerEl.contains(activeElement)) {\n      return stringStart;\n    } else if (endDrawerEl && endDrawerEl.contains(activeElement)) {\n      return stringEnd;\n    } else if (bottomDrawerEl && bottomDrawerEl.contains(activeElement)) {\n      return stringBottom;\n    } else return null;\n  }, [getDrawerEl]);\n\n  const triggerFocusTransferStrategy = useCallback((): void => {\n    // Focus strategy - find focused element.\n    // Save what drawer and what element had focus before it was eventually conditionally re-rendered\n\n    // In 'auto' display mode we swap 'reflow' and 'overlay' automatically\n    // When this change happens, conditional rendering mechanism destroys\n    // reflow drawer DOM and creates overlay drawer DOM. This, of course,\n    // applies vice versa. In such cases focus gets lost.\n    // In DOM destroy cases focus is usually moved to <body>.\n\n    // In standard open cases we trigger focus strategy from animationEnd callback.\n    // However, in 'reflow' <> 'overlay' cases animation hook is not used/wanted at all.\n    // In addition, we should keep focus on the lastly/customly focused elemenet,\n    // e.g. the lastly focused element of a form\n\n    // 1. useBreakpoint hook is triggered even there's no drawer present.\n    // Handle focus only if there's at least one drawer open\n    if (isStartOpen || isEndOpen || isBottomOpen) {\n      // 2. Focus might not be in drawers.\n      // In modeless cases user can bring the focus out of open drawers by clicking outside them.\n\n      // Check whether focused element lives in a drawer (one of drawers).\n      // Do not handle focus at all if it is not within a drawer.\n      // Note: returns null if focus is not within a drawer\n      const activeElementPlacement = getPlacementOfDrawerWithFocus();\n      if (activeElementPlacement) {\n        // Save in which drawer focus lives (save its placement).\n        placementOfLastlyFocusedRef.current = activeElementPlacement;\n\n        // 3. Focus was detected in a particular drawer\n        // Save index of this element\n        const allTabbables = allTabbableElements(\n          getDrawerRef(placementOfLastlyFocusedRef.current).current as HTMLDivElement,\n          true\n        );\n        // Save index of lastly focused element\n        indexOfLastlyFocusedRef.current = allTabbables.indexOf(getActiveElement() as HTMLElement);\n      }\n    }\n  }, [getPlacementOfDrawerWithFocus, isStartOpen, isBottomOpen, isEndOpen]);\n\n  const isDrawerOpen = useCallback(\n    (placement: Placement): boolean => {\n      let isOpen = false;\n      switch (placement) {\n        case stringStart:\n          isOpen = isStartOpen;\n          break;\n        case stringEnd:\n          isOpen = isEndOpen;\n          break;\n        case stringBottom:\n          isOpen = isBottomOpen;\n          break;\n      }\n      return isOpen;\n    },\n    [isStartOpen, isEndOpen, isBottomOpen]\n  );\n\n  useEffect((): void => {\n    // Focus strategy - apply focus back\n    // Return focus to a drawer if applicable\n    // 1a. useBreakpoint hook, which monitors viewport resolution, is triggered even drawer(s) are not open.\n    // This hook causes changes to 'viewportDisplayModeHorizontal', a dependency of this effect.\n    // 1b. This effect can be also triggered by a change to\n    // start-display/end-display/bottom-display properties of the DrawerLayout.\n    // Make sure that drawer, in which we previously found focus, is still open.\n    const placementOflastlyFocusedDrawer = placementOfLastlyFocusedRef.current;\n    if (placementOflastlyFocusedDrawer) {\n      const drawerRefReceivingFocus: RefObject<any> = getDrawerRef(placementOflastlyFocusedDrawer);\n\n      if (drawerRefReceivingFocus.current && isDrawerOpen(placementOflastlyFocusedDrawer)) {\n        // 2. Find all tabbables in newly rendered focus receiving focus\n        const allTabbables = allTabbableElements(drawerRefReceivingFocus.current, true);\n\n        // 3. Try to focus the same element that had focus in previous display mode\n        // In theory drawer's content could be modified.\n        // Check whether there are more tababble elements than the index value we saved\n        if (\n          indexOfLastlyFocusedRef.current != null &&\n          allTabbables.length > indexOfLastlyFocusedRef.current\n        ) {\n          // Focus element using the saved index\n          focusOn(allTabbables[indexOfLastlyFocusedRef.current]);\n        } else {\n          // Focus first tabbable\n          focusWithin(drawerRefReceivingFocus.current);\n        }\n\n        // Reset saved values to avoid possible side effects\n        placementOfLastlyFocusedRef.current = null;\n        indexOfLastlyFocusedRef.current = null;\n      }\n    }\n  }, [startResolvedDisplayMode, endResolvedDisplayMode, bottomResolvedDisplayMode, isDrawerOpen]);\n\n  useEffect(() => {\n    // Size breakpoint crossed\n    triggerFocusTransferStrategy();\n    // Reschedules the effect to occur after the ResizeObserver’s loop has completed.\n    setTimeout((): void => {\n      setViewportDisplayModeHorizontal(displayMode);\n    }, 0);\n  }, [displayMode, triggerFocusTransferStrategy]);\n\n  const getElementHeight = (element: HTMLDivElement): number => {\n    return element ? Math.round(element.offsetHeight) : 0;\n  };\n\n  const getElementHeightPx = useCallback((element: HTMLDivElement): string => {\n    return `${getElementHeight(element)}px`;\n  }, []);\n\n  const getElementWidth = useCallback((element: HTMLDivElement): number => {\n    return element ? Math.round(element.getBoundingClientRect().width) : 0;\n  }, []);\n\n  const getElementWidthPx = useCallback(\n    (element: HTMLDivElement): string => {\n      return `${getElementWidth(element)}px`;\n    },\n    [getElementWidth]\n  );\n\n  // Normalizing position\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n\n  const getNormalizedPlacement = useCallback(\n    (placement: Placement): RtlSide => {\n      return normalizePosition(placement, direction);\n    },\n    [direction]\n  );\n\n  const getTranslateX = (placement: Placement, ref: any): string => {\n    return `${getNormalizedPlacement(placement) === 'right' ? '' : '-'}${getElementWidthPx(\n      ref.current as HTMLDivElement\n    )}`;\n  };\n\n  const getTranslateY = (ref: any): string => {\n    return getElementHeightPx(ref.current as HTMLDivElement);\n  };\n\n  const isSidePlacement = (placement: Placement): boolean => {\n    return [stringStart, stringEnd].indexOf(placement) > -1;\n  };\n\n  const isBottomPlacement = (placement: Placement): boolean => {\n    return placement === stringBottom;\n  };\n\n  const isAnimationPending = (status: Status): boolean => {\n    return [stringOpening, stringClosing].indexOf(status) > -1;\n  };\n\n  const isDrawerAnimationPending = (placement: Placement): boolean => {\n    switch (placement) {\n      case stringStart:\n        return isAnimationPending(startDrawerStatus);\n      case stringEnd:\n        return isAnimationPending(endDrawerStatus);\n      case stringBottom:\n        return isAnimationPending(bottomDrawerStatus);\n    }\n  };\n\n  const getDrawerVisibility = (placement: Placement): Visibility => {\n    switch (placement) {\n      case stringStart:\n        return startVisibility;\n      case stringEnd:\n        return endVisibility;\n      case stringBottom:\n        return bottomVisibility;\n    }\n  };\n\n  const setDrawerVisibility = (placement: Placement, visibility: Visibility): void => {\n    switch (placement) {\n      case stringStart:\n        return setStartVisibility(visibility);\n      case stringEnd:\n        return setEndVisibility(visibility);\n      case stringBottom:\n        return setBottomVisibility(visibility);\n    }\n  };\n\n  const getDrawerRef = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startDrawerRef;\n      case stringEnd:\n        return endDrawerRef;\n      case stringBottom:\n        return bottomDrawerRef;\n    }\n  };\n\n  const getAnimatedNodeRef = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startAnimatedNodeRef;\n      case stringEnd:\n        return endAnimatedNodeRef;\n      case stringBottom:\n        return bottomAnimatedNodeRef;\n    }\n  };\n\n  const getDrawerStatus = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startDrawerStatus;\n      case stringEnd:\n        return endDrawerStatus;\n      case stringBottom:\n        return bottomDrawerStatus;\n    }\n  };\n\n  const setDrawerStatus = (placement: Placement, status: Status): void => {\n    switch (placement) {\n      case stringStart:\n        setStartDrawerStatus(status);\n        break;\n      case stringEnd:\n        setEndDrawerStatus(status);\n        break;\n      case stringBottom:\n        setBottomDrawerStatus(status);\n        break;\n    }\n  };\n\n  const resetAnimatedNodeRef = (placement: Placement): void => {\n    switch (placement) {\n      case stringStart:\n        startAnimatedNodeRef(null);\n        break;\n      case stringEnd:\n        endAnimatedNodeRef(null);\n        break;\n      case stringBottom:\n        bottomAnimatedNodeRef(null);\n        break;\n    }\n  };\n\n  const getDrawerDisplayProp = useCallback(\n    (placement: Placement) => {\n      switch (placement) {\n        case stringStart:\n          return startDisplay;\n        case stringEnd:\n          return endDisplay;\n        case stringBottom:\n          return bottomDisplay;\n      }\n    },\n    [startDisplay, endDisplay, bottomDisplay]\n  );\n\n  const getDrawerResolvedDisplayMode = useCallback(\n    (placement: Placement) => {\n      const displayProp = getDrawerDisplayProp(placement);\n      if (displayProp) {\n        return displayProp;\n      } else {\n        if (isSidePlacement(placement)) {\n          return viewportDisplayModeHorizontal;\n        }\n        return viewportDisplayModeVertical;\n      }\n    },\n    [getDrawerDisplayProp, viewportDisplayModeHorizontal, viewportDisplayModeVertical]\n  );\n\n  // Animation config\n  const getAnimationStates = (placement: Placement, ref: RefObject<HTMLElement>): any => {\n    const bottomPlacement: boolean = isBottomPlacement(placement);\n    if (getDrawerResolvedDisplayMode(placement) === stringReflow) {\n      // Reflow display mode\n      // Effect: Expand/Collapse\n      if (bottomPlacement) {\n        return {\n          opening: () => {\n            return {\n              from: {\n                maxHeight: zeroPx\n              },\n              to: {\n                maxHeight: getElementHeightPx(ref.current as HTMLDivElement)\n              },\n              options: {\n                duration: duration\n              }\n            };\n          },\n          closing: () => {\n            return {\n              from: {\n                maxHeight: getElementHeightPx(ref.current as HTMLDivElement)\n              },\n              to: {\n                maxHeight: zeroPx\n              },\n              options: {\n                duration: duration\n              }\n            };\n          }\n        };\n      } else {\n        return {\n          opening: () => {\n            return {\n              from: {\n                maxWidth: zeroPx\n              },\n              to: {\n                maxWidth: getElementWidthPx(ref.current as HTMLDivElement)\n              },\n              options: {\n                duration: duration\n              }\n            };\n          },\n          closing: () => {\n            return {\n              from: {\n                maxWidth: getElementWidthPx(ref.current as HTMLDivElement)\n              },\n              to: {\n                maxWidth: zeroPx\n              },\n              options: {\n                duration: duration\n              }\n            };\n          }\n        };\n      }\n    } else {\n      // FullOverlay or Overlay display mode\n      // Effect: Slidein/Slideout\n      if (bottomPlacement) {\n        return {\n          opening: () => {\n            return {\n              from: {\n                translateY: getTranslateY(ref)\n              },\n              to: {\n                translateY: zeroPx\n              },\n              options: {\n                duration: duration\n              }\n            };\n          },\n          closing: () => {\n            return {\n              from: {\n                translateY: zeroPx\n              },\n              to: {\n                translateY: getTranslateY(ref)\n              },\n              options: {\n                duration: duration\n              }\n            };\n          }\n        };\n      } else {\n        return {\n          opening: () => {\n            return {\n              from: {\n                translateX: getTranslateX(placement, ref)\n              },\n              to: {\n                translateX: zeroPx\n              },\n              options: {\n                duration: duration\n              }\n            };\n          },\n          closing: () => {\n            return {\n              from: {\n                translateX: zeroPx\n              },\n              to: {\n                translateX: getTranslateX(placement, ref)\n              },\n              options: {\n                duration: duration\n              }\n            };\n          }\n        };\n      }\n    }\n  };\n\n  const removeAnimationInlineStyles = (placement: Placement): void => {\n    // Remove style attribute left on the element by the Animation util\n    const drawerRef: RefObject<any> = getDrawerRef(placement);\n    drawerRef.current.removeAttribute('style');\n  };\n\n  const setInitialFocus = (placement: Placement): void => {\n    // Set focus to the first match:\n    const drawerRef: RefObject<any> = getDrawerRef(placement);\n\n    // 1. First element inside the drawer matching [autofocus]\n    const autofocusItems: HTMLElement[] = getAutofocusFocusables(drawerRef.current);\n    if (autofocusItems.length > 0) {\n      focusOn(autofocusItems[0]);\n      return;\n    }\n    // 2. Tabbable element inside the content element\n    // 3. The drawer itself\n    focusWithin(drawerRef.current);\n  };\n\n  const getLauncherRef = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startLauncherRef;\n      case stringEnd:\n        return endLauncherRef;\n      case stringBottom:\n        return bottomLauncherRef;\n    }\n  };\n\n  const returnFocusToLauncher = (placement: Placement): void => {\n    // Return the focus to the drawer's launcher only if the focus\n    // is currently living within a drawer.\n    // As we do not apply focus-trap in modeless mode, user is able to\n    // get the focus out of the drawer. In this case we do not want to handle it.\n    if (getDrawerRef(placement).current?.contains(elementWithFocusBeforeDrawerClosesRef.current)) {\n      focusOnElementOrNearestAncestor(getLauncherRef(placement).current as HTMLElement);\n    }\n  };\n\n  // Custom hook to be shared for each side\n  // It can't be a function as a hook can only be called within a custom hook\n  function useNodeRef(placement: Placement, ref: RefObject<HTMLElement>) {\n    const isOpen: boolean = isDrawerOpen(placement);\n    const status = getDrawerStatus(placement);\n    return useAnimation<Status, HTMLDivElement>(status, {\n      animationStates: getAnimationStates(placement, ref),\n      isAnimatedOnMount: true,\n      onAnimationEnd: () => {\n        if (status === stringOpening) {\n          if (isOverlay(placement)) {\n            setInitialFocus(placement);\n          }\n          // Remove animation's inline style\n          removeAnimationInlineStyles(placement);\n          setDrawerStatus(placement, stringOpen);\n          onTransitionEnd?.({\n            placement: placement,\n            value: true\n          });\n        } else if (!isOpen) {\n          if (isOverlay(placement)) {\n            returnFocusToLauncher(placement);\n          }\n          resetAnimatedNodeRef(placement);\n          setDrawerVisibility(placement, stringHidden);\n          setDrawerStatus(placement, stringUnmounted);\n          onTransitionEnd?.({\n            placement: placement,\n            value: false\n          });\n        }\n      }\n    }).nodeRef;\n  }\n\n  // Drawer refs\n  const startAnimatedNodeRef = useNodeRef(stringStart, startDrawerRef);\n  const endAnimatedNodeRef = useNodeRef(stringEnd, endDrawerRef);\n  const bottomAnimatedNodeRef = useNodeRef(stringBottom, bottomDrawerRef);\n\n  //testId support\n  const testIdProps = useTestId(testId);\n\n  const setLauncherRef = (placement: Placement) => {\n    const activeElement = getActiveElement() as HTMLElement;\n    switch (placement) {\n      case stringStart:\n        startLauncherRef.current = activeElement;\n        break;\n      case stringEnd:\n        endLauncherRef.current = activeElement;\n        break;\n      case stringBottom:\n        bottomLauncherRef.current = activeElement;\n        break;\n    }\n  };\n\n  // Custom hook to be shared for each side\n  // It can't be a function as a hook can only be called within a custom hook\n  function useDrawerStatus(placement: Placement): void {\n    const isOpen = isDrawerOpen(placement);\n    const drawerStatus = getDrawerStatus(placement);\n    useEffect(() => {\n      // Ignore initial render\n      // 1. Ignore status update on initial render\n      if (drawerStatus === stringUnmounted && !isOpen) {\n        return;\n      }\n\n      // 2. Unmounted\n      // Mount visually hidden component.\n      // Component gets mounted, but will be visually hidden to avoid flickering.\n      // Flickering happens because it gets rendered before animation hook repositions\n      // it in next render cycle\n      if (drawerStatus === stringUnmounted && isOpen) {\n        setDrawerStatus(placement, stringInitial);\n        return;\n      }\n\n      // 3. Initial\n      // Setup animation\n      // Component has been mounted.\n      // We will kick out animation as node is already present in DOM.\n      // To avoid flickering, we still keep it visually hidden until the next render cycle.\n      if (drawerStatus === stringInitial && isOpen) {\n        const drawerRef = getDrawerRef(placement);\n        const animatedNodeRef = getAnimatedNodeRef(placement);\n        animatedNodeRef(drawerRef.current);\n        setDrawerStatus(placement, stringOpening);\n        return;\n      }\n\n      // 4. Opening\n      // Unhide component. It becomes visible.\n      if (drawerStatus === stringOpening && isOpen) {\n        setDrawerVisibility(placement, stringVisible);\n        // Remember launcher\n        setLauncherRef(placement);\n        return;\n      }\n\n      // 5. Open\n      // Status 'open' is set in 'onAnimationEnd' handler\n\n      // 6. Closing\n      if (!isOpen) {\n        elementWithFocusBeforeDrawerClosesRef.current = getActiveElement() as HTMLElement;\n        setDrawerStatus(placement, stringClosing);\n      }\n    }, [isOpen, drawerStatus, placement]);\n  }\n\n  // Drawers' status handler±\n  useDrawerStatus(stringStart);\n  useDrawerStatus(stringEnd);\n  useDrawerStatus(stringBottom);\n\n  // Keydown handlers\n  const handleKeyDownStart = (event: Event): void => {\n    handleKeyDown(stringStart, event);\n  };\n  const handleKeyDownEnd = (event: Event): void => {\n    handleKeyDown(stringEnd, event);\n  };\n  const handleKeyDownBottom = (event: Event): void => {\n    handleKeyDown(stringBottom, event);\n  };\n\n  const handleKeyDown = (placement: Placement, event: any): void => {\n    if (event.code === 'Escape') {\n      // Handle only in overlay mode\n      if (isOverlay(placement)) {\n        onClose?.({\n          placement,\n          reason: 'escapeKey'\n        });\n      }\n    }\n  };\n\n  // Styles\n  const { classes, styles } = useComponentTheme<never, DrawerLayoutStyles>(\n    DrawerLayoutRedwoodTheme\n  );\n\n  const getVisibilityClass = (visibility: Visibility) => {\n    return visibility === stringHidden ? styles.visibilityHidden : styles.visibilityVisible;\n  };\n\n  const isOverlay = useCallback(\n    (placement: Placement): boolean => {\n      return (\n        [stringFullOverlay, stringOverlay].indexOf(getDrawerResolvedDisplayMode(placement)) > -1\n      );\n    },\n    [getDrawerResolvedDisplayMode]\n  );\n\n  const isFullOverlay = (placement: Placement): boolean => {\n    return getDrawerResolvedDisplayMode(placement) === stringFullOverlay;\n  };\n\n  const getDrawerClassNames = (placement: Placement): string => {\n    // Visibility style is always added\n    const visibility: Visibility = getDrawerVisibility(placement);\n    const classNamesArr: string[] = [getVisibilityClass(visibility)];\n\n    // Styles for overlay vs. full-overlay vs. reflow\n    if (isOverlay(placement)) {\n      classNamesArr.push(styles.overlayDrawer);\n      if (isSidePlacement(placement) && !isFullOverlay(placement)) {\n        classNamesArr.push(styles.overlaySideDrawerNonFullWidth);\n      }\n    } else {\n      classNamesArr.push(styles.reflowDrawer);\n    }\n\n    // Styles for animation\n    if (isDrawerAnimationPending(placement)) {\n      classNamesArr.push(styles.animatedDrawer);\n    }\n\n    const getPlacementSpecificStyles = (placement: Placement): string => {\n      switch (placement) {\n        case stringStart:\n          if (isOverlay(stringStart)) {\n            return isLtr ? styles.overlayDrawerLeft : styles.overlayDrawerRight;\n          } else {\n            return isLtr ? styles.reflowDrawerLeft : styles.reflowDrawerRight;\n          }\n        case stringEnd:\n          if (isOverlay(stringEnd)) {\n            return isLtr ? styles.overlayDrawerRight : styles.overlayDrawerLeft;\n          } else {\n            return isLtr ? styles.reflowDrawerRight : styles.reflowDrawerLeft;\n          }\n        case stringBottom:\n          return isOverlay(stringBottom) ? styles.overlayDrawerBottom : styles.reflowDrawerBottom;\n      }\n    };\n    // Placement specific styles\n    classNamesArr.push(getPlacementSpecificStyles(placement));\n\n    return classNames(classNamesArr);\n  };\n\n  const getDrawerProp = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startDrawer;\n      case stringEnd:\n        return endDrawer;\n      case stringBottom:\n        return bottomDrawer;\n    }\n  };\n\n  const getKeyDownHandler = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return handleKeyDownStart;\n      case stringEnd:\n        return handleKeyDownEnd;\n      case stringBottom:\n        return handleKeyDownBottom;\n    }\n  };\n\n  // Single drawer template\n  const renderDrawer = (placement: Placement) => {\n    return (\n      <div\n        ref={getDrawerRef(placement)}\n        className={getDrawerClassNames(placement)}\n        tabIndex={isOverlay(placement) ? -1 : undefined}\n        onKeyDown={getKeyDownHandler(placement)}>\n        {getDrawerProp(placement)}\n      </div>\n    );\n  };\n\n  const clientHints = getClientHints();\n\n  const getViewportHeight = useCallback((): number => {\n    if (clientHints.platform === 'ios') {\n      // On ios window.innerHeight is not recommended way of measuring the viewport\n      return document.documentElement.clientHeight;\n    }\n    return window.innerHeight;\n  }, [clientHints.platform]);\n\n  // We faced error in KM test environment\n  // Error: ResizeObserver loop completed with undelivered notifications.\n  // This happens when an observed element is resized again during a notification.\n  // Another cause can be rounding values and then setting the rounded value back.\n  // If this is in the same loop as the resize notification, it will cause another resize on the element.\n  // Wrapping ResizeObserver’s callback in a setTimeout with a delay of 0 milliseconds\n  // reschedules the effect to occur after the ResizeObserver’s loop has completed.\n  const rescheduleObserverHandler = (callback: any) => {\n    setTimeout(() => {\n      callback();\n    }, 0);\n  };\n\n  const handleRescheduledVerticalResize = useCallback(() => {\n    const viewportHeight = getViewportHeight();\n    if (viewportHeight >= verticalBreakpoint) {\n      if (viewportDisplayModeVertical != stringReflow) {\n        triggerFocusTransferStrategy();\n        setViewportDisplayModeVertical(stringReflow);\n      }\n    } else {\n      if (viewportDisplayModeVertical != stringOverlay) {\n        triggerFocusTransferStrategy();\n        setViewportDisplayModeVertical(stringOverlay);\n      }\n    }\n  }, [viewportDisplayModeVertical, getViewportHeight, triggerFocusTransferStrategy]);\n\n  const handleVerticalResize = useCallback(() => {\n    rescheduleObserverHandler(handleRescheduledVerticalResize);\n  }, [handleRescheduledVerticalResize]);\n\n  // Window resize listener\n  // useBreakpoint hook is designed for horizontal breakpoints only\n  // This listener is used for 600px (overlay vs. reflow) breakpoint\n  // used for bottom drawer\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      handleVerticalResize();\n    });\n    resizeObserver.observe(document.body);\n    // Deregister resize observer when Drawer layout unmounts\n    return () => {\n      resizeObserver.unobserve(document.body);\n    };\n  }, [handleVerticalResize]);\n\n  const getOffset = (placement: Placement): number => {\n    const drawerEl = getDrawerEl(placement);\n    if (drawerEl) {\n      return isSidePlacement(placement) ? -getElementWidth(drawerEl) : -getElementHeight(drawerEl);\n    }\n    return 0;\n  };\n\n  const getOffsetState = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startOffset;\n      case stringEnd:\n        return endOffset;\n      case stringBottom:\n        return bottomOffset;\n    }\n  };\n\n  const setSideOverlayDrawerFullHeight = useCallback(\n    (placement: Placement) => {\n      // By default PopupElements have no predefined height.\n      // In 'overlay' mode drawers should be\n      // of the same height as their parent <oj-drawer-layout>\n      const centerSectionHeight = getElementHeightPx(centerRef.current as HTMLDivElement);\n\n      const drawerEl = getDrawerRef(placement).current;\n      if (drawerEl && isDrawerOpen(placement) && isOverlay(placement)) {\n        drawerEl.style.height = centerSectionHeight;\n      }\n    },\n    [getElementHeightPx, isDrawerOpen, isOverlay]\n  );\n\n  const handleSideDrawerFullWidth = (placement: Placement) => {\n    const drawerEl = getDrawerRef(placement).current;\n    if (drawerEl) {\n      if (isDrawerOpen(placement)) {\n        const drawerInlineStyle = drawerEl.style;\n        if (isFullOverlay(placement)) {\n          drawerInlineStyle.width = getElementWidthPx(rootRef.current as HTMLDivElement);\n        } else {\n          drawerInlineStyle.removeProperty('width');\n        }\n      }\n    }\n  };\n\n  const setBottomOverlayDrawerWidth = useCallback(() => {\n    const bottomDrawerElement = bottomDrawerRef.current;\n    if (bottomDrawerElement && isDrawerOpen(stringBottom) && isOverlay(stringBottom)) {\n      const centerSectionWidth = getElementWidthPx(centerRef.current as HTMLDivElement);\n      bottomDrawerElement.style.width = centerSectionWidth;\n    }\n  }, [getElementWidthPx, isDrawerOpen, isOverlay]);\n\n  const setDrawerSize = (placement: Placement) => {\n    if (isSidePlacement(placement)) {\n      setSideOverlayDrawerFullHeight(placement);\n      handleSideDrawerFullWidth(placement);\n    }\n    if (isBottomPlacement(placement)) {\n      setBottomOverlayDrawerWidth();\n    }\n  };\n\n  // DrawerLayout resize observer\n  const handleDrawerLayoutResize = () => {\n    rescheduleObserverHandler(handleRescheduledDrawerLayoutResize);\n  };\n  const handleRescheduledDrawerLayoutResize = useCallback(() => {\n    // If the DrawerLayout (page content) changes size,\n    // adjust OVERLAY side drawers (start/end) height to fit the drawer\n    // Note that these two functions checks that 'overlay' condition is fulfilled\n    setSideOverlayDrawerFullHeight(stringStart);\n    setSideOverlayDrawerFullHeight(stringEnd);\n    setBottomOverlayDrawerWidth();\n  }, [setSideOverlayDrawerFullHeight, setBottomOverlayDrawerWidth]);\n  useResizeObserver(rootRef, handleDrawerLayoutResize);\n\n  const setOffsetState = (placement: Placement) => {\n    // This method sets offset used only in overlay mode\n    if (isOverlay(placement)) {\n      const offset = getOffset(placement);\n      switch (placement) {\n        case stringStart:\n          setStartOffset(offset);\n          break;\n        case stringEnd:\n          setEndOffset(offset);\n          break;\n        case stringBottom:\n          setBottomOffset(offset);\n          break;\n      }\n    }\n  };\n\n  // Start drawer resize observer\n  const handleStartDrawerResize = () => {\n    rescheduleObserverHandler(handleRescheduledStartDrawerResize);\n  };\n  const handleRescheduledStartDrawerResize = () => {\n    setOffsetState(stringStart);\n    setBottomOverlayDrawerWidth();\n  };\n  useResizeObserver(startDrawerRef, handleStartDrawerResize);\n\n  // End drawer resize observer\n  const handleEndDrawerResize = () => {\n    rescheduleObserverHandler(handleRescheduledEndDrawerResize);\n  };\n  const handleRescheduledEndDrawerResize = () => {\n    setOffsetState(stringEnd);\n    setBottomOverlayDrawerWidth();\n  };\n  useResizeObserver(endDrawerRef, handleEndDrawerResize);\n\n  // Bottom drawer resize observer\n  const handleBottomDrawerResize = () => {\n    rescheduleObserverHandler(handleRescheduledBottomDrawerResize);\n  };\n  const handleRescheduledBottomDrawerResize = () => {\n    setOffsetState(stringBottom);\n  };\n  useResizeObserver(bottomDrawerRef, handleBottomDrawerResize);\n\n  const getDrawerPreviousResolvedDisplayMode = (placement: Placement) => {\n    switch (placement) {\n      case stringStart:\n        return startResolvedDisplayMode;\n      case stringEnd:\n        return endResolvedDisplayMode;\n      case stringBottom:\n        return bottomResolvedDisplayMode;\n    }\n  };\n\n  const saveResolvedDisplayMode = (placement: Placement) => {\n    const currentResolvedDisplayMode = getDrawerResolvedDisplayMode(placement);\n    if (getDrawerPreviousResolvedDisplayMode(placement) != currentResolvedDisplayMode) {\n      switch (placement) {\n        case stringStart:\n          setStartResolvedDisplayMode(currentResolvedDisplayMode);\n        case stringEnd:\n          setEndResolvedDisplayMode(currentResolvedDisplayMode);\n        case stringBottom:\n          setBottomResolvedDisplayMode(currentResolvedDisplayMode);\n      }\n\n      // In case of 'reflow <> overlay' change conditional rendering of a drawer happens.\n      // The old DOM is destoryed and a new DOM is created. In this case focus gets lost.\n      // Browser moves the focus to body.\n      // We try to prevent it by eventually applying focus in the newly created DOM.\n      // If at least one drawer is open, we will check whether focus lives whithin.\n      // See the following method for more details.\n      triggerFocusTransferStrategy();\n    }\n  };\n\n  const getReflowOrOverlayDrawer = (placement: Placement) => {\n    const shiftOptions: ShiftOptions = {\n      mainAxis: false,\n      crossAxis: false\n    };\n\n    const flipOptions = {\n      mainAxis: false,\n      crossAxis: false\n    };\n\n    // Save resolved display mode of a drawer so that we can compare it with 'next' value\n    saveResolvedDisplayMode(placement);\n\n    // Reflow vs. overlay drawer\n    if (isOverlay(placement)) {\n      setDrawerSize(placement);\n\n      // Initial offset\n      if (!getOffsetState(placement)) {\n        setOffsetState(placement);\n      }\n\n      return (\n        // Reconciliation issue. Reparented node must\n        // be a single child of a <div>\n        <div>\n          <Layer>\n            <Floating\n              anchorRef={placement === stringBottom ? centerRef : rootRef}\n              placement={placement}\n              class={isDrawerAnimationPending(placement) ? styles.floating : ''}\n              offsetValue={getOffsetState(placement)}\n              flipOptions={flipOptions}\n              shiftOptions={shiftOptions}>\n              {renderDrawer(placement)}\n            </Floating>\n          </Layer>\n        </div>\n      );\n    } else {\n      return renderDrawer(placement);\n    }\n  };\n\n  // Render drawer conditionally\n  const getDrawer = (placement: Placement): any => {\n    const isMounted = getDrawerStatus(placement) !== stringUnmounted;\n    return isMounted ? getReflowOrOverlayDrawer(placement) : null;\n  };\n\n  return (\n    <div ref={rootRef} className={classes} {...testIdProps}>\n      {/*Start drawer*/}\n      {getDrawer(stringStart)}\n      {/*Center section*/}\n      <div ref={centerRef} className={styles.centerSection}>\n        <div className={styles.mainContent}>\n          {/*<main content*/}\n          {children}\n        </div>\n        {/*Bottom drawer*/}\n        {getDrawer(stringBottom)}\n      </div>\n      {/*End drawer*/}\n      {getDrawer(stringEnd)}\n    </div>\n  );\n};\n"],"names":["children","startDrawer","endDrawer","bottomDrawer","isStartOpen","isEndOpen","isBottomOpen","startDisplay","endDisplay","bottomDisplay","onClose","onTransitionEnd","testId","zeroPx","duration","stringStart","stringEnd","stringBottom","stringInitial","stringOpening","stringClosing","stringUnmounted","stringFullOverlay","stringOverlay","stringReflow","stringHidden","startDrawerStatus","setStartDrawerStatus","useState","endDrawerStatus","setEndDrawerStatus","bottomDrawerStatus","setBottomDrawerStatus","startVisibility","setStartVisibility","endVisibility","setEndVisibility","bottomVisibility","setBottomVisibility","startOffset","setStartOffset","endOffset","setEndOffset","bottomOffset","setBottomOffset","displayMode","useBreakpointValues","sm","md","lg","viewportDisplayModeHorizontal","setViewportDisplayModeHorizontal","viewportDisplayModeVertical","setViewportDisplayModeVertical","rootRef","useRef","centerRef","startDrawerRef","endDrawerRef","bottomDrawerRef","placementOfLastlyFocusedRef","indexOfLastlyFocusedRef","startLauncherRef","endLauncherRef","bottomLauncherRef","elementWithFocusBeforeDrawerClosesRef","startResolvedDisplayMode","setStartResolvedDisplayMode","endResolvedDisplayMode","setEndResolvedDisplayMode","bottomResolvedDisplayMode","setBottomResolvedDisplayMode","getDrawerEl","useCallback","placement","getDrawerRef","current","getPlacementOfDrawerWithFocus","startDrawerEl","endDrawerEl","bottomDrawerEl","activeElement","getActiveElement","contains","triggerFocusTransferStrategy","activeElementPlacement","allTabbables","allTabbableElements","indexOf","isDrawerOpen","isOpen","useEffect","placementOflastlyFocusedDrawer","drawerRefReceivingFocus","length","focusOn","focusWithin","setTimeout","getElementHeight","element","Math","round","offsetHeight","getElementHeightPx","getElementWidth","getBoundingClientRect","width","getElementWidthPx","direction","useUser","isLtr","getNormalizedPlacement","normalizePosition","getTranslateX","ref","getTranslateY","isSidePlacement","isBottomPlacement","isAnimationPending","status","isDrawerAnimationPending","setDrawerVisibility","visibility","getDrawerStatus","setDrawerStatus","getDrawerDisplayProp","getDrawerResolvedDisplayMode","displayProp","getAnimationStates","bottomPlacement","opening","from","maxHeight","to","options","closing","maxWidth","translateY","translateX","returnFocusToLauncher","focusOnElementOrNearestAncestor","getLauncherRef","useNodeRef","useAnimation","animationStates","isAnimatedOnMount","onAnimationEnd","isOverlay","drawerRef","autofocusItems","getAutofocusFocusables","setInitialFocus","removeAttribute","removeAnimationInlineStyles","value","startAnimatedNodeRef","endAnimatedNodeRef","bottomAnimatedNodeRef","resetAnimatedNodeRef","nodeRef","testIdProps","useTestId","useDrawerStatus","drawerStatus","animatedNodeRef","getAnimatedNodeRef","setLauncherRef","handleKeyDownStart","event","handleKeyDown","handleKeyDownEnd","handleKeyDownBottom","code","reason","classes","styles","useComponentTheme","DrawerLayoutRedwoodTheme","getVisibilityClass","visibilityHidden","visibilityVisible","isFullOverlay","getDrawerClassNames","getDrawerVisibility","classNamesArr","push","overlayDrawer","overlaySideDrawerNonFullWidth","reflowDrawer","animatedDrawer","overlayDrawerLeft","overlayDrawerRight","reflowDrawerLeft","reflowDrawerRight","overlayDrawerBottom","reflowDrawerBottom","getPlacementSpecificStyles","classNames","getDrawerProp","getKeyDownHandler","renderDrawer","_jsx","className","tabIndex","undefined","onKeyDown","clientHints","getClientHints","getViewportHeight","platform","document","documentElement","clientHeight","window","innerHeight","rescheduleObserverHandler","callback","handleRescheduledVerticalResize","handleVerticalResize","resizeObserver","ResizeObserver","observe","body","unobserve","getOffsetState","setSideOverlayDrawerFullHeight","centerSectionHeight","drawerEl","style","height","setBottomOverlayDrawerWidth","bottomDrawerElement","centerSectionWidth","setDrawerSize","drawerInlineStyle","removeProperty","handleSideDrawerFullWidth","handleRescheduledDrawerLayoutResize","useResizeObserver","setOffsetState","offset","getOffset","handleRescheduledStartDrawerResize","handleRescheduledEndDrawerResize","handleRescheduledBottomDrawerResize","saveResolvedDisplayMode","currentResolvedDisplayMode","getDrawerPreviousResolvedDisplayMode","getDrawer","shiftOptions","mainAxis","crossAxis","flipOptions","jsx","Layer","Floating","anchorRef","class","floating","offsetValue","getReflowOrOverlayDrawer","_jsxs","jsxs","centerSection","mainContent"],"mappings":"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"}