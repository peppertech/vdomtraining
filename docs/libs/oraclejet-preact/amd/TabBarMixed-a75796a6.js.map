{"version":3,"file":"TabBarMixed-a75796a6.js","sources":["../../src/UNSAFE_TabBarMixed/TabBarMixed.tsx","../../src/UNSAFE_TabBarMixed/useTabBarMixed.ts"],"sourcesContent":["import type { ComponentChildren } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { Ref } from 'preact';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { TabBarContext } from '../UNSAFE_TabBarCommon';\nimport { styles } from './themes/TabBarMixedStyles.css';\nimport { useTabBarMixed as useTabBar } from './useTabBarMixed';\n\ntype UseTabBarOptions = Parameters<typeof useTabBar>[0];\n\n/**\n * Component props expected to be pased to **TabBarMixed**.\n *\n * @see {@link TabBarMixed}\n */\ntype TabBarMixedProps<K extends string | number> = {\n  /**\n   * Component children that will be rendered within the **TabBarMixed**\n   * root element.\n   *\n   * It is expected that **TabBarLayout** and **ConveyorBelt** elements are\n   * provided. The same **TabBarItem**, **RemovableTabBarItem**,\n   * and **OverflowTabBarItem** elements should also be used.\n   */\n  children?: ComponentChildren;\n  /**\n   * Callback fired when a tab item is removed.\n   */\n  onRemove?: UseTabBarOptions['onRemove'];\n  /**\n   * Callback fired when a tab item is selected.\n   */\n  onSelect?: UseTabBarOptions['onSelect'];\n  /**\n   * The item key of the selected tab item.\n   */\n  selection?: K;\n  /**\n   * The height of the the tab bar.\n   *\n   * @default \"md\"\n   */\n  size?: UseTabBarOptions['size'];\n  /**\n   * An aria-label which defines a string value that labels this TabBarMixed.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBarMixed accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBarMixed.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBarMixed accessible.\n   */\n  'aria-labelledby'?: string;\n};\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\n\n/**\n * A navigation component that enables horizontal navigation between distinct content with a mixture of static and dynamic tabs.\n *\n * @param {TabBarMixedProps} props TabBarMixed component props.\n * @returns {JSX.Element} TabBarMixed component element.\n */\nexport const TabBarMixed = forwardRef(\n  <K extends string | number>(\n    props: TabBarMixedProps<K>,\n    focusHandleRef?: Ref<FocusableHandle>\n  ) => {\n    const {\n      children,\n      onRemove,\n      onSelect,\n      selection,\n      size,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby\n    } = props;\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const { rootProps, tabBarContext } = useTabBar({\n      class: styles.tabBarBase,\n      edge: 'bottom',\n      onRemove,\n      onSelect,\n      ref: rootRef,\n      selection,\n      size,\n      children\n    });\n\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(focusHandleRef!, () => ({\n      focus: () => {\n        if (rootRef.current) {\n          rootRef.current.focus();\n        }\n      },\n      blur: () => {\n        if (rootRef.current) {\n          rootRef.current.blur();\n        }\n      }\n    }));\n\n    return (\n      <TabBarContext.Provider value={tabBarContext}>\n        <div aria-label={ariaLabel} aria-labelledby={ariaLabelledby} {...rootProps}>\n          {children}\n        </div>\n      </TabBarContext.Provider>\n    );\n  }\n);\n","import type { ComponentProps, ContextType, RefObject } from 'preact';\nimport type { TabBarContext, TabBarLayout } from '../UNSAFE_TabBarCommon';\n\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\n\ntype TabBarContextValue = ContextType<typeof TabBarContext>;\n\nexport type useTabBarOptions = {\n  class?: string;\n  display?: TabBarContextValue['display'];\n  edge?: 'bottom' | 'top';\n  onRemove?: TabBarContextValue['onRemove'];\n  onSelect?: TabBarContextValue['onSelect'];\n  ref?: RefObject<HTMLDivElement>;\n  selection?: TabBarContextValue['selection'];\n  size?: TabBarContextValue['size'];\n  children?: ComponentProps<typeof TabBarLayout>['children'];\n};\n\n/**\n * A thin wrapper around useTabBar hook\n */\nexport function useTabBarMixed(options: useTabBarOptions) {\n  return useTabBar(options);\n}\n"],"names":["TabBarMixed","forwardRef","props","focusHandleRef","children","onRemove","onSelect","selection","size","ariaLabel","ariaLabelledby","rootRef","useRef","rootProps","tabBarContext","options","class","styles","tabBarBase","edge","ref","useTabBar","useImperativeHandle","focus","current","blur","_jsx","TabBarContext","Provider","value"],"mappings":"ynCAmEa,MAAAA,EAAcC,EAAUA,YACnC,CACEC,EACAC,KAEA,MAAMC,SACJA,EAAQC,SACRA,EAAQC,SACRA,EAAQC,UACRA,EAASC,KACTA,EACA,aAAcC,EACd,kBAAmBC,GACjBR,EAEES,EAAUC,SAAuB,OAEjCC,UAAEA,EAASC,cAAEA,IC9DQC,ED8DoB,CAC7CC,MAAOC,EAAMA,OAACC,WACdC,KAAM,SACNd,WACAC,WACAc,IAAKT,EACLJ,YACAC,OACAJ,YCrEGiB,EAAAA,UAAUN,IADb,IAAyBA,EDuF3B,OAbAO,EAAmBA,oBAACnB,GAAiB,KAAO,CAC1CoB,MAAO,KACDZ,EAAQa,SACVb,EAAQa,QAAQD,OACjB,EAEHE,KAAM,KACAd,EAAQa,SACVb,EAAQa,QAAQC,MACjB,MAKHC,MAACC,EAAaA,cAACC,SAAS,CAAAC,MAAOf,EAAaV,SAC1CsB,EAAAA,wBAAiBjB,EAAS,kBAAmBC,KAAoBG,WAC9DT,KAGL"}