{"version":3,"file":"BaseButton-19a622bc.js","sources":["../../src/UNSAFE_BaseButton/BaseButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { usePressClick } from '../hooks/UNSAFE_usePressClick';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useColorScheme } from '../hooks/UNSAFE_useColorScheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { BaseButtonVariantOptions } from './themes/BaseButtonStyles.css';\nimport { BaseButtonRedwoodTheme } from './themes/redwood/BaseButtonTheme';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\n\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\n\nexport type ActionDetail = {\n  reason: 'pointer' | 'keyboard';\n};\n\ntype BaseButtonElementDetails =\n  | {\n      type: 'button';\n      buttonType?: 'button' | 'submit';\n      isFocusable?: never;\n      isLabel?: never;\n      isSwitch?: boolean;\n    }\n  | {\n      type: 'a';\n      buttonType?: never;\n      href: string;\n      target?: string;\n      rel?: string;\n      isFocusable?: never;\n      isLabel?: never;\n      isSwitch?: never;\n    }\n  | {\n      type: 'span';\n      buttonType?: never;\n      isFocusable?: boolean;\n      isLabel?: boolean;\n      isSwitch?: boolean;\n    };\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'title'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n  | 'onKeyDown'\n>;\nexport type StylingOptions =\n  | 'default'\n  | 'min'\n  | 'embedded'\n  | 'container'\n  | 'unstyled'\n  | 'fill'\n  | 'noBorderRadiusEnd'\n  | 'noBorderRadiusStart'\n  | 'noBorderEnd'\n  | 'noBorderStart'\n  | 'active'\n  | 'selected'\n  | 'buttonSetItem'\n  | 'trailingItem'\n  | 'widthEqual'\n  | 'hiddenLabel'\n  | 'noHoverActive'\n  | 'widthAuto';\n\ntype AriaProps = {\n  'aria-label'?: string;\n  'aria-hidden'?: boolean;\n  'aria-expanded'?: boolean;\n  'aria-roledescription'?: string;\n  'aria-describedby'?: string;\n  'aria-haspopup'?: HTMLAttributesSignalExcluded['aria-haspopup'];\n  'aria-pressed'?: boolean;\n  'aria-checked'?: boolean;\n  'aria-live'?: 'polite' | 'assertive' | 'off';\n};\n\nexport type Props = IntrinsicProps &\n  AriaProps &\n  DimensionProps &\n  TestIdProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button be read-only.\n     */\n    isReadOnly?: boolean;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifies if Button should use only a click handler, not keyup/down, ptr up/down\n     */\n    isClick?: boolean;\n\n    /**\n     *\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variation.  Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * The size indicates how large the button is rendered: 'xs', \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right: \"bottom\" or \"none\" (default).\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * Styling can be used for customizing buttons by removing label padding (\"min\") or\n     * removing all styling (\"unstyled\").\n     */\n    styling?: StylingOptions[];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: (details: ActionDetail) => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: BaseButtonElementDetails;\n  };\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().hoverSupport === 'events';\n\nconst roleProps = (\n  elType: string,\n  hidden: boolean,\n  isFocusable: boolean,\n  isLabel: boolean,\n  isSwitch: boolean\n): { role?: HTMLAttributesSignalExcluded['role'] } => {\n  switch (elType) {\n    case 'link':\n      return { role: 'link' };\n    case 'button':\n      return isSwitch ? { role: 'switch' } : {};\n    case 'span':\n      return isLabel\n        ? {}\n        : hidden\n        ? { role: 'none' }\n        : isFocusable\n        ? isSwitch\n          ? { role: 'switch' }\n          : { role: 'button' }\n        : { role: 'img' };\n    default:\n      return hidden ? { role: 'none' } : isFocusable ? { role: 'button' } : { role: 'img' };\n  }\n};\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant,\n      isReadOnly = false,\n      isDisabled = false,\n      isRepeat = false,\n      isClick,\n      size,\n      elementDetails = { type: 'button', buttonType: 'button' },\n      styling = ['default'],\n      edge = 'none',\n      'aria-label': accessibleLabel,\n      'aria-hidden': ariaHidden,\n      'aria-expanded': ariaExpanded,\n      'aria-roledescription': ariaRoledescription,\n      'aria-haspopup': ariaHasPopup,\n      'aria-describedby': ariaDescribedBy,\n      'aria-pressed': ariaPressed,\n      'aria-checked': ariaChecked,\n      'aria-live': ariaLive,\n      testId,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      onKeyDown,\n      ...props\n    }: Props,\n    ref?:\n      | ForwardedRef<HTMLButtonElement>\n      | ForwardedRef<HTMLAnchorElement>\n      | ForwardedRef<HTMLSpanElement>\n  ) => {\n    const pressHandler = (e: Event) => {\n      if (props.onAction) {\n        props.onAction({\n          reason: e.type == 'keyup' ? 'keyboard' : 'pointer'\n        });\n      }\n    };\n\n    const { pressProps } = usePress(pressHandler, {\n      isDisabled: isDisabled || isReadOnly,\n      isRepeat\n    });\n    const { pressProps: pressClickProps } = usePressClick(pressHandler, {\n      isDisabled: isDisabled || isReadOnly\n    });\n\n    const isStyled = (name: StylingOptions) => {\n      return styling.indexOf(name) > -1;\n    };\n    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n    const { activeProps, isActive } = useActive({ isDisabled: isReadOnly });\n    const { class: cls, ...styles } = styleInterpolations({\n      ...props,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      onKeyDown\n    });\n    const {\n      type: elementType = 'button',\n      isFocusable: isElementFocusable = true,\n      isLabel: isElementLabel = false,\n      isSwitch: isElementSwitch = false,\n      buttonType = 'button',\n      ...elementProps\n    } = { ...elementDetails };\n    const typeProps =\n      elementType === 'button' && buttonType === 'button' ? { type: buttonType } : {};\n\n    // 'role' should be 'none' when aria-hidden is true or 'img' when false and not focusable\n    const role = roleProps(\n      elementType,\n      ariaHidden ?? false,\n      isElementFocusable,\n      isElementLabel,\n      isElementSwitch\n    );\n    const ElementType = elementDetails.type;\n    const isSpan = ElementType == 'span';\n    const isBaseButton = ElementType == 'button';\n    const { tabbableModeProps } = useTabbableMode(isDisabled);\n    const colorScheme = useColorScheme();\n\n    const { variantClasses } = useComponentTheme<BaseButtonVariantOptions>(BaseButtonRedwoodTheme, {\n      size,\n      variant,\n      unstyled: isStyled('unstyled') ? 'isUnstyled' : 'notUnstyled',\n      embedded: isStyled('embedded') ? 'isEmbedded' : 'notEmbedded',\n      container: isStyled('container') ? 'isContainer' : 'notContainer',\n      noBorderRadiusStart: isStyled('noBorderRadiusStart')\n        ? 'isNoBorderRadiusStart'\n        : 'notNoBorderRadiusStart',\n      noBorderRadiusEnd: isStyled('noBorderRadiusEnd')\n        ? 'isNoBorderRadiusEnd'\n        : 'notNoBorderRadiusEnd',\n      noBorderStart: isStyled('noBorderStart') ? 'isNoBorderStart' : 'notNoBorderStart',\n      noBorderEnd: isStyled('noBorderEnd') ? 'isNoBorderEnd' : 'notNoBorderEnd',\n      activeStyle: isStyled('active') ? 'isActiveStyle' : 'notActiveStyle',\n      selectedStyle: isStyled('selected') ? 'isSelectedStyle' : 'notSelectedStyle',\n      buttonSetItem: isStyled('buttonSetItem') ? 'isButtonSetItem' : 'notButtonSetItem',\n      trailingItem: isStyled('trailingItem') ? 'isTrailingItem' : 'notTrailingItem',\n      fill: isStyled('fill') ? 'isFill' : 'notFill',\n      min: isStyled('min') ? 'isMin' : 'notMin',\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      edge,\n      hybrid: isHybrid ? 'isHybrid' : 'notHybrid',\n      active: isActive ? 'isActive' : 'notActive',\n      hover: isHover ? 'isHover' : 'notHover',\n      span: isSpan ? 'isSpan' : 'notSpan',\n      widthEqual: isStyled('widthEqual') ? 'isWidthEqual' : 'notWidthEqual',\n      widthAuto: isStyled('widthAuto') ? 'isWidthAuto' : 'notWidthAuto',\n      hiddenLabel: isStyled('hiddenLabel') ? 'isHidden' : 'notHidden',\n      noHoverActive: isStyled('noHoverActive') ? 'isNoHoverActive' : 'notNoHoverActive',\n      colorScheme\n    });\n\n    const globalEventProps = {\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      onKeyDown\n    };\n\n    const arDisabled = isBaseButton\n      ? {}\n      : isDisabled\n      ? { 'aria-disabled': isDisabled }\n      : isReadOnly\n      ? { 'aria-disabled': true }\n      : {};\n    const arHaspopups = ariaHasPopup ? { 'aria-haspopup': ariaHasPopup } : {};\n\n    const ariaProps =\n      role.role === 'none'\n        ? {}\n        : {\n            'aria-label': accessibleLabel,\n            'aria-describedby': ariaDescribedBy,\n            'aria-hidden': ariaHidden,\n            'aria-roledescription': ariaRoledescription,\n            'aria-expanded': ariaExpanded,\n            'aria-pressed': ariaPressed,\n            'aria-checked': ariaChecked,\n            'aria-live': ariaLive,\n            ...arDisabled,\n            ...arHaspopups\n          };\n\n    const isClickPress = isClick === undefined ? (isBaseButton ? true : false) : isClick;\n\n    const mergedProps = mergeProps(\n      elementProps,\n      props.onAction ? (isRepeat || isClickPress ? pressClickProps : pressProps) : {},\n      iosProps,\n      hoverProps,\n      isStyled('container') ? {} : activeProps,\n      globalEventProps\n    );\n\n    const wrapperClasses = classNames([cls, variantClasses]);\n    const testIdProps = useTestId(testId);\n\n    const getTabIndex = () => {\n      if (\n        (isSpan && (isElementFocusable === false || isDisabled)) ||\n        (isBaseButton && isDisabled)\n      ) {\n        // no tabIndex value should be defined for disabled button elements and non-focusable or disabled span elements\n        return { tabIndex: undefined };\n      }\n      return tabbableModeProps;\n    };\n\n    return (\n      <ElementType\n        // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.\n        ref={\n          ref as ForwardedRef<HTMLButtonElement> &\n            ForwardedRef<HTMLAnchorElement> &\n            ForwardedRef<HTMLSpanElement>\n        }\n        disabled={isDisabled}\n        class={wrapperClasses}\n        style={styles}\n        autofocus={props['autofocus']}\n        title={props.title}\n        {...ariaProps}\n        {...getTabIndex()}\n        {...typeProps}\n        {...testIdProps}\n        {...mergedProps}\n        {...role}>\n        {props.children}\n      </ElementType>\n    );\n  }\n);\n\nBaseButton.displayName = 'BaseButton';\n"],"names":["interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","iosProps","getClientHints","platform","ontouchstart","isHybrid","hoverSupport","BaseButton","forwardRef","variant","isReadOnly","isDisabled","isRepeat","isClick","size","elementDetails","type","buttonType","styling","edge","accessibleLabel","ariaHidden","ariaExpanded","ariaRoledescription","ariaHasPopup","ariaDescribedBy","ariaPressed","ariaChecked","ariaLive","testId","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","onKeyDown","props","ref","pressHandler","e","onAction","reason","pressProps","usePress","pressClickProps","usePressClick","isStyled","name","indexOf","hoverProps","isHover","useHover","activeProps","isActive","useActive","class","cls","styles","elementType","isFocusable","isElementFocusable","isLabel","isElementLabel","isSwitch","isElementSwitch","elementProps","typeProps","role","elType","hidden","roleProps","ElementType","isSpan","isBaseButton","tabbableModeProps","useTabbableMode","colorScheme","useColorScheme","variantClasses","useComponentTheme","BaseButtonRedwoodTheme","unstyled","embedded","container","noBorderRadiusStart","noBorderRadiusEnd","noBorderStart","noBorderEnd","activeStyle","selectedStyle","buttonSetItem","trailingItem","fill","min","disabled","hybrid","active","hover","span","widthEqual","widthAuto","hiddenLabel","noHoverActive","globalEventProps","arDisabled","arHaspopups","ariaProps","isClickPress","undefined","mergedProps","mergeProps","wrapperClasses","classNames","testIdProps","useTestId","_jsx","style","autofocus","title","tabIndex","children","displayName"],"mappings":"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"}