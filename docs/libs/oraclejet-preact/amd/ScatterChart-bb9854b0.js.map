{"version":3,"file":"ScatterChart-bb9854b0.js","sources":["../../src/UNSAFE_ScatterChart/ScatterChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ScatterChartProps, ScatterItem } from './scatterChart.types';\nimport { findNearestDataPoint } from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { getMarkers, getSeriesData } from '#utils/PRIVATE_chartUtils/utils';\nimport { MarkersWithLabel } from '#PRIVATE_Chart/MarkersWithLabel';\nimport { getLineAreaChartNavUtil } from '#utils/PRIVATE_chartUtils/navUtils';\nimport { Chart } from '#PRIVATE_Chart';\nimport { Scale, TimeAxisProps } from '#utils/UNSAFE_visTypes/chart';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getColorRamp } from '#utils/UNSAFE_visUtils';\nimport { Point } from '#utils/PRIVATE_visSVGUtils';\nimport { getLineAreaSegments } from '#utils/PRIVATE_chartUtils/utils';\nimport { getItemColor, getMarkerType } from '#utils/PRIVATE_chartUtils/dataStyleUtils';\nimport { LineSeries } from '#PRIVATE_LineAreaComponents/LineSeries';\n\nconst AXIS_OFFSET = 0.2;\n\n/**\n * Scatter charts define data items using x and y values, making them useful for viewing relationships between 2 dimensions.\n */\nexport function ScatterChart<K extends string | number, D extends ScatterItem<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataLabelEffect = 'outline',\n  lineType = 'none',\n  ...props\n}: ScatterChartProps<K, D>) {\n  const { direction, forcedColors } = useUser();\n  const isHighContrast = forcedColors === 'active';\n  const isTestEnv = props.testId !== undefined;\n  const isRtl = direction === 'rtl';\n  const isLog = yAxis?.scale === 'log';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const hiddenSet = new Set(hiddenIds);\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const isHoriz = orientation === 'horizontal';\n  const colors = getColorRamp();\n  const renderedSeries = getSeriesData<K, D>(\n    series?.length,\n    groups?.length,\n    getDataItem,\n    hiddenSet,\n    isLog\n  );\n\n  const renderedGetDataItem = (seriesIndex: number, groupIndex: number): D | undefined =>\n    getDataItem(seriesIndex, groupIndex);\n\n  const getGapRatio = () => {\n    return 1;\n  };\n\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    // TODO: JET-71301\n    return getLineAreaChartNavUtil<D>(\n      getDataItem,\n      series.length,\n      startIndex,\n      endIndex,\n      false,\n      isRtl,\n      isHoriz\n    );\n  };\n\n  const getDataItemPos = (xScale: Scale, yScale: Scale) => {\n    return (seriesIndex: number, groupIndex: number) => {\n      // Scatter shouldn't create renderedSeries. Can filter for hidden item here.\n      // TODO: JET-71332\n      const item = renderedSeries[seriesIndex][groupIndex] as { x: number; y: number };\n      if (item?.x == null && item?.y) {\n        return;\n      }\n      const x = xScale.transform(item?.x!);\n      const y = yScale.transform(item?.y!);\n      return { x, y, height: 0, width: 0 };\n    };\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    return {\n      color: getItemColor(seriesIndex, groupIndex, series, getDataItem),\n      type: getMarkerType(seriesIndex, groupIndex, getDataItem)\n    };\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale) => {\n    const getSeriesDataInfo = () => {\n      return {\n        offset: 0,\n        dataWidth: 0\n      };\n    };\n\n    const getYCoord = (value: number, yScale: Scale) => {\n      return yScale.transform(value);\n    };\n\n    return findNearestDataPoint<K, D>(\n      series,\n      groups,\n      xScale,\n      yScale,\n      renderedGetDataItem,\n      false,\n      getSeriesDataInfo,\n      getYCoord,\n      isLog,\n      0,\n      hiddenSet,\n      timeAxisType\n    );\n  };\n  const markers = getMarkers();\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      overview=\"off\"\n      defaultOverviewContentRenderer={() => null}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      getDataItem={getDataItem}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getMarkerInfo={getMarkerColorAndType}\n      renderGridLinesInFront={true}\n      isDataXAxis={true}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      offset={AXIS_OFFSET}\n      isRtl={isRtl}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        isPointInsideMarquee,\n        defaultFontSize,\n        getTextDimensions\n      }) => {\n        return (\n          <>\n            {renderedSeries.map((lineAreaSeries, index) => {\n              if (lineAreaSeries.length === 0) {\n                /* TODO: need a better way to handle when a series is hidden. */\n                return;\n              }\n              const seriesItem = series[index];\n              const isLineRendered = lineType !== 'none';\n              const lineSegmentCoords: Point[][] = getLineAreaSegments<K, D>(\n                yScale,\n                xScale,\n                lineAreaSeries,\n                xStartIndex,\n                xEndIndex,\n                isHoriz,\n                isLog,\n                groups,\n                index,\n                renderedGetDataItem,\n                timeAxisType,\n                true\n              );\n\n              const isHighlighted =\n                highlightedIds === undefined ||\n                highlightedIds.length === 0 ||\n                highlightedSet.has(seriesItem.id);\n\n              return (\n                <>\n                  {isLineRendered && (\n                    <LineSeries\n                      lineType={lineType}\n                      /* TODO: confirm with UX if this is contrastLine (changes depending on dark/light mode) or always white. \n                        It's always white in legacy.*/\n                      lineColor={seriesItem.lineColor}\n                      /* The area generated in legacy are bit apart and not touching when stacked. Preact areas are a bit closer than legacy when curved. \n                      Increased the contrast linewidth (to 2.5 from legacy 1.25) to give legacy visual treatment.\n                      TODO: investivage why legacy areas are not touching. maybe we want to do the same in preact svg utils that\n                      generates this curve.\n                     */\n                      lineWidth={seriesItem.lineWidth}\n                      lineStyle={seriesItem.lineStyle}\n                      color={seriesItem.lineColor || colors[index % colors.length]}\n                      lineSegmentCoords={lineSegmentCoords}\n                      isHorizontal={isHoriz}\n                      isHighlighted={isHighlighted}\n                      seriesIndex={index}\n                    />\n                  )}\n                  <MarkersWithLabel\n                    yScale={yScale}\n                    xScale={xScale}\n                    groups={groups}\n                    series={seriesItem}\n                    timeAxisType={timeAxisType}\n                    color={\n                      seriesItem.lineColor ||\n                      colors[\n                        index % colors.length\n                      ] /* TODO : make this use getItemColor function from dataStyleUtils. */\n                    }\n                    seriesIndex={index}\n                    startIndex={xStartIndex}\n                    endIndex={xEndIndex}\n                    markerType={markers[index % markers.length]}\n                    orientation={orientation}\n                    isLog={isLog}\n                    activeId={activeId}\n                    getDataItem={getDataItem}\n                    isPointInsideMarquee={isPointInsideMarquee}\n                    selectedIds={selectedSet}\n                    highlightedIds={highlightedIds !== undefined ? highlightedSet : undefined}\n                    focusedItemIndex={\n                      focusedItemInfo.seriesIndex === index &&\n                      focusedItemInfo.isFocusVisible &&\n                      !(props.isDataCursorEnabled && props.dataCursorStyle?.isMarkerDisplayed)\n                        ? focusedItemInfo.groupIndex\n                        : undefined\n                    }\n                    hoveredItemIndex={\n                      hoveredItemInfo?.isCurrent && hoveredItemInfo.seriesIndex === index\n                        ? hoveredItemInfo.groupIndex\n                        : undefined\n                    }\n                    isSelectionEnabled={selectionMode === 'single' || selectionMode === 'multiple'}\n                    isDrillEnabled={drilling === 'on'}\n                    defaultFontSize={defaultFontSize}\n                    dataLabelEffect={dataLabelEffect}\n                    isHighContrast={isHighContrast}\n                    isTestEnv={isTestEnv}\n                    isDataXAxis={true}\n                    getTextDimensions={getTextDimensions}\n                  />\n                </>\n              );\n            })}\n          </>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["width","height","selectedIds","hiddenIds","highlightedIds","hideAndShowBehavior","orientation","yAxis","series","groups","getDataItem","selectionMode","drilling","dataLabelEffect","lineType","props","direction","forcedColors","useUser","isHighContrast","isTestEnv","undefined","testId","isRtl","isLog","scale","timeAxisType","xAxis","hiddenSet","Set","selectedSet","highlightedSet","isHoriz","colors","getColorRamp","renderedSeries","getSeriesData","length","renderedGetDataItem","seriesIndex","groupIndex","markers","getMarkers","_jsx","Chart","overview","defaultOverviewContentRenderer","findNearest","xScale","yScale","findNearestDataPoint","offset","dataWidth","value","transform","getDataItemPos","item","x","y","getMarkerInfo","color","getItemColor","type","getMarkerType","renderGridLinesInFront","isDataXAxis","getNavUtil","startIndex","endIndex","getLineAreaChartNavUtil","getGapRatio","children","xStartIndex","xEndIndex","activeId","focusedItemInfo","hoveredItemInfo","isPointInsideMarquee","defaultFontSize","getTextDimensions","jsx","_Fragment","Fragment","map","lineAreaSeries","index","seriesItem","isLineRendered","lineSegmentCoords","getLineAreaSegments","isHighlighted","has","id","_jsxs","jsxs","LineSeries","lineColor","lineWidth","lineStyle","isHorizontal","MarkersWithLabel","markerType","focusedItemIndex","isFocusVisible","isDataCursorEnabled","dataCursorStyle","isMarkerDisplayed","hoveredItemIndex","isCurrent","isSelectionEnabled","isDrillEnabled"],"mappings":"+RA2BM,UAA4EA,MAChFA,EAAKC,OACLA,EAAMC,YACNA,EAAc,GAAEC,UAChBA,EAAY,GAAEC,eACdA,EAAcC,oBACdA,EAAsB,OAAMC,YAC5BA,EAAc,WAAUC,MACxBA,EAAKC,OACLA,EAAMC,OACNA,EAAMC,YACNA,EAAWC,cACXA,EAAgB,OAAMC,SACtBA,EAAW,MAAKC,gBAChBA,EAAkB,UAASC,SAC3BA,EAAW,UACRC,IAEH,MAAMC,UAAEA,EAASC,aAAEA,GAAiBC,EAAOA,UACrCC,EAAkC,WAAjBF,EACjBG,OAA6BC,IAAjBN,EAAMO,OAClBC,EAAsB,QAAdP,EACRQ,EAAyB,QAAjBjB,GAAOkB,MACfC,EAAgBX,EAAMY,OAAyBD,aAC/CE,EAAY,IAAIC,IAAI1B,GACpB2B,EAAc,IAAID,IAAI3B,GACtB6B,EAAiB,IAAIF,IAAIzB,GACzB4B,EAA0B,eAAhB1B,EACV2B,EAASC,EAAAA,eACTC,EAAiBC,gBACrB5B,GAAQ6B,OACR5B,GAAQ4B,OACR3B,EACAkB,EACAJ,GAGIc,EAAsB,CAACC,EAAqBC,IAChD9B,EAAY6B,EAAaC,GAmErBC,EAAUC,EAAAA,aAChB,OACEC,EAAAA,IAACC,EAAAA,MAAK,CACJ5C,MAAOA,EACPC,OAAQA,EACRC,YAAa4B,EACb3B,UAAWA,EACXE,oBAAqBA,EACrBC,YAAaA,EACbC,MAAOA,EACPC,OAAQA,EACRC,OAAQA,EACRoC,SAAS,MACTC,+BAAgC,IAAM,KACtCnC,cAAeA,EACfC,SAAUA,EACVF,YAAaA,EACbqC,YA5CgB,CAACC,EAAeC,IAY3BC,EAAoBA,qBACzB1C,EACAC,EACAuC,EACAC,EACAX,GACA,GAjBwB,KACjB,CACLa,OAAQ,EACRC,UAAW,MAIG,CAACC,EAAeJ,IACzBA,EAAOK,UAAUD,IAYxB7B,EACA,EACAI,EACAF,GAqBA6B,eAlEmB,CAACP,EAAeC,IAC9B,CAACV,EAAqBC,KAG3B,MAAMgB,EAAOrB,EAAeI,GAAaC,GACzC,GAAe,MAAXgB,GAAMC,GAAaD,GAAME,EAC3B,OAIF,MAAO,CAAED,EAFCT,EAAOM,UAAUE,GAAMC,GAErBC,EADFT,EAAOK,UAAUE,GAAME,GAClBzD,OAAQ,EAAGD,MAAO,EAAG,EAyDpC2D,cArD0B,CAACpB,EAAqBC,KAC3C,CACLoB,MAAOC,EAAAA,aAAatB,EAAaC,EAAYhC,EAAQE,GACrDoD,KAAMC,EAAaA,cAACxB,EAAaC,EAAY9B,KAmD7CsD,wBAAwB,EACxBC,aAAa,EACbC,WAnFyB,CAACC,EAAoBC,IAEzCC,EAAuBA,wBAC5B3D,EACAF,EAAO6B,OACP8B,EACAC,GACA,EACA7C,EACAS,GA2EAsC,YAxFgB,IACX,EAwFLnB,OAtIc,GAuId5B,MAAOA,KACHR,EACHwD,SAAA,EACCC,cACAC,YACAzB,SACAC,SACAyB,WACAC,kBACAC,kBACAC,uBACAC,kBACAC,uBAGEpC,EACGqC,IAAAC,EAAAC,SAAA,CAAAX,SAAApC,EAAegD,KAAI,CAACC,EAAgBC,KACnC,GAA8B,IAA1BD,EAAe/C,OAEjB,OAEF,MAAMiD,EAAa9E,EAAO6E,GACpBE,EAA8B,SAAbzE,EACjB0E,EAA+BC,EAAAA,oBACnCxC,EACAD,EACAoC,EACAZ,EACAC,EACAzC,EACAR,EACAf,EACA4E,EACA/C,EACAZ,GACA,GAGIgE,OACerE,IAAnBjB,GAC0B,IAA1BA,EAAeiC,QACfN,EAAe4D,IAAIL,EAAWM,IAEhC,OACEC,EACGC,KAAAb,WAAA,CAAAV,SAAA,CAAAgB,GACC5C,MAACoD,EAAAA,WAAU,CACTjF,SAAUA,EAGVkF,UAAWV,EAAWU,UAMtBC,UAAWX,EAAWW,UACtBC,UAAWZ,EAAWY,UACtBtC,MAAO0B,EAAWU,WAAa/D,EAAOoD,EAAQpD,EAAOI,QACrDmD,kBAAmBA,EACnBW,aAAcnE,EACd0D,cAAeA,EACfnD,YAAa8C,IAGjB1C,EAAAA,IAACyD,EAAAA,kBACCnD,OAAQA,EACRD,OAAQA,EACRvC,OAAQA,EACRD,OAAQ8E,EACR5D,aAAcA,EACdkC,MACE0B,EAAWU,WACX/D,EACEoD,EAAQpD,EAAOI,QAGnBE,YAAa8C,EACblB,WAAYK,EACZJ,SAAUK,EACV4B,WAAY5D,EAAQ4C,EAAQ5C,EAAQJ,QACpC/B,YAAaA,EACbkB,MAAOA,EACPkD,SAAUA,EACVhE,YAAaA,EACbmE,qBAAsBA,EACtB3E,YAAa4B,EACb1B,oBAAmCiB,IAAnBjB,EAA+B2B,OAAiBV,EAChEiF,iBACE3B,EAAgBpC,cAAgB8C,IAChCV,EAAgB4B,gBACdxF,EAAMyF,qBAAuBzF,EAAM0F,iBAAiBC,uBAElDrF,EADAsD,EAAgBnC,WAGtBmE,iBACE/B,GAAiBgC,WAAahC,EAAgBrC,cAAgB8C,EAC1DT,EAAgBpC,gBAChBnB,EAENwF,mBAAsC,WAAlBlG,GAAgD,aAAlBA,EAClDmG,eAA6B,OAAblG,EAChBkE,gBAAiBA,EACjBjE,gBAAiBA,EACjBM,eAAgBA,EAChBC,UAAWA,EACX6C,aAAa,EACbc,kBAAmBA,MAGvB,OAOhB"}