{"version":3,"file":"usePieChartNav-db1fd7a7.js","sources":["../../src/hooks/PRIVATE_usePieChartNav/usePieChartNav.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { getRandomId } from '../../utils/PRIVATE_visLayoutUtils';\nimport { cancelEvent } from '../../utils/UNSAFE_visUtils';\nimport { useVisHover } from '#hooks/PRIVATE_useVisHover';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\nexport type ItemInfo = {\n  isFocusVisible?: boolean;\n  itemIndex: number;\n};\n\ntype Props = {\n  touchResponse: 'touchStart' | 'touchHold';\n  getNextChartItem: (\n    info: ItemInfo,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ) => ItemInfo;\n};\n\nexport const getItemInfo = (event: Event) => {\n  const itemIndex = (event.target as HTMLElement).dataset['ojItemIndex'];\n  if (itemIndex) {\n    return {\n      itemIndex: parseInt(itemIndex, 10)\n    };\n  }\n  return;\n};\n\n/**\n * Hook to handle chart navigation. This can be shared between the pie, funnel and pyramid chart\n * as they follow similar navigation pattern.\n * TODO: rename\n */\nexport function usePieChartNav({ touchResponse, getNextChartItem }: Props) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo>({\n    itemIndex: 0\n  });\n\n  const [hoveredItemInfo, setHoveredItemInfo] = useState<ItemInfo>();\n  const activeId = useRef<string>();\n\n  const updateFocusedItemInfo = (itemInfo: ItemInfo) => {\n    if (\n      itemInfo.itemIndex !== focusedItemInfo.itemIndex ||\n      itemInfo.isFocusVisible !== focusedItemInfo.isFocusVisible\n    ) {\n      setfocusedItemInfo(itemInfo);\n      setHoveredItemInfo(undefined);\n    }\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    const info = getItemInfo(event);\n    if (info) {\n      updateFocusedItemInfo({ ...info, isFocusVisible: false });\n    }\n  };\n\n  const onHover = (event: PointerEvent) => {\n    const info = getItemInfo(event);\n    if (info?.itemIndex != hoveredItemInfo?.itemIndex) {\n      setHoveredItemInfo(info);\n      activeId.current = getRandomId();\n    } else if (!info) {\n      activeId.current = undefined;\n    }\n  };\n\n  const onHoverLeave = () => {\n    setHoveredItemInfo(undefined);\n    activeId.current = undefined;\n  };\n\n  const hoverHandlers = useVisHover(onHover, undefined, onHoverLeave, touchResponse);\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown': {\n        const info = getNextChartItem(focusedItemInfo, 'ArrowDown');\n        updateFocusedItemInfo({ ...info, isFocusVisible: true });\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowUp': {\n        const info = getNextChartItem(focusedItemInfo, 'ArrowUp');\n        updateFocusedItemInfo({ ...info, isFocusVisible: true });\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowLeft': {\n        const info = getNextChartItem(focusedItemInfo, 'ArrowLeft');\n        updateFocusedItemInfo({ ...info, isFocusVisible: true });\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowRight': {\n        const info = getNextChartItem(focusedItemInfo, 'ArrowRight');\n        updateFocusedItemInfo({ ...info, isFocusVisible: true });\n        cancelEvent(event);\n        break;\n      }\n    }\n    activeId.current = getRandomId();\n  };\n\n  const onKeyUp = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (key === 'Tab') {\n      updateFocusedItemInfo({ ...focusedItemInfo, isFocusVisible: true });\n    }\n  };\n\n  const onBlur = () => {\n    updateFocusedItemInfo({\n      ...focusedItemInfo,\n      isFocusVisible: false\n    });\n  };\n\n  return {\n    focusedItemInfo,\n    hoveredItemInfo,\n    activeId: activeId.current,\n    navProps: mergeProps(hoverHandlers, {\n      onKeyDown,\n      onKeyUp,\n      onPointerUp,\n      onBlur\n    })\n  };\n}\n"],"names":["getItemInfo","event","itemIndex","target","dataset","parseInt","touchResponse","getNextChartItem","focusedItemInfo","setfocusedItemInfo","useState","hoveredItemInfo","setHoveredItemInfo","activeId","useRef","updateFocusedItemInfo","itemInfo","isFocusVisible","undefined","hoverHandlers","useVisHover","info","current","getRandomId","navProps","mergeProps","onKeyDown","key","cancelEvent","onKeyUp","onPointerUp","onBlur"],"mappings":"iMA2BO,MAAMA,EAAeC,IAC1B,MAAMC,EAAaD,EAAME,OAAuBC,QAAqB,YACrE,GAAIF,EACF,MAAO,CACLA,UAAWG,SAASH,EAAW,IAG5B,6BAQsBI,cAAEA,EAAaC,iBAAEA,IAC9C,MAAOC,EAAiBC,GAAsBC,WAAmB,CAC/DR,UAAW,KAGNS,EAAiBC,GAAsBF,EAAQA,WAChDG,EAAWC,EAAAA,SAEXC,EAAyBC,IAE3BA,EAASd,YAAcM,EAAgBN,WACvCc,EAASC,iBAAmBT,EAAgBS,iBAE5CR,EAAmBO,GACnBJ,OAAmBM,GACpB,EAyBGC,EAAgBC,EAAAA,aAfLnB,IACf,MAAMoB,EAAOrB,EAAYC,GACrBoB,GAAMnB,WAAaS,GAAiBT,WACtCU,EAAmBS,GACnBR,EAASS,QAAUC,EAAAA,eACTF,IACVR,EAASS,aAAUJ,EACpB,QAQwCA,GALtB,KACnBN,OAAmBM,GACnBL,EAASS,aAAUJ,CAAS,GAGsCZ,GAiDpE,MAAO,CACLE,kBACAG,kBACAE,SAAUA,EAASS,QACnBE,SAAUC,EAAUA,WAACN,EAAe,CAClCO,UApDezB,IAEjB,OADYA,EAAM0B,KAEhB,IAAK,MACH,OACF,IAAK,YAAa,CAChB,MAAMN,EAAOd,EAAiBC,EAAiB,aAC/CO,EAAsB,IAAKM,EAAMJ,gBAAgB,IACjDW,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,UAAW,CACd,MAAMoB,EAAOd,EAAiBC,EAAiB,WAC/CO,EAAsB,IAAKM,EAAMJ,gBAAgB,IACjDW,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,YAAa,CAChB,MAAMoB,EAAOd,EAAiBC,EAAiB,aAC/CO,EAAsB,IAAKM,EAAMJ,gBAAgB,IACjDW,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,aAAc,CACjB,MAAMoB,EAAOd,EAAiBC,EAAiB,cAC/CO,EAAsB,IAAKM,EAAMJ,gBAAgB,IACjDW,EAAWA,YAAC3B,GACZ,KACD,EAEHY,EAASS,QAAUC,EAAAA,aAAa,EAuB9BM,QApBa5B,IAEH,QADAA,EAAM0B,KAEhBZ,EAAsB,IAAKP,EAAiBS,gBAAgB,GAC7D,EAiBCa,YA9EiB7B,IACnB,MAAMoB,EAAOrB,EAAYC,GACrBoB,GACFN,EAAsB,IAAKM,EAAMJ,gBAAgB,GAClD,EA2ECc,OAfW,KACbhB,EAAsB,IACjBP,EACHS,gBAAgB,GAChB,IAcN"}