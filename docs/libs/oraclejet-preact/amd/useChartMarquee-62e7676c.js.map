{"version":3,"file":"useChartMarquee-62e7676c.js","sources":["../../src/hooks/PRIVATE_useChartMarquee/utils.ts","../../src/hooks/PRIVATE_useChartMarquee/DragModeControls.tsx","../../src/hooks/PRIVATE_useChartMarquee/Marquee.tsx","../../src/hooks/PRIVATE_useChartMarquee/useChartMarquee.tsx","../../src/hooks/PRIVATE_useChartMarquee/useDragModeControls.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Scale } from '../../utils/UNSAFE_visTypes/chart';\n\nexport function getResolvedDragMode(\n  isZoomAndScroll: boolean,\n  isMultiSelection: boolean,\n  isMobile: boolean,\n  dragMode: 'off' | 'pan' | 'zoom' | 'user' | 'select'\n): 'zoom' | 'select' | 'pan' | 'off' {\n  if (\n    (!isMultiSelection && dragMode === 'select') ||\n    (!isZoomAndScroll && dragMode === 'zoom') ||\n    dragMode === 'off'\n  ) {\n    return 'off';\n  }\n\n  if (dragMode === 'user') {\n    if (isMobile) {\n      return isZoomAndScroll ? 'pan' : isMultiSelection ? 'select' : 'off';\n    }\n\n    if (!isZoomAndScroll && isMultiSelection) {\n      return isMobile ? 'select' : 'off';\n    }\n\n    if (!isZoomAndScroll && !isMultiSelection) {\n      return 'off';\n    }\n\n    return 'pan';\n  }\n\n  return dragMode;\n}\n\nexport function isPanButtonVisible(\n  isZoomAndScroll: boolean,\n  dragMode: 'off' | 'pan' | 'zoom' | 'user' | 'select',\n  isMobile: boolean\n) {\n  if (!isMobile || !isZoomAndScroll) {\n    return false;\n  }\n\n  return dragMode !== 'select' && dragMode !== 'off';\n}\n\nexport function isZoomButtonVisible(\n  isZoomAndScroll: boolean,\n  isMobile: boolean,\n  dragMode: 'zoom' | 'select' | 'pan' | 'off' | 'user'\n) {\n  if (isMobile || !isZoomAndScroll) {\n    return false;\n  }\n\n  return dragMode === 'user';\n}\n\nexport function isSelectButtonVisible(\n  isMobile: boolean,\n  isMultiSelection: boolean,\n  isZoomAndScroll: boolean,\n  dragMode: 'zoom' | 'select' | 'pan' | 'user' | 'off'\n) {\n  if (!isMultiSelection) {\n    return false;\n  }\n  if (!isMobile && !isZoomAndScroll && isMultiSelection) {\n    return false;\n  }\n\n  return isMobile ? true : dragMode === 'user';\n}\n\nexport function getMarqueeDims(\n  xScale: Scale,\n  initialPoint: { x: number; y: number } | undefined,\n  finalPoint: { x: number; y: number } | undefined\n) {\n  if (initialPoint && finalPoint) {\n    const x1 = Math.min(initialPoint.x, finalPoint.x);\n    const x2 = Math.max(initialPoint.x, finalPoint.x);\n\n    const y1 = Math.min(initialPoint.y, finalPoint.y);\n    const y2 = Math.max(initialPoint.y, finalPoint.y);\n\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n\n    const delta = finalPoint.x - initialPoint.x;\n    const axisDelta = xScale.invert(finalPoint.x) - xScale.invert(initialPoint.x);\n    return {\n      x1,\n      y1,\n      width,\n      height,\n      x2,\n      y2,\n      delta,\n      axisDelta\n    };\n  }\n  return;\n}\n\nexport function getCursorType(\n  currentDragMode: 'zoom' | 'select' | 'pan' | 'off',\n  isPointerDown: boolean\n) {\n  if (currentDragMode === 'zoom' || currentDragMode === 'select') {\n    return 'crosshair';\n  }\n\n  if (currentDragMode === 'pan') {\n    return isPointerDown ? 'grabbing' : 'grab';\n  }\n\n  return;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { ChartMarqueeSelectIcon } from '#PRIVATE_ThemedIcons/ChartMarqueeSelectIcon';\nimport { ChartPanIcon } from '#PRIVATE_ThemedIcons/ChartPanIcon';\nimport { styles } from './themes/useChartMarquee.css';\nimport { useTranslationBundle } from '../UNSAFE_useTranslationBundle';\nimport { BundleType } from '../../resources/nls/bundle';\nimport { ChartZoomIcon } from '#PRIVATE_ThemedIcons/ChartZoomIcon';\nimport { ButtonSetSingle } from '#UNSAFE_ButtonSetSingle';\nimport { ButtonSetItem } from '#UNSAFE_ButtonSetItem';\nimport { IconToggleButton } from '#UNSAFE_IconToggleButton';\n\ntype Props = {\n  divRef: Ref<HTMLDivElement>;\n  position: {\n    top?: string;\n    bottom?: string;\n    right?: string;\n    left?: string;\n  };\n  dragMode?: 'select' | 'zoom' | 'pan';\n  showZoomButton: boolean;\n  showPanButton: boolean;\n  showSelectButton: boolean;\n  onDragModeChange: (mode: 'select' | 'zoom' | 'pan' | undefined) => void;\n};\n\nexport function DragModeControls({\n  position,\n  divRef,\n  dragMode,\n  onDragModeChange,\n  showZoomButton,\n  showPanButton,\n  showSelectButton\n}: Props) {\n  const { right, left, top, bottom } = position;\n  const onButtonAction = ({ value }: { value: 'zoom' | 'pan' | 'select' }) => {\n    onDragModeChange(value === dragMode ? undefined : value);\n  };\n\n  const showOnlyOne =\n    (showPanButton && !showSelectButton && !showZoomButton) ||\n    (!showPanButton && !showSelectButton && showZoomButton) ||\n    (!showPanButton && showSelectButton && !showZoomButton);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const zoomAriaLabel = translations.vis_marqueeZoomTooltip();\n  const panAriaLabel = translations.vis_panTooltip();\n  const selectAriaLabel = translations.vis_marqueeSelectTooltip();\n  return showZoomButton || showPanButton || showSelectButton ? (\n    <div\n      ref={divRef}\n      class={styles.background}\n      style={{\n        right,\n        left,\n        top,\n        bottom\n      }}>\n      {!showOnlyOne ? (\n        <ButtonSetSingle\n          size=\"sm\"\n          value={dragMode}\n          onCommit={onButtonAction as (detail: { value?: string }) => void}\n          display=\"icons\"\n          variant=\"outlined\">\n          {showPanButton && (\n            <ButtonSetItem\n              value=\"pan\"\n              label={panAriaLabel}\n              startIcon={<ChartPanIcon />}></ButtonSetItem>\n          )}\n          {showZoomButton && (\n            <ButtonSetItem\n              value=\"zoom\"\n              label={zoomAriaLabel}\n              startIcon={<ChartZoomIcon />}></ButtonSetItem>\n          )}\n          {showSelectButton && (\n            <ButtonSetItem\n              value=\"select\"\n              label={selectAriaLabel}\n              startIcon={<ChartMarqueeSelectIcon />}></ButtonSetItem>\n          )}\n        </ButtonSetSingle>\n      ) : (\n        <>\n          {showPanButton && (\n            <IconToggleButton\n              accessibleLabel={panAriaLabel}\n              isSelected={dragMode === 'pan'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'pan' ? undefined : 'pan');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartPanIcon />\n            </IconToggleButton>\n          )}\n          {showZoomButton && (\n            <IconToggleButton\n              accessibleLabel={zoomAriaLabel}\n              isSelected={dragMode === 'zoom'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'zoom' ? undefined : 'zoom');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartZoomIcon />\n            </IconToggleButton>\n          )}\n          {showSelectButton && (\n            <IconToggleButton\n              accessibleLabel={selectAriaLabel}\n              isSelected={dragMode === 'select'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'select' ? undefined : 'select');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartMarqueeSelectIcon />\n            </IconToggleButton>\n          )}\n        </>\n      )}\n    </div>\n  ) : null;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from './themes/useChartMarquee.css';\n\ntype Props = {\n  x1: number;\n  y1: number;\n  width: number;\n  height: number;\n};\nexport function Marquee({ x1, y1, width, height }: Props) {\n  return (\n    <>\n      <rect x={x1} y={y1} width={width} height={height} class={styles.visMarquee} />\n      <rect\n        x={x1 + 1}\n        y={y1 + 1}\n        width={Math.max(0, width - 2)}\n        height={Math.max(0, height - 2)}\n        class={styles.visMarqueeInnerArea}\n      />\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { VNode } from 'preact';\nimport { useRef, useState } from 'preact/hooks';\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\nimport { Scale } from '../../utils/UNSAFE_visTypes/chart';\nimport { getResolvedDragMode, getCursorType, getMarqueeDims } from './utils';\nimport { isMobile } from '../../utils/UNSAFE_visUtils/clientUtils';\nimport { useDragModeControls } from './useDragModeControls';\nimport { Marquee } from './Marquee';\nimport { SelectionDetail } from '../PRIVATE_useVisSelection/useSelection';\n\ntype MarqueeProps<K, D> = {\n  chartWidth: number;\n\n  plotAreaSpace: Dimension;\n\n  isZoomScroll: boolean;\n\n  isMultiSelection: boolean;\n\n  onSelectionChange?: (detail: SelectionDetail<K, D>) => void;\n\n  xScale: Scale;\n\n  onViewportChange?: (x: { xMin?: number; yMin?: number; xMax?: number; yMax?: number }) => void;\n\n  dragMode: 'user' | 'select' | 'zoom' | 'pan' | 'off';\n\n  getDataById: (id: K) => D | undefined;\n\n  xAxisExtent: { min: number; max: number };\n\n  selectedIds?: Set<K>;\n\n  viewportMin: number;\n\n  viewportMax: number;\n\n  isRtl: boolean;\n};\n\nexport function useChartMarquee<K, D>({\n  plotAreaSpace,\n  dragMode,\n  chartWidth,\n  isMultiSelection,\n  onViewportChange,\n  isZoomScroll,\n  xAxisExtent,\n  xScale,\n  selectedIds,\n  getDataById,\n  onSelectionChange,\n  viewportMax,\n  viewportMin,\n  isRtl\n}: MarqueeProps<K, D>) {\n  const isHovered = useRef(false);\n\n  const numOfActiveTouches = useRef(0);\n\n  const initialPointRef = useRef<{\n    x: number;\n    y: number;\n    isMeta?: boolean;\n  }>();\n\n  const { dragButtonDivRef, toggleButtonContent, userDragMode } = useDragModeControls({\n    chartWidth,\n    plotAreaSpace,\n    isRtl,\n    isZoomScroll,\n    isMultiSelection,\n    dragMode\n  });\n\n  // for drag --> dragging cursor rerender in pan mode\n  const [isPointerDown, setIsPointerDown] = useState(false);\n\n  const [finalPoint, setFinalPoint] = useState<{ x: number; y: number }>();\n\n  const selectedIdsRef = useRef<Set<K>>(new Set());\n  const isDeviceMobile = isMobile();\n\n  const resolvedDragMode = getResolvedDragMode(\n    isZoomScroll,\n    isMultiSelection,\n    isDeviceMobile,\n    dragMode\n  );\n\n  const mode = dragMode === 'user' && userDragMode ? userDragMode : resolvedDragMode;\n\n  const dims = getMarqueeDims(xScale, initialPointRef.current, finalPoint);\n\n  const onPointerEnter = () => {\n    isHovered.current = true;\n  };\n\n  const onPointerDown = (event: PointerEvent) => {\n    // prevent setIsPointerDown(true) when clicked on button\n    // otherwise the button will disapper before being clicked.\n    if (dragButtonDivRef.current?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    const x = event.offsetX;\n    const y = event.offsetY;\n\n    setIsPointerDown(true);\n\n    if (\n      x < plotAreaSpace.x ||\n      x > plotAreaSpace.x + plotAreaSpace.width ||\n      y < plotAreaSpace.y ||\n      y > plotAreaSpace.y + plotAreaSpace.height\n    ) {\n      return;\n    }\n\n    initialPointRef.current = { x, y };\n  };\n\n  const onPointerLeave = (event: PointerEvent) => {\n    isHovered.current = false;\n    if (dims && isDeviceMobile && mode != 'off') {\n      (event.currentTarget as HTMLElement).setPointerCapture(event.pointerId);\n    }\n  };\n\n  const onPointerMove = (event: PointerEvent) => {\n    if (!isPointerDown) {\n      return;\n    }\n    if (event.metaKey && initialPointRef.current) {\n      initialPointRef.current.isMeta = true;\n    }\n\n    const x = event.offsetX;\n    const y = event.offsetY;\n\n    if (\n      x < plotAreaSpace.x ||\n      x > plotAreaSpace.x + plotAreaSpace.width ||\n      y < plotAreaSpace.y ||\n      y > plotAreaSpace.y + plotAreaSpace.height\n    ) {\n      return;\n    }\n\n    if (\n      mode === 'pan' &&\n      onViewportChange &&\n      (!isDeviceMobile || (isDeviceMobile && numOfActiveTouches.current === 1))\n    ) {\n      const axisDelta =\n        xScale.invert(x) - xScale.invert((finalPoint?.x || initialPointRef.current?.x)!);\n\n      const viewportRange = viewportMax - viewportMin;\n\n      let xMin = viewportMin - axisDelta;\n      let xMax = viewportMax - axisDelta;\n\n      if (xMin < xAxisExtent.min) {\n        xMin = xAxisExtent.min;\n        xMax = xMin + viewportRange;\n      }\n\n      if (xMax > xAxisExtent.max) {\n        xMax = xAxisExtent.max;\n        xMin = xMax - viewportRange;\n      }\n\n      if (xMin != viewportMin && xMax != viewportMax) {\n        onViewportChange({\n          xMin,\n          xMax\n        });\n      }\n    }\n\n    setFinalPoint({ x, y });\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    setIsPointerDown(false);\n    setFinalPoint(undefined);\n    initialPointRef.current = undefined;\n\n    if (dragButtonDivRef.current?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    if (!dims) {\n      return;\n    }\n\n    const { x1, x2 } = dims;\n\n    if (mode === 'zoom') {\n      const xMin = Math.min(xScale.invert(x1), xScale.invert(x2));\n      const xMax = Math.max(xScale.invert(x1), xScale.invert(x2));\n\n      onViewportChange?.({\n        xMin,\n        xMax\n      });\n    }\n\n    if (mode === 'select') {\n      const ids = [\n        ...new Set([\n          ...selectedIdsRef.current,\n          ...(event.metaKey ? selectedIds || new Set<K>() : new Set<K>())\n        ])\n      ];\n      const data = ids.map((id) => getDataById(id));\n      onSelectionChange?.({ ids, data });\n      selectedIdsRef.current = new Set<K>();\n    }\n  };\n\n  // if mode is 'off', we still want to show the toggleButton.\n  // pointerUp will not fire because browser will have already claimed the\n  // pointer\n  const onTouchEnd = (event: TouchEvent) => {\n    setIsPointerDown(false);\n    setFinalPoint(undefined);\n    initialPointRef.current = undefined;\n    numOfActiveTouches.current = event.touches.length;\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    numOfActiveTouches.current = event.touches.length;\n  };\n\n  let marqueeContent: VNode | undefined;\n\n  const isPointInsideMarquee =\n    mode === 'select' && dims\n      ? (id: K, point: { x: number; y: number }) => {\n          if (initialPointRef.current?.isMeta && selectedIds?.has(id)) {\n            return true;\n          }\n          const { x1, x2, y1, y2 } = dims;\n          const { x, y } = point;\n          if (x <= x2 && x >= x1 && y <= y2 && y >= y1) {\n            selectedIdsRef.current?.add(id);\n            return true;\n          } else {\n            selectedIdsRef.current?.delete(id);\n          }\n          return false;\n        }\n      : undefined;\n\n  if (dims && (mode === 'zoom' || mode === 'select')) {\n    marqueeContent = <Marquee {...dims} />;\n  }\n\n  return {\n    cursor: getCursorType(mode, isPointerDown),\n    marqueeContent,\n    toggleButtonContent:\n      !isPointerDown &&\n      ((!isDeviceMobile && isHovered.current) || isDeviceMobile) &&\n      toggleButtonContent,\n    isPointInsideMarquee,\n    dragMode: mode,\n    marqueeProps:\n      dragMode != 'off'\n        ? {\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n            onPointerLeave,\n            onPointerEnter,\n            onTouchEnd,\n            onTouchStart\n          }\n        : {}\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { isPanButtonVisible, isSelectButtonVisible, isZoomButtonVisible } from './utils';\nimport { DragModeControls } from './DragModeControls';\nimport { isMobile } from '#utils/UNSAFE_visUtils/clientUtils';\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\n\ntype Props = {\n  isZoomScroll: boolean;\n  dragMode: 'user' | 'select' | 'zoom' | 'pan' | 'off';\n  isMultiSelection: boolean;\n  plotAreaSpace: Dimension;\n  chartWidth: number;\n  isRtl: boolean;\n};\n\nexport function useDragModeControls({\n  chartWidth,\n  plotAreaSpace,\n  isRtl,\n  isZoomScroll,\n  isMultiSelection,\n  dragMode\n}: Props) {\n  const isDeviceMobile = isMobile();\n\n  const dragButtonDivRef = useRef<HTMLDivElement>(null);\n\n  const showPanButton = isPanButtonVisible(isZoomScroll, dragMode, isDeviceMobile);\n  const showZoomButton = isZoomButtonVisible(isZoomScroll, isDeviceMobile, dragMode);\n  const showSelectButton = isSelectButtonVisible(\n    isDeviceMobile,\n    isMultiSelection,\n    isZoomScroll,\n    dragMode\n  );\n\n  const [userDragMode, setUserDragMode] = useState<'select' | 'zoom' | 'pan' | undefined>(\n    isDeviceMobile && isZoomScroll ? 'pan' : undefined\n  );\n\n  const toggleButtonContent = (\n    <DragModeControls\n      position={{\n        top: `${plotAreaSpace.y}px`,\n        right: isRtl ? undefined : `${chartWidth - plotAreaSpace.x - plotAreaSpace.width}px`,\n        left: isRtl ? `${plotAreaSpace.x}px` : undefined\n      }}\n      divRef={dragButtonDivRef}\n      showSelectButton={showSelectButton}\n      showZoomButton={showZoomButton}\n      showPanButton={showPanButton}\n      dragMode={userDragMode}\n      onDragModeChange={setUserDragMode}\n    />\n  );\n\n  return {\n    dragButtonDivRef,\n    toggleButtonContent,\n    userDragMode\n  };\n}\n"],"names":["getCursorType","currentDragMode","isPointerDown","DragModeControls","position","divRef","dragMode","onDragModeChange","showZoomButton","showPanButton","showSelectButton","right","left","top","bottom","showOnlyOne","translations","useTranslationBundle","zoomAriaLabel","vis_marqueeZoomTooltip","panAriaLabel","vis_panTooltip","selectAriaLabel","vis_marqueeSelectTooltip","_jsx","jsx","ref","class","styles","background","style","children","_jsxs","jsxs","_Fragment","IconToggleButton","accessibleLabel","isSelected","onToggle","undefined","variant","size","ChartPanIcon","ChartZoomIcon","ChartMarqueeSelectIcon","ButtonSetSingle","value","onCommit","display","ButtonSetItem","label","startIcon","SvgMove","SvgButton","Marquee","x1","y1","width","height","x","y","visMarquee","Math","max","visMarqueeInnerArea","plotAreaSpace","chartWidth","isMultiSelection","onViewportChange","isZoomScroll","xAxisExtent","xScale","selectedIds","getDataById","onSelectionChange","viewportMax","viewportMin","isRtl","isHovered","useRef","numOfActiveTouches","initialPointRef","dragButtonDivRef","toggleButtonContent","userDragMode","isDeviceMobile","isMobile","isZoomAndScroll","isPanButtonVisible","isZoomButtonVisible","isSelectButtonVisible","setUserDragMode","useState","useDragModeControls","setIsPointerDown","finalPoint","setFinalPoint","selectedIdsRef","Set","resolvedDragMode","getResolvedDragMode","mode","dims","initialPoint","min","x2","y2","abs","delta","axisDelta","invert","getMarqueeDims","current","marqueeContent","isPointInsideMarquee","id","point","isMeta","has","add","delete","cursor","marqueeProps","onPointerDown","event","contains","target","offsetX","offsetY","onPointerMove","metaKey","viewportRange","xMin","xMax","onPointerUp","ids","data","map","onPointerLeave","currentTarget","setPointerCapture","pointerId","onPointerEnter","onTouchEnd","touches","length","onTouchStart"],"mappings":"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"}