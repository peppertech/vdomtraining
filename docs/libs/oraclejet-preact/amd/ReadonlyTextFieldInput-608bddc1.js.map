{"version":3,"file":"ReadonlyTextFieldInput-608bddc1.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldInput.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport type { TextProps } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport {\n  ReadonlyTextFieldInputVariantOptions,\n  ReadonlyTextFieldInputStyles\n} from './themes/ReadonlyTextFieldInputStyles.css';\nimport { ReadonlyTextFieldInputRedwoodTheme } from './themes/redwood/ReadonlyTextFieldInputTheme';\nimport { BundleType } from '../resources/nls/bundle';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\n\ntype AutoFocusProp = HTMLAttributesSignalExcluded<HTMLInputElement>['autofocus'];\n\ntype ReadonlyAsInputProps = {\n  as: 'input';\n  type: HTMLAttributesSignalExcluded<HTMLInputElement>['type'];\n  elementRef?: Ref<HTMLInputElement>;\n  rows?: never;\n};\n\ntype ReadonlyAsTextAreaProps = {\n  as: 'textarea';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: number;\n};\n\ntype ReadonlyAsDivProps = {\n  as?: 'div';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: never;\n};\n\ntype Props = TextProps &\n  (ReadonlyAsDivProps | ReadonlyAsInputProps | ReadonlyAsTextAreaProps) & {\n    'aria-describedby'?: string;\n    'aria-label'?: string;\n    'aria-labelledby'?: string;\n    autoFocus?: AutoFocusProp;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    id?: HTMLAttributesSignalExcluded<HTMLElement>['id'];\n    inlineUserAssistance?: ComponentChildren;\n    innerReadonlyField?: ComponentChildren;\n    value?: string;\n    variant?: 'textarea';\n  };\n\n/**\n * Merge multiple ids into a space-separated list\n * @param ids The ids to be merged\n * @returns The space separated string of ids\n */\nfunction mergeIDs(...ids: (string | undefined)[]) {\n  return ids.filter(Boolean).join(' ') || undefined;\n}\n\nexport function ReadonlyTextFieldInput({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  'aria-labelledby': inputLabelledBy,\n  autoFocus,\n  as = 'div',\n  elementRef,\n  hasEmptyLabel,\n  hasInsideLabel = false,\n  inlineUserAssistance,\n  innerReadonlyField,\n  rows,\n  type,\n  value = '',\n  variant,\n  ...props\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const loadingAriaLabel = translations.formControl_loading();\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const ariaLabelForReadonly = isLoading ? loadingAriaLabel : ariaLabel;\n\n  // get classes for text align\n  const interpolations = [...Object.values(textInterpolations)];\n  const styleInterpolations = mergeInterpolations<Props>(interpolations);\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n  const { classes: themeClasses } = useComponentTheme<\n    ReadonlyTextFieldInputVariantOptions,\n    ReadonlyTextFieldInputStyles\n  >(ReadonlyTextFieldInputRedwoodTheme, {\n    textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n    formLayout: isFormLayout ? 'isFormLayout' : 'notFormLayout',\n    readonlyForm: isReadonlyForm ? 'isReadonlyForm' : 'notReadonlyForm',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel'\n  });\n\n  const readonlyDivClasses = classNames([themeClasses, styleInterpolationClasses]);\n\n  // JET-52914 - Implement Tabbable mode API contract in InputText\n  // spread tabbableModeProps on component\n  const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n  // JET-52089: add unsafe API for specifying an external label which is added to ariaLabelledBy on the input or div,\n  // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n  // kinds of labels, this helps to ensure we don't override a meaningful label.\n  const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n  const ariaLabelledBy = hasEmptyLabel\n    ? mergeIDs(inputLabelledBy, UNSAFE_ariaLabelledBy)\n    : inputLabelledBy;\n\n  if (as === 'input') {\n    return (\n      <input\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        type={type}\n        value={value}\n        {...(!isTabbable && tabbableModeProps)}\n      />\n    );\n  }\n  if (as === 'textarea') {\n    return (\n      <textarea\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        rows={rows}\n        {...(!isTabbable && tabbableModeProps)}>\n        {value}\n      </textarea>\n    );\n  }\n  return (\n    <div\n      aria-describedby={ariaDescribedBy}\n      aria-label={ariaLabelForReadonly}\n      aria-labelledby={ariaLabelledBy}\n      aria-readonly={true}\n      autofocus={autoFocus}\n      class={readonlyDivClasses}\n      // @ts-ignore\n      ref={elementRef}\n      role=\"textbox\"\n      {...tabbableModeProps}>\n      {value}\n    </div>\n  );\n}\n"],"names":["ariaDescribedBy","ariaLabel","inputLabelledBy","autoFocus","as","elementRef","hasEmptyLabel","hasInsideLabel","inlineUserAssistance","innerReadonlyField","rows","type","value","variant","props","loadingAriaLabel","useTranslationBundle","formControl_loading","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","ariaLabelForReadonly","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","class","styleInterpolationClasses","classes","themeClasses","useComponentTheme","ReadonlyTextFieldInputRedwoodTheme","textarea","formLayout","readonlyForm","insideLabel","readonlyDivClasses","classNames","isTabbable","tabbableModeProps","useTabbableMode","UNSAFE_ariaLabelledBy","useAccessibleContext","ariaLabelledBy","ids","filter","Boolean","join","undefined","mergeIDs","_jsx","autofocus","readonly","ref","role","children"],"mappings":"4hBAkEM,UACJ,mBAAoBA,EACpB,aAAcC,EACd,kBAAmBC,EAAeC,UAClCA,EAASC,GACTA,EAAK,MAAKC,WACVA,EAAUC,cACVA,EAAaC,eACbA,GAAiB,EAAKC,qBACtBA,EAAoBC,mBACpBA,EAAkBC,KAClBA,EAAIC,KACJA,EAAIC,MACJA,EAAQ,GAAEC,QACVA,KACGC,IAEH,MACMC,EADeC,uBAAiC,4BAChBC,uBAChCC,aAAEA,EAAcC,WAAYC,GAAmBC,EAAcA,kBAC7DC,UAAEA,GAAcC,EAAAA,sBAChBC,EAAuBF,EAAYP,EAAmBd,EAGtDwB,EAAiB,IAAIC,OAAOC,OAAOC,EAAAA,qBACnCC,EAAsBC,sBAA2BL,IAC/CM,MAAOC,GAA8BH,EAAoBf,IACzDmB,QAASC,GAAiBC,EAAAA,kBAGhCC,EAAAA,mCAAoC,CACpCC,SAAsB,aAAZxB,EAAyB,aAAe,cAClDyB,WAAYpB,EAAe,eAAiB,gBAC5CqB,aAAcnB,EAAiB,iBAAmB,kBAClDoB,YAAajC,EAAiB,iBAAmB,kBAG7CkC,EAAqBC,EAAUA,WAAC,CAACR,EAAcF,KAI/CW,WAAEA,EAAUC,kBAAEA,GAAsBC,EAAeA,mBAKnDC,sBAAEA,GAA0BC,EAAAA,uBAC5BC,EAAiB1C,EAnDzB,YAAqB2C,GACnB,OAAOA,EAAIC,OAAOC,SAASC,KAAK,WAAQC,CAC1C,CAkDMC,CAASpD,EAAiB4C,GAC1B5C,EAEJ,MAAW,UAAPE,EAEAmD,EAAAA,IACoB,QAAA,CAAA,mBAAAvD,eACNwB,EAAoB,kBACfwB,EACjBQ,UAAWrD,EACX4B,MAAOU,EACPgB,UAAU,EAEVC,IAAKrD,EACLM,KAAMA,EACNC,MAAOA,MACD+B,GAAcC,IAIf,aAAPxC,EAEAmD,EAAAA,IACoB,WAAA,CAAA,mBAAAvD,eACNwB,EAAoB,kBACfwB,EACjBQ,UAAWrD,EACX4B,MAAOU,EACPgB,UAAU,EAEVC,IAAKrD,EACLK,KAAMA,MACAiC,GAAcC,WACnBhC,IAKL2C,EAAAA,IACoB,MAAA,CAAA,mBAAAvD,EACN,aAAAwB,oBACKwB,EAAc,iBAChB,EACfQ,UAAWrD,EACX4B,MAAOU,EAEPiB,IAAKrD,EACLsD,KAAK,aACDf,EACHgB,SAAAhD,GAGP"}