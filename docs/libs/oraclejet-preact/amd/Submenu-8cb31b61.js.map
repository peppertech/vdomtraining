{"version":3,"file":"Submenu-8cb31b61.js","sources":["../../src/UNSAFE_Menu/DropdownSubmenu.tsx","../../src/UNSAFE_Menu/SheetSubmenu.tsx","../../src/UNSAFE_Menu/Submenu.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'preact/compat';\n\nimport { DirectionalExpandArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalExpandArrowIcon';\nimport { useId } from '../hooks/UNSAFE_useId';\n\nimport { BaseMenuItem } from './MenuItem';\nimport { DropdownMenu } from './DropdownMenu';\nimport { useMenuContainerContext } from './useMenuContainerContext';\nimport { SubmenuProps } from './Submenu';\n\nexport const DropdownSubmenu = ({ label, children, startIcon }: SubmenuProps) => {\n  //Id of the submenu that will be used to connect via aria-owns, menuItem with its submenu\n  const submenuId = useId();\n\n  const preProcessedMenuItemID = useId();\n  //MenuItem id\n  const menuItemId = useMemo(\n    () => `oj-menu-item-${preProcessedMenuItemID}`,\n    [preProcessedMenuItemID]\n  );\n\n  const { changeKey, currentKey } = useMenuContainerContext();\n\n  const submenuMenuItemRef = useRef<HTMLAnchorElement | null>(null);\n  const dropdownSubmenuRef = useRef<HTMLDivElement | null>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [currentFocus, setCurrentFocus] = useState<'menu' | 'firstItem' | 'none'>('none');\n\n  useEffect(() => {\n    if (menuItemId !== currentKey) {\n      setIsOpen(false);\n    }\n  }, [currentKey, menuItemId]);\n\n  //This function is used when pressing submenuitem and hovering over it\n  const openSubmenuAction = useCallback((e: Event) => {\n    submenuMenuItemRef.current?.focus();\n    //If not click/touch we set the focus on the first item\n    setIsOpen(true);\n    if (e.type === 'keyup') {\n      setCurrentFocus('firstItem');\n    } else {\n      setCurrentFocus('none');\n    }\n  }, []);\n\n  //TODO: There is a bug in a Icon, once that bug is solved we have to check this again. JET-56980\n  const hoverStatus = useRef<{ recentClose: boolean; pendingUnhover: boolean }>({\n    recentClose: false,\n    pendingUnhover: false\n  });\n\n  return (\n    <>\n      <BaseMenuItem\n        startIcon={startIcon}\n        id={menuItemId}\n        submenuId={submenuId}\n        ref={submenuMenuItemRef}\n        label={label}\n        endIcon={<DirectionalExpandArrowIcon></DirectionalExpandArrowIcon>}\n        type=\"submenu\"\n        role=\"menuitem\"\n        onAction={openSubmenuAction}\n        hoverInfo={{\n          //Specific hover events of submenuItem\n          hoverProps: {\n            onMouseEnter: (e: MouseEvent) => {\n              openSubmenuAction(e);\n            }\n          },\n          hoverStatus\n        }}\n        //Open submenu using right/left key\n        openSubmenu={() => {\n          setIsOpen(true);\n          setCurrentFocus('firstItem');\n        }}\n        submenuRef={dropdownSubmenuRef}\n        isSubmenuOpen={isOpen}></BaseMenuItem>\n\n      <DropdownMenu\n        isOpen={isOpen}\n        menuLevel=\"sub\"\n        menuId={submenuId}\n        //Close submenu with left/right key\n        closeSubmenu={() => {\n          hoverStatus.current.recentClose = true;\n          changeKey({ key: currentKey, reason: 'keyboard' });\n          setTimeout(() => {\n            hoverStatus.current.recentClose = false;\n          }, HOVER_SHIFT_TIMEOUT);\n          setIsOpen(false);\n          //CurrentKey can be the same as submenuItem, because of that we explicitly focus it\n          submenuMenuItemRef.current?.focus();\n        }}\n        /*For now we are exposing ref if this is exposed at some point we would look for other\n            mechanisms to use this ref */\n        ref={dropdownSubmenuRef}\n        anchorRef={submenuMenuItemRef}\n        defaultPlacement=\"end-top\"\n        currentFocus={currentFocus}\n        offsetValue={{\n          mainAxis: -8, //TODO: need to figure out how to make this themable.\n          crossAxis: -8\n        }}\n        flipOptions={{\n          crossAxis: true,\n          mainAxis: true,\n          fallbackPlacements: ['start-top', 'end-bottom', 'start-bottom']\n        }}>\n        {children}\n      </DropdownMenu>\n    </>\n  );\n};\n\nconst HOVER_SHIFT_TIMEOUT = 100;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { DirectionalCollapseArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalCollapseArrowIcon';\nimport { DirectionalExpandArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalExpandArrowIcon';\n\nimport { BaseMenuItem } from './MenuItem';\nimport { SheetMenu } from './SheetMenu';\nimport { useMenuContainerContext } from './useMenuContainerContext';\nimport { SubmenuProps } from './Submenu';\n\nexport const SheetSubmenu = ({ label, children, startIcon }: SubmenuProps) => {\n  const submenuId = useId();\n  const submenuItemId = useId();\n  const submenuTitleId = useId();\n\n  const submenuMenuItemRef = useRef<HTMLAnchorElement | null>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [initialFocus, setInitialFocus] = useState<'menu' | 'secondItem'>('menu');\n\n  const { menuContainerRef, changeKey } = useMenuContainerContext();\n  /* We have to wrap opening display change inside a useEffect to avoid flashy effect when opening submenu*/\n  useEffect(() => {\n    if (isOpen) {\n      if (menuContainerRef.current) {\n        /*Menu hidden instead of unmounted for two main reasons:\n      1. Children need to be updated even if menu is present.\n      2. We can't unmount parent since all the submenus are children of main menuContainer*/\n        menuContainerRef.current.style.display = 'none';\n      }\n    }\n  }, [isOpen, menuContainerRef]);\n\n  const openSubmenuDirectional = useCallback(() => {\n    setIsOpen(true);\n    setInitialFocus('secondItem');\n  }, []);\n\n  const openSubmenuAction = useCallback((e: Event) => {\n    //If the submenu is open using keyboard focus has to go to second item(first is the title), if not to the menu Container\n    setIsOpen(true);\n    if (e.type === 'keyup') {\n      setInitialFocus('secondItem');\n    } else {\n      setInitialFocus('menu');\n    }\n  }, []);\n\n  const returnFocusToSubmenuItem = useCallback(() => {\n    changeKey({ key: submenuItemId, reason: 'keyboard' });\n    submenuMenuItemRef.current?.focus();\n  }, [changeKey, submenuItemId, submenuMenuItemRef]);\n\n  /* No need to \"save\" these functions with useCallback */\n  const closeSubmenu = () => {\n    setIsOpen(false);\n    if (menuContainerRef.current) {\n      //Submenu is unmounted and prev menu is visible again.\n      /*Dom manipulation is kind of dirty. Have to check for new approaches. JET-57239 */\n      menuContainerRef.current.style.display = 'block';\n    }\n  };\n\n  const closeSubmenuPressingTitleItem = (e: Event) => {\n    closeSubmenu();\n    //If the submenu is closed using keyboard focus has to go to submenuItem that opened submenu, if not to the menu Container\n    if (e.type === 'keyup') {\n      returnFocusToSubmenuItem();\n    } else {\n      changeKey({ key: undefined, reason: 'click' });\n      menuContainerRef.current?.focus();\n    }\n  };\n\n  const closeDirectional = () => {\n    closeSubmenu();\n    returnFocusToSubmenuItem();\n  };\n\n  return (\n    <>\n      <BaseMenuItem\n        startIcon={startIcon}\n        id={submenuItemId}\n        submenuId={submenuId}\n        ref={submenuMenuItemRef}\n        label={label}\n        endIcon={<DirectionalExpandArrowIcon></DirectionalExpandArrowIcon>}\n        type=\"submenu\"\n        role=\"menuitem\"\n        onAction={openSubmenuAction}\n        openSubmenu={openSubmenuDirectional}\n        isSubmenuOpen={isOpen}></BaseMenuItem>\n      {!isOpen ? null : (\n        <SheetMenu\n          menuId={submenuId}\n          closeSubmenu={closeDirectional}\n          menuLevel=\"sub\"\n          anchorRef={submenuMenuItemRef}\n          //TODO: We need to check if this initial focus is desired based on some W3C specs\n          currentFocus={initialFocus}>\n          <BaseMenuItem\n            id={submenuTitleId}\n            menuItemLabelWeight=\"bold\"\n            role=\"menuitem\"\n            type=\"submenu\"\n            startIcon={<DirectionalCollapseArrowIcon></DirectionalCollapseArrowIcon>}\n            onAction={closeSubmenuPressingTitleItem}\n            label={label}></BaseMenuItem>\n          {children}\n        </SheetMenu>\n      )}\n    </>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\n\nimport { DropdownSubmenu } from './DropdownSubmenu';\nimport { SheetSubmenu } from './SheetSubmenu';\nimport { useMenuContext } from './useMenuContext';\n\nexport type SubmenuProps = {\n  /**\n   * Set of menu groups or menu items that submenumenu will hold.Even though you could pass other type of children,\n   * is strongly recommended to use MenuItem, menu groups or components that return this type of components\n   * since passing other type of components children produces not desirable behaviors.\n   */\n  children?: ComponentChildren;\n\n  /**\n   *  Determines submenu text.\n   */\n  label: string;\n\n  /**\n   *  Submenu item startIcon\n   */\n  startIcon?: ComponentChildren;\n};\n\n/*Submenu behaves differently depending the device */\nexport const Submenu = (props: SubmenuProps) => {\n  const { isMobile } = useMenuContext();\n  return (\n    <>\n      {isMobile ? (\n        <SheetSubmenu {...props}></SheetSubmenu>\n      ) : (\n        <DropdownSubmenu {...props}></DropdownSubmenu>\n      )}\n    </>\n  );\n};\n"],"names":["DropdownSubmenu","label","children","startIcon","submenuId","useId","preProcessedMenuItemID","menuItemId","useMemo","changeKey","currentKey","useMenuContainerContext","submenuMenuItemRef","useRef","dropdownSubmenuRef","isOpen","setIsOpen","useState","currentFocus","setCurrentFocus","useEffect","openSubmenuAction","useCallback","e","current","focus","type","hoverStatus","recentClose","pendingUnhover","_jsxs","_jsx","jsx","BaseMenuItem","id","ref","endIcon","DirectionalExpandArrowIcon","role","onAction","hoverInfo","hoverProps","onMouseEnter","openSubmenu","submenuRef","isSubmenuOpen","DropdownMenu","menuLevel","menuId","closeSubmenu","key","reason","setTimeout","HOVER_SHIFT_TIMEOUT","anchorRef","defaultPlacement","offsetValue","mainAxis","crossAxis","flipOptions","fallbackPlacements","SheetSubmenu","submenuItemId","submenuTitleId","initialFocus","setInitialFocus","menuContainerRef","style","display","openSubmenuDirectional","returnFocusToSubmenuItem","jsxs","_Fragment","SheetMenu","menuItemLabelWeight","DirectionalCollapseArrowIcon","undefined","props","isMobile","useMenuContext"],"mappings":"8PAUO,MAAMA,EAAkB,EAAGC,QAAOC,WAAUC,gBAEjD,MAAMC,EAAYC,EAAAA,QAEZC,EAAyBD,EAAAA,QAEzBE,EAAaC,EAAOA,SACxB,IAAM,gBAAgBF,KACtB,CAACA,KAGGG,UAAEA,EAASC,WAAEA,GAAeC,EAAuBA,0BAEnDC,EAAqBC,SAAiC,MACtDC,EAAqBD,SAA8B,OAElDE,EAAQC,GAAaC,EAAQA,UAAC,IAE9BC,EAAcC,GAAmBF,EAAQA,SAAgC,QAEhFG,EAAAA,WAAU,KACJb,IAAeG,GACjBM,GAAU,EACX,GACA,CAACN,EAAYH,IAGhB,MAAMc,EAAoBC,eAAaC,IACrCX,EAAmBY,SAASC,QAE5BT,GAAU,GACK,UAAXO,EAAEG,KACJP,EAAgB,aAEhBA,EAAgB,OACjB,GACA,IAGGQ,EAAcd,EAAAA,OAA0D,CAC5Ee,aAAa,EACbC,gBAAgB,IAGlB,OACEC,6BACEC,EAACC,IAAAC,EAAYA,cACX9B,UAAWA,EACX+B,GAAI3B,EACJH,UAAWA,EACX+B,IAAKvB,EACLX,MAAOA,EACPmC,QAASL,EAAAA,IAACM,EAAAA,2BAAwD,CAAA,GAClEX,KAAK,UACLY,KAAK,WACLC,SAAUlB,EACVmB,UAAW,CAETC,WAAY,CACVC,aAAenB,IACbF,EAAkBE,EAAE,GAGxBI,eAGFgB,YAAa,KACX3B,GAAU,GACVG,EAAgB,YAAY,EAE9ByB,WAAY9B,EACZ+B,cAAe9B,IAEjBgB,EAAAC,IAACc,eACC,CAAA/B,OAAQA,EACRgC,UAAU,MACVC,OAAQ5C,EAER6C,aAAc,KACZtB,EAAYH,QAAQI,aAAc,EAClCnB,EAAU,CAAEyC,IAAKxC,EAAYyC,OAAQ,aACrCC,YAAW,KACTzB,EAAYH,QAAQI,aAAc,CAAK,GACtCyB,GACHrC,GAAU,GAEVJ,EAAmBY,SAASC,OAAO,EAIrCU,IAAKrB,EACLwC,UAAW1C,EACX2C,iBAAiB,UACjBrC,aAAcA,EACdsC,YAAa,CACXC,UAAW,EACXC,WAAY,GAEdC,YAAa,CACXD,WAAW,EACXD,UAAU,EACVG,mBAAoB,CAAC,YAAa,aAAc,iBACjD1D,SACAA,MAGL,EAGEmD,EAAsB,IC5GfQ,EAAe,EAAG5D,QAAOC,WAAUC,gBAC9C,MAAMC,EAAYC,EAAAA,QACZyD,EAAgBzD,EAAAA,QAChB0D,EAAiB1D,EAAAA,QAEjBO,EAAqBC,SAAiC,OAErDE,EAAQC,GAAaC,EAAQA,UAAC,IAE9B+C,EAAcC,GAAmBhD,EAAQA,SAAwB,SAElEiD,iBAAEA,EAAgBzD,UAAEA,GAAcE,EAAuBA,0BAE/DS,EAAAA,WAAU,KACJL,GACEmD,EAAiB1C,UAInB0C,EAAiB1C,QAAQ2C,MAAMC,QAAU,OAE5C,GACA,CAACrD,EAAQmD,IAEZ,MAAMG,EAAyB/C,EAAAA,aAAY,KACzCN,GAAU,GACViD,EAAgB,aAAa,GAC5B,IAEG5C,EAAoBC,eAAaC,IAErCP,GAAU,GACK,UAAXO,EAAEG,KACJuC,EAAgB,cAEhBA,EAAgB,OACjB,GACA,IAEGK,EAA2BhD,EAAAA,aAAY,KAC3Cb,EAAU,CAAEyC,IAAKY,EAAeX,OAAQ,aACxCvC,EAAmBY,SAASC,OAAO,GAClC,CAAChB,EAAWqD,EAAelD,IAGxBqC,EAAe,KACnBjC,GAAU,GACNkD,EAAiB1C,UAGnB0C,EAAiB1C,QAAQ2C,MAAMC,QAAU,QAC1C,EAmBH,OACEtC,EACEyC,KAAAC,WAAA,CAAAtE,SAAA,CAAA6B,MAACE,EAAAA,aAAY,CACX9B,UAAWA,EACX+B,GAAI4B,EACJ1D,UAAWA,EACX+B,IAAKvB,EACLX,MAAOA,EACPmC,QAASL,EAAAC,IAACK,6BAA0B,CAAA,GACpCX,KAAK,UACLY,KAAK,WACLC,SAAUlB,EACVsB,YAAa0B,EACbxB,cAAe9B,IACfA,EACAe,OAAC2C,EAAAA,UAAS,CACRzB,OAAQ5C,EACR6C,aAtBiB,KACvBA,IACAqB,GAA0B,EAqBpBvB,UAAU,MACVO,UAAW1C,EAEXM,aAAc8C,EAAY9D,SAAA,CAC1B6B,EAAAA,IAACE,EAAAA,aAAY,CACXC,GAAI6B,EACJW,oBAAoB,OACpBpC,KAAK,WACLZ,KAAK,UACLvB,UAAW4B,EAACC,IAAA2C,EAA4BA,iCACxCpC,SA5C6BhB,IACrC0B,IAEe,UAAX1B,EAAEG,KACJ4C,KAEA7D,EAAU,CAAEyC,SAAK0B,EAAWzB,OAAQ,UACpCe,EAAiB1C,SAASC,QAC3B,EAqCOxB,MAAOA,IACRC,KAhBM,OAoBb,YCjFoB2E,IACtB,MAAMC,SAAEA,GAAaC,EAAAA,iBACrB,OACEhD,EAAAA,IACGyC,EAAAA,SAAA,CAAAtE,SAAA4E,EACC/C,EAAAA,IAAC8B,EAAY,IAAKgB,IAElB9C,EAACC,IAAAhC,EAAoB,IAAA6E,KAGzB"}