{"version":3,"file":"useTextField-e6877c79.js","sources":["../../src/hooks/UNSAFE_useTextField/useTextField.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Label } from '../../UNSAFE_Label';\nimport { TextField } from '../../UNSAFE_TextField';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../../UNSAFE_UserAssistance';\nimport { useMessageSeverity } from '../PRIVATE_useMessageSeverity';\nimport { merge } from '../../utils/UNSAFE_stringUtils';\nimport { useFocusWithin } from '../UNSAFE_useFocusWithin';\nimport { useFormFieldContextProps } from '../UNSAFE_useFormFieldContextProps';\nimport { useId } from '../UNSAFE_useId';\nimport { AriaAttributesSignalExcluded } from '../../utils/UNSAFE_attributeUtils';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype PickedUserAssistanceProps = Pick<InlineUserAssistanceProps, 'messages'>;\n\ntype UseTextFieldProps<V> = PickedUserAssistanceProps & {\n  ariaDescribedBy?: string;\n  contentVariant?: 'input' | 'textarea';\n  helpSourceLink?: string;\n  helpSourceText?: string;\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  isLoading?: boolean;\n  isReadonly?: boolean;\n  isRequiredShown?: boolean;\n  labelEdge?: ComponentProps<typeof TextField>['labelEdge'] | 'none';\n  styleVariant?: 'default' | 'embedded';\n  userAssistanceDensity?: UserAssistanceDensityType;\n  value?: V;\n};\n\n/**\n * A custom hook to determine the props for a component that renders\n * a text field\n */\nexport function useTextField<V>({\n  ariaDescribedBy,\n  contentVariant,\n  helpSourceLink,\n  helpSourceText,\n  isDisabled,\n  isFocused,\n  isLoading,\n  isReadonly,\n  isRequiredShown,\n  labelEdge,\n  messages,\n  styleVariant,\n  userAssistanceDensity,\n  value\n}: UseTextFieldProps<V>) {\n  const baseId = useId();\n  const labelId = labelEdge !== 'none' ? `${baseId}-label` : undefined;\n  const inputId = !isReadonly ? `${baseId}-input` : undefined;\n  const uaId = !(isDisabled || isReadonly) ? `${baseId}-ua` : undefined;\n  const helpIconId = userAssistanceDensity === 'compact' ? `${baseId}-helpIcon` : undefined;\n\n  const { focusProps, isFocused: isInputFocused } = useFocusWithin({ isDisabled });\n  const hasValue = value !== undefined && (typeof value !== 'string' || value !== '');\n\n  // Create the form field context\n  const formFieldContext = useFormFieldContextProps({\n    hasValue,\n    isDisabled,\n    isFocused,\n    isInputFocused,\n    isLoading,\n    isReadonly\n  });\n\n  // Determine the highest severity from the messages\n  const messageSeverity = useMessageSeverity(messages);\n\n  // Determine the label variant\n  const labelVariant: ComponentProps<typeof Label>['variant'] =\n    labelEdge !== 'none' ? labelEdge : undefined;\n\n  return {\n    baseId,\n    formFieldContext,\n    inputProps: {\n      id: inputId,\n      'aria-describedby': merge([helpIconId, uaId, ariaDescribedBy]),\n      'aria-invalid':\n        messageSeverity === 'error'\n          ? 'true'\n          : (undefined as AriaAttributesSignalExcluded['aria-invalid']),\n      variant: styleVariant,\n      onBlur: focusProps?.onFocusOut,\n      onFocus: focusProps?.onFocusIn\n    },\n    labelProps: {\n      forId: inputId,\n      helpIconId,\n      helpSourceLink,\n      helpSourceText,\n      id: labelId,\n      isRequiredShown,\n      userAssistanceDensity,\n      variant: labelVariant\n    },\n    textFieldProps: {\n      contentVariant,\n      statusVariant: /error|warning/.test(messageSeverity ?? '')\n        ? (messageSeverity as 'error' | 'warning')\n        : undefined,\n      styleVariant\n    },\n    userAssistanceProps: {\n      id: uaId\n    }\n  };\n}\n"],"names":["ariaDescribedBy","contentVariant","helpSourceLink","helpSourceText","isDisabled","isFocused","isLoading","isReadonly","isRequiredShown","labelEdge","messages","styleVariant","userAssistanceDensity","value","baseId","useId","labelId","undefined","inputId","uaId","helpIconId","focusProps","isInputFocused","useFocusWithin","hasValue","formFieldContext","useFormFieldContextProps","messageSeverity","useMessageSeverity","labelVariant","inputProps","id","merge","variant","onBlur","onFocusOut","onFocus","onFocusIn","labelProps","forId","textFieldProps","statusVariant","test","userAssistanceProps"],"mappings":"oNAkCgB,UAAgBA,gBAC9BA,EAAeC,eACfA,EAAcC,eACdA,EAAcC,eACdA,EAAcC,WACdA,EAAUC,UACVA,EAASC,UACTA,EAASC,WACTA,EAAUC,gBACVA,EAAeC,UACfA,EAASC,SACTA,EAAQC,aACRA,EAAYC,sBACZA,EAAqBC,MACrBA,IAEA,MAAMC,EAASC,EAAAA,QACTC,EAAwB,SAAdP,EAAuB,GAAGK,eAAiBG,EACrDC,EAAWX,OAAiCU,EAApB,GAAGH,UAC3BK,EAASf,GAAcG,OAA+BU,EAAjB,GAAGH,OACxCM,EAAuC,YAA1BR,EAAsC,GAAGE,kBAAoBG,GAE1EI,WAAEA,EAAYhB,UAAWiB,GAAmBC,iBAAe,CAAEnB,eAC7DoB,OAAqBP,IAAVJ,IAAyC,iBAAVA,GAAgC,KAAVA,GAGhEY,EAAmBC,EAAAA,yBAAyB,CAChDF,WACApB,aACAC,YACAiB,iBACAhB,YACAC,eAIIoB,EAAkBC,qBAAmBlB,GAGrCmB,EACU,SAAdpB,EAAuBA,OAAYQ,EAErC,MAAO,CACLH,SACAW,mBACAK,WAAY,CACVC,GAAIb,EACJ,mBAAoBc,EAAAA,MAAM,CAACZ,EAAYD,EAAMnB,IAC7C,eACsB,UAApB2B,EACI,YACCV,EACPgB,QAAStB,EACTuB,OAAQb,GAAYc,WACpBC,QAASf,GAAYgB,WAEvBC,WAAY,CACVC,MAAOrB,EACPE,aACAlB,iBACAC,iBACA4B,GAAIf,EACJR,kBACAI,wBACAqB,QAASJ,GAEXW,eAAgB,CACdvC,iBACAwC,cAAe,gBAAgBC,KAAKf,GAAmB,IAClDA,OACDV,EACJN,gBAEFgC,oBAAqB,CACnBZ,GAAIZ,GAGV"}