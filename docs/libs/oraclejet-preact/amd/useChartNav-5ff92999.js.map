{"version":3,"file":"useChartNav-5ff92999.js","sources":["../../src/hooks/PRIVATE_useChartNav/useChartNav.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useRef, useState } from 'preact/hooks';\nimport { getRandomId } from '../../utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { getInfo, cancelEvent } from '../../utils/UNSAFE_visUtils';\nimport { ChartGroupInfo, Info } from '../../utils/UNSAFE_visTypes/chart';\nimport { useVisHover } from '#hooks/PRIVATE_useVisHover';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype Props = {\n  rootRef: Ref<HTMLElement>;\n  getNextChartItem: (\n    info: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ) => Info;\n  getNextNavGroup: (info: ChartGroupInfo, arrow: 'ArrowLeft' | 'ArrowRight') => ChartGroupInfo;\n  getDefaultNavGroup: (info: ChartGroupInfo) => ChartGroupInfo | undefined;\n  xIndexExtent: { startIndex: number; endIndex: number };\n  touchResponse: 'touchStart' | 'touchHold';\n  onItemHover?: (detail: { seriesIndex?: number; groupIndex?: number }) => void;\n  onItemFocus?: (detail: { seriesIndex?: number; groupIndex?: number }) => void;\n  drilling?: 'on' | 'groupsOnly' | 'off';\n};\n\n/**\n * Returns whether the two groups are same.\n * @param g1 GroupInfo\n * @param g2 GroupInfo\n * @returns\n */\nfunction isGroupEqual(g1?: Partial<ChartGroupInfo>, g2?: Partial<ChartGroupInfo>) {\n  return (\n    g1?.groupIndex === g2?.groupIndex &&\n    g1?.isCurrent === g2?.isCurrent &&\n    g1?.isFocusVisible === g2?.isFocusVisible\n  );\n}\n\n/**\n * Returns whether the two item info are same.\n * @param i1 ItemInfo\n * @param i2 ItemInfo\n * @returns\n */\nfunction isItemEqual(i1?: Info, i2?: Info) {\n  return i1?.seriesIndex === i2?.seriesIndex && isGroupEqual(i1, i2);\n}\n\n/**\n * Returns whether the two item info are same.\n * @param i1 ItemInfo\n * @param i2 ItemInfo\n * @returns\n */\nfunction isItemInfoEqual(i1?: Info, i2?: Info) {\n  return i1?.seriesIndex === i2?.seriesIndex && i2?.groupIndex === i1?.groupIndex;\n}\n\n/**\n * Hook to handle chart navigation.\n */\nexport function useChartNav({\n  rootRef,\n  getNextChartItem,\n  getDefaultNavGroup,\n  getNextNavGroup,\n  xIndexExtent,\n  touchResponse,\n  onItemHover,\n  onItemFocus,\n  drilling\n}: Props) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<Info>({\n    groupIndex: xIndexExtent.startIndex,\n    seriesIndex: 0\n  });\n\n  const isGroupDrillEnabled = drilling === 'on' || drilling === 'groupsOnly';\n  const [hoveredItemInfo, setHoveredItemInfo] = useState<Info>();\n\n  const [focusedGroupInfo, setFocusedGroupInfo] = useState<ChartGroupInfo>({ groupIndex: 0 });\n  const activeId = useRef<string>();\n  const previousHoveredItemRef = useRef<Info>();\n  const previousFocusedItemRef = useRef<Info>();\n\n  const isItemFocused = focusedItemInfo.isCurrent;\n  const isGroupFocused = focusedGroupInfo.isCurrent;\n\n  const updateGroupInfo = (groupInfo: ChartGroupInfo) => {\n    if (!isGroupEqual(groupInfo, focusedGroupInfo)) {\n      setFocusedGroupInfo(groupInfo);\n    }\n  };\n\n  const update = (type: 'hover' | 'focus', info?: Info) => {\n    const prevInfoRef = type === 'hover' ? previousHoveredItemRef : previousFocusedItemRef;\n    const callback = type === 'hover' ? onItemHover : onItemFocus;\n    if (!isItemEqual(info, prevInfoRef.current)) {\n      const input = { groupIndex: info?.groupIndex, seriesIndex: info?.seriesIndex };\n      callback?.(input);\n      prevInfoRef.current = info;\n      activeId.current = getRandomId();\n    }\n  };\n\n  const updateFocusedItemInfo = (itemInfo: Info) => {\n    if (!isItemEqual(itemInfo, focusedItemInfo)) {\n      setfocusedItemInfo(itemInfo);\n      // preserve hovered effect if same item is focused\n      if (hoveredItemInfo && !isItemInfoEqual(hoveredItemInfo, itemInfo)) {\n        setHoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      if (itemInfo.isCurrent) {\n        update('focus', itemInfo);\n      }\n    }\n  };\n\n  const updateHoveredItemInfo = (itemInfo?: Info) => {\n    if (!hoveredItemInfo || !isItemEqual(itemInfo, hoveredItemInfo)) {\n      setHoveredItemInfo(itemInfo);\n      setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false });\n      update('hover', itemInfo);\n    }\n  };\n\n  const handleTab = (event: KeyboardEvent) => {\n    const defaultGroup = getDefaultNavGroup(focusedGroupInfo);\n    const validItemInfoIndex = Math.max(\n      xIndexExtent.startIndex,\n      Math.min(xIndexExtent.endIndex, focusedItemInfo.groupIndex!)\n    );\n    if (event.shiftKey) {\n      if (isItemFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n        update('focus', undefined);\n      } else if (isGroupFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        if (isGroupDrillEnabled) {\n          updateGroupInfo({\n            ...focusedGroupInfo,\n            ...defaultGroup,\n            isCurrent: false,\n            isFocusVisible: false\n          });\n          cancelEvent(event);\n        }\n      } else if (isGroupDrillEnabled) {\n        updateGroupInfo({\n          ...focusedGroupInfo,\n          ...defaultGroup,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n      }\n    } else {\n      if (isItemFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n        if (isGroupDrillEnabled) {\n          updateGroupInfo({\n            ...focusedGroupInfo,\n            ...defaultGroup,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n          cancelEvent(event);\n        }\n        update('focus', undefined);\n      } else if (isGroupFocused && isGroupDrillEnabled) {\n        updateGroupInfo({\n          ...focusedGroupInfo,\n          ...defaultGroup,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n      } else {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n      }\n    }\n    activeId.current = getRandomId();\n  };\n\n  const onKeyUp = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab': {\n        if (!isItemFocused && !isGroupFocused) {\n          handleTab(event);\n        }\n        break;\n      }\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab': {\n        handleTab(event);\n        break;\n      }\n      case 'ArrowRight': {\n        if (isGroupFocused) {\n          const info = getNextNavGroup(focusedGroupInfo, key);\n          updateGroupInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        } else {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowLeft': {\n        if (isGroupFocused) {\n          const info = getNextNavGroup(focusedGroupInfo, key);\n          updateGroupInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        } else {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowUp': {\n        if (isItemFocused) {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowDown': {\n        if (isItemFocused) {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n    }\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    const info = getInfo(rootRef, event.target as HTMLElement);\n\n    if (!info) {\n      return;\n    }\n    const { seriesIndex, groupIndex } = info;\n\n    if (seriesIndex != undefined && groupIndex != undefined) {\n      updateFocusedItemInfo({\n        seriesIndex,\n        groupIndex,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n      updateGroupInfo({\n        ...focusedGroupInfo,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n    } else if (groupIndex !== undefined && seriesIndex === undefined) {\n      updateGroupInfo({\n        groupIndex,\n        isCurrent: true,\n        isFocusVisible: false\n      });\n      updateFocusedItemInfo({\n        ...focusedItemInfo,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n    }\n  };\n\n  const onHover = (event: PointerEvent) => {\n    const info = getInfo(rootRef, event.target as HTMLElement);\n    if (!info) {\n      updateHoveredItemInfo(undefined);\n      return;\n    }\n    const { seriesIndex, groupIndex } = info;\n\n    if (seriesIndex != undefined) {\n      updateHoveredItemInfo({\n        seriesIndex,\n        groupIndex,\n        isCurrent: true\n      });\n      updateFocusedItemInfo({\n        ...focusedItemInfo,\n        isCurrent: false\n      });\n    }\n  };\n\n  const onHoverLeave = () => {\n    updateHoveredItemInfo(undefined);\n  };\n\n  const hoverHandlers = useVisHover(onHover, undefined, onHoverLeave, touchResponse);\n\n  const onFocusUpdate = () => {\n    const validItemInfoIndex = Math.max(\n      xIndexExtent.startIndex,\n      Math.min(xIndexExtent.endIndex, focusedItemInfo.groupIndex!)\n    );\n    updateFocusedItemInfo({\n      ...focusedItemInfo,\n      groupIndex: validItemInfoIndex,\n      isCurrent: true,\n      isFocusVisible: true\n    });\n  };\n\n  const onBlur = () => {\n    updateFocusedItemInfo({\n      ...focusedItemInfo,\n      isCurrent: false,\n      isFocusVisible: false\n    });\n  };\n\n  return {\n    focusedItemInfo,\n    focusedGroupInfo,\n    hoveredItemInfo,\n    activeId: activeId.current,\n    navProps: mergeProps(hoverHandlers, {\n      onKeyDown,\n      onKeyUp,\n      onPointerUp,\n      onBlur\n    }),\n    onFocusUpdate\n  };\n}\n"],"names":["isGroupEqual","g1","g2","groupIndex","isCurrent","isFocusVisible","isItemEqual","i1","i2","seriesIndex","rootRef","getNextChartItem","getDefaultNavGroup","getNextNavGroup","xIndexExtent","touchResponse","onItemHover","onItemFocus","drilling","focusedItemInfo","setfocusedItemInfo","useState","startIndex","isGroupDrillEnabled","hoveredItemInfo","setHoveredItemInfo","focusedGroupInfo","setFocusedGroupInfo","activeId","useRef","previousHoveredItemRef","previousFocusedItemRef","isItemFocused","isGroupFocused","updateGroupInfo","groupInfo","update","type","info","prevInfoRef","callback","current","input","getRandomId","updateFocusedItemInfo","itemInfo","updateHoveredItemInfo","handleTab","event","defaultGroup","validItemInfoIndex","Math","max","min","endIndex","shiftKey","undefined","cancelEvent","hoverHandlers","useVisHover","getInfo","target","navProps","mergeProps","onKeyDown","key","onKeyUp","onPointerUp","onBlur","onFocusUpdate"],"mappings":"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"}