{"version":3,"file":"StyledCheckbox-9006dc18.js","sources":["../../src/PRIVATE_StyledCheckbox/StyledCheckbox.tsx"],"sourcesContent":["import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { CheckIcon } from '../PRIVATE_ThemedIcons/CheckIcon';\nimport { CheckboxOffIcon } from '../PRIVATE_ThemedIcons/CheckboxOffIcon';\nimport { CheckboxOnIcon } from '../PRIVATE_ThemedIcons/CheckboxOnIcon';\nimport { CheckboxMixedIcon } from '../PRIVATE_ThemedIcons/CheckboxMixedIcon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { checkboxIconVars } from '../UNSAFE_Checkbox/themes/CheckboxIconContract.css';\nimport { CheckboxIconRedwoodTheme } from '../UNSAFE_Checkbox/themes/redwood/CheckboxIconTheme';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport {\n  CheckboxIconStyles,\n  CheckboxIconVariantOptions\n} from '../UNSAFE_Checkbox/themes/CheckboxIconStyles.css';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { hoverStyle } from './StyledCheckbox.css';\nimport { useCollectionInteractionContext } from '#hooks/UNSAFE_useCollectionInteractionContext';\n\ntype InputProps = HTMLAttributesSignalExcluded<HTMLInputElement>;\n\ntype Props = Pick<\n  InputProps,\n  | 'name'\n  | 'value'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onKeyUp'\n  | 'onKeyDown'\n  | 'onBlur'\n  | 'onChange'\n  | 'onFocus'\n  | 'id'\n> & {\n  /**\n   * Specifies if the checkbox is active.\n   */\n  isActive?: boolean;\n  /**\n   * Whether the element should be checked, unchecked, or in a partial state.\n   */\n  isChecked?: 'checked' | 'unchecked' | 'partial';\n  /**\n   * Specifies if the checkbox is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies if the checkbox should display focus ring.\n   */\n  isFocusRingShown?: boolean;\n  /**\n   * Specifies if the checkbox is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies whether the checkbox requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Triggered when the checkbox icon is clicked. This would be potentially used if no label is supplied.\n   */\n  onClick?: HTMLAttributesSignalExcluded<HTMLSpanElement>['onClick'];\n  /**\n   * Specifies whether the checkbox is hover.\n   */\n  isHover?: boolean;\n};\n\n/**\n * StyledCheckbox is a controlled component that displays a stylized checkbox for 'checked',\n * 'unchecked', and 'partial'. It passes intrinsic props to the native input element. This should be used\n * in conjunction with a label and be passed an onChange handler. If used within a collection use\n * 'useCollectionFocusRing', or use 'useCheckboxRadioContext' within RadioSet/CheckboxSet, to determine if you\n * should display the focus ring using keyboard navigation.\n */\nconst StyledCheckbox = forwardRef(\n  (\n    {\n      onClick,\n      isActive,\n      isFocusRingShown,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      isChecked: propIsChecked = 'unchecked',\n      // Remaining props should be intrinsic input props only. If you need additional input props exposed,\n      // add to the picked items from InputProps.\n      id,\n      name,\n      value,\n      onKeyUp,\n      onKeyDown,\n      onChange,\n      onFocus,\n      onBlur,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      isHover\n    }: Props,\n    ref: Ref<HTMLInputElement> = null\n  ) => {\n    const { isTabbable } = useTabbableMode();\n    const isPartial = propIsChecked === 'partial';\n    const isChecked = propIsChecked === 'checked' || isPartial;\n    const ariaChecked = isChecked ? (isPartial ? 'mixed' : true) : false;\n\n    const { classes } = useComponentTheme<CheckboxIconVariantOptions, CheckboxIconStyles>(\n      CheckboxIconRedwoodTheme,\n      {\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n        checked: isChecked ? 'isChecked' : 'notChecked',\n        readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n        active: isActive ? 'isActive' : 'notActive',\n        focus: isFocusRingShown ? 'isFocused' : 'notFocused',\n        iconSize: '4xUnits'\n      }\n    );\n\n    const IconComp = isReadonly\n      ? isChecked\n        ? CheckIcon\n        : CheckboxOffIcon\n      : isChecked\n      ? isPartial\n        ? CheckboxMixedIcon\n        : CheckboxOnIcon\n      : CheckboxOffIcon;\n\n    const spanClass = isHover ? classes + ' ' + hoverStyle : classes;\n\n    // JET-65187 oatb: Interactive controls must not be nested\n    // For accessibility, we want aria-hidden to be true and disabled to be true when\n    // the checkbox is 'embedded' in a collection in the dropdown of a SelectMultiple component.\n    const isEmbedded = useCollectionInteractionContext() === 'embedded';\n    return (\n      <>\n        <HiddenAccessible>\n          <input\n            {...(isReadonly ? { 'aria-readonly': true } : {})}\n            aria-checked={ariaChecked}\n            {...(isEmbedded ? { 'aria-hidden': true } : {})}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            aria-required={isRequired}\n            ref={ref}\n            name={name}\n            value={value}\n            onKeyUp={onKeyUp}\n            onKeyDown={onKeyDown}\n            onBlur={onBlur}\n            onChange={onChange}\n            onFocus={onFocus}\n            id={id}\n            type=\"checkbox\"\n            disabled={isDisabled || isEmbedded}\n            checked={isChecked}\n            tabIndex={isTabbable ? 0 : -1}\n          />\n        </HiddenAccessible>\n        <span className={spanClass} aria-hidden=\"true\" onClick={onClick} role=\"img\">\n          <IconComp size={checkboxIconVars.iconSize} color=\"currentColor\" />\n        </span>\n      </>\n    );\n  }\n);\n\nexport { StyledCheckbox };\n"],"names":["StyledCheckbox","forwardRef","onClick","isActive","isFocusRingShown","isDisabled","isReadonly","isRequired","isChecked","propIsChecked","id","name","value","onKeyUp","onKeyDown","onChange","onFocus","onBlur","ariaLabel","ariaLabelledBy","ariaDescribedBy","isHover","ref","isTabbable","useTabbableMode","isPartial","ariaChecked","classes","useComponentTheme","CheckboxIconRedwoodTheme","disabled","checked","readonly","active","focus","iconSize","IconComp","CheckIcon","SvgCheck","CheckboxOffIcon","SvgCheckboxOff","CheckboxMixedIcon","SvgCheckboxMixed","CheckboxOnIcon","SvgCheckboxOn","spanClass","isEmbedded","useCollectionInteractionContext","_jsxs","jsxs","_Fragment","children","_jsx","jsx","HiddenAccessible","type","tabIndex","className","role","size","checkboxIconVars","color"],"mappings":"4fA6EM,MAAAA,EAAiBC,EAAUA,YAC/B,EAEIC,UACAC,WACAC,mBACAC,aACAC,aACAC,aACAC,UAAWC,EAAgB,YAG3BC,KACAC,OACAC,QACAC,UACAC,YACAC,WACAC,UACAC,SACA,aAAcC,EACd,kBAAmBC,EACnB,mBAAoBC,EACpBC,WAEFC,EAA6B,QAE7B,MAAMC,WAAEA,GAAeC,EAAAA,kBACjBC,EAA8B,YAAlBhB,EACZD,EAA8B,YAAlBC,GAA+BgB,EAC3CC,IAAclB,KAAaiB,GAAY,UAEvCE,QAAEA,GAAYC,EAAiBA,kBACnCC,2BACA,CACEC,SAAUzB,EAAa,aAAe,cACtC0B,QAASvB,EAAY,YAAc,aACnCwB,SAAU1B,EAAa,aAAe,cACtC2B,OAAQ9B,EAAW,WAAa,YAChC+B,MAAO9B,EAAmB,YAAc,aACxC+B,SAAU,YAIRC,EAAW9B,EACbE,EACE6B,EAASC,SACTC,EAAeC,eACjBhC,EACAiB,EACEgB,EAAiBC,iBACjBC,EAAcC,cAChBL,iBAEEM,EAAYxB,EAAUM,wCAA6BA,EAKnDmB,EAAmD,aAAtCC,oCACnB,OACEC,EAAAC,KAAAC,WAAA,CAAAC,SAAA,CACEC,EAACC,IAAAC,6BACCF,EAAAA,IACM,QAAA,IAAC9C,EAAa,CAAE,iBAAiB,GAAS,CAAA,EAAG,eACnCoB,KACToB,EAAa,CAAE,eAAe,GAAS,CAAA,EAChC,aAAA5B,oBACKC,EAAc,mBACbC,EAAe,gBAClBb,EACfe,IAAKA,EACLX,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,UAAWA,EACXG,OAAQA,EACRF,SAAUA,EACVC,QAASA,EACTN,GAAIA,EACJ6C,KAAK,WACLzB,SAAUzB,GAAcyC,EACxBf,QAASvB,EACTgD,SAAUjC,EAAa,GAAK,MAGhC6B,EAAMC,IAAA,OAAA,CAAAI,UAAWZ,EAAS,cAAc,OAAO3C,QAASA,EAASwD,KAAK,MACpEP,SAAAC,EAAAA,IAAChB,EAAQ,CAACuB,KAAMC,EAAgBA,iBAACzB,SAAU0B,MAAM,qBAGrD"}