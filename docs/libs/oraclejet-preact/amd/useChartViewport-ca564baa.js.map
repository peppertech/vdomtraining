{"version":3,"file":"useChartViewport-ca564baa.js","sources":["../../src/hooks/PRIVATE_useChartViewport/utils.ts","../../src/hooks/PRIVATE_useChartViewport/useChartViewport.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '../../utils/UNSAFE_visTypes/common';\nimport { Scale } from '../../utils/UNSAFE_visTypes/chart';\nexport function getAxisBoundsByDelta(\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  yViewportExtent: { viewportMin: number; viewportMax: number },\n  yAxisExtent: { min: number; max: number },\n  xScale: Scale,\n  yScale: Scale,\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const { viewportMin: xViewportMin, viewportMax: xViewportMax } = xViewportExtent;\n  const { min: xAxisMin, max: xAxisMax } = xAxisExtent;\n  const { viewportMin: yViewportMin, viewportMax: yViewportMax } = yViewportExtent;\n  const { min: yAxisMin, max: yAxisMax } = yAxisExtent;\n  const deltas = convertToAxisCoord(xMin, xMax, yMin, yMax, isRtl, isHoriz);\n  const xExtents = getAxisMinMaxByDelta(\n    xViewportMin,\n    xViewportMax,\n    xAxisMin,\n    xAxisMax,\n    xScale,\n    deltas['xMin'],\n    deltas['xMax']\n  );\n  const yExtents = getAxisMinMaxByDelta(\n    yViewportMin,\n    yViewportMax,\n    yAxisMin,\n    yAxisMax,\n    yScale,\n    deltas['yMin'],\n    deltas['yMax']\n  );\n\n  return { xExtents, yExtents };\n}\n\nexport function convertToAxisCoord(\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const axisCoord: Record<string, any> = {};\n  if (isHoriz) {\n    axisCoord['xMin'] = yMin;\n    axisCoord['xMax'] = yMax;\n    axisCoord['yMin'] = isRtl ? xMax : xMin;\n    axisCoord['yMax'] = isRtl ? xMin : xMax;\n  } else {\n    axisCoord['xMin'] = isRtl ? xMax : xMin;\n    axisCoord['xMax'] = isRtl ? xMin : xMax;\n    axisCoord['yMin'] = yMax;\n    axisCoord['yMax'] = yMin;\n  }\n  return axisCoord;\n}\n\nexport function getAxisMinMaxByDelta(\n  viewportMin: number,\n  viewportMax: number,\n  globalMin: number,\n  globalMax: number,\n  axisScale: Scale,\n  minDelta: number,\n  maxDelta: number\n) {\n  const minDeltaVal = axisScale.invert(minDelta) - axisScale.invert(0);\n  const maxDeltaVal = axisScale.invert(maxDelta) - axisScale.invert(0);\n\n  let weight = 1;\n  const newExtent = viewportMax + maxDeltaVal - (viewportMin + minDeltaVal);\n  const minExtent = 1; //axisInfo.getMinExtent();\n  if (minDelta != maxDelta && newExtent < minExtent)\n    weight = (viewportMax - viewportMin - minExtent) / (minDeltaVal - maxDeltaVal);\n\n  viewportMin += minDeltaVal * weight;\n  viewportMax += maxDeltaVal * weight;\n\n  // Limit to global min/max\n  if (viewportMax - viewportMin >= globalMax - globalMin) {\n    viewportMin = globalMin;\n    viewportMax = globalMax;\n  } else if (viewportMin < globalMin) {\n    viewportMax += globalMin - viewportMin;\n    viewportMin = globalMin;\n  } else if (viewportMax > globalMax) {\n    viewportMin -= viewportMax - globalMax;\n    viewportMax = globalMax;\n  }\n\n  return { viewportMin, viewportMax };\n}\n\nexport function getAxisMinMaxDrag(\n  offsetX: number,\n  offsetY: number,\n  plotAreaSpace: Dimension,\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  isHoriz: boolean,\n  isRtl: boolean\n) {\n  const deltaX = isRtl ? plotAreaSpace.width - offsetX : offsetX - plotAreaSpace.x;\n  const deltaY = offsetY - plotAreaSpace.y;\n  const deltaV = xViewportExtent.viewportMax - xViewportExtent.viewportMin;\n  const delta =\n    (isHoriz ? deltaY : deltaX) *\n    ((xAxisExtent.max - xAxisExtent.min) / (isHoriz ? plotAreaSpace.height : plotAreaSpace.width));\n  let xMin = delta - deltaV / 2;\n  let xMax = delta + deltaV / 2;\n\n  if (xMin < xAxisExtent.min) {\n    xMin = xAxisExtent.min;\n    xMax = xMin + deltaV;\n  }\n\n  if (xMax > xAxisExtent.max) {\n    xMin = xAxisExtent.max - deltaV;\n    xMax = xAxisExtent.max;\n  }\n\n  return {\n    xMin,\n    xMax\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getElementData } from '#utils/UNSAFE_visUtils';\nimport { Ref, useRef } from 'preact/hooks';\nimport { Scale } from '../../utils/UNSAFE_visTypes/chart';\nimport { getAxisBoundsByDelta, getAxisMinMaxDrag } from './utils';\nimport { usePinch } from '#PRIVATE_TimeComponent/hooks/usePinch';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype ViewportHandlerProps = {\n  rootRef: Ref<HTMLDivElement>;\n  width: number;\n  height: number;\n  plotAreaSpace: { x: number; y: number; width: number; height: number };\n  isRtl: boolean;\n  isHoriz: boolean;\n  xViewportExtent: { viewportMin: number; viewportMax: number };\n  yViewportExtent: { viewportMin: number; viewportMax: number };\n  xAxisExtent: { min: number; max: number };\n  yAxisExtent: { min: number; max: number };\n  yScale: Scale;\n  xScale: Scale;\n  zoomAndScroll: 'live' | 'off';\n  onViewportChange?: (detail: any) => void;\n};\n\nconst VIEWPORT_SCALE = 0.05;\n\nexport function useChartViewport({\n  plotAreaSpace,\n  xViewportExtent,\n  xAxisExtent,\n  yAxisExtent,\n  yViewportExtent,\n  yScale,\n  xScale,\n  onViewportChange,\n  isHoriz,\n  zoomAndScroll,\n  isRtl,\n  rootRef\n}: ViewportHandlerProps) {\n  const isPointerClicked = useRef(false);\n\n  const handleViewportChange = (delta: number, origin: { x: number; y: number }) => {\n    const deltaXMin = delta * (origin.x - plotAreaSpace.x);\n    const deltaXMax = -delta * (plotAreaSpace.x + plotAreaSpace.width - origin.x);\n    const deltaYMin = delta * (origin.y - plotAreaSpace.y);\n    const deltaYMax = -delta * (plotAreaSpace.y + plotAreaSpace.height - origin.y);\n    const extents = getAxisBoundsByDelta(\n      xViewportExtent,\n      xAxisExtent,\n      yViewportExtent,\n      yAxisExtent,\n      xScale,\n      yScale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax\n    });\n  };\n\n  const pinchProps = usePinch({\n    captureTargetRef: rootRef,\n    onPinchZoomChange: ({ delta, origin }) => {\n      const d = (isHoriz ? 1 : -1) * -1 * delta * VIEWPORT_SCALE;\n      handleViewportChange(d, origin);\n    }\n  });\n\n  pinchProps.onPointerOut = undefined;\n\n  const onWheel = (event: WheelEvent) => {\n    const delta = (isHoriz ? 1 : -1) * event.deltaY * VIEWPORT_SCALE;\n    handleViewportChange(delta, { x: event.offsetX, y: event.offsetY });\n    event.preventDefault();\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    const zoomIn = key === '+' || key === '=';\n    const zoomOut = key === '-' || key === '_';\n\n    if (!zoomIn && !zoomOut) {\n      return;\n    }\n    const zoomRatio = zoomIn ? 1.5 : 1 / 1.5;\n    const shiftRatio = (1 / zoomRatio - 1) / 2;\n\n    const deltaXMin = -1 * shiftRatio * plotAreaSpace.width;\n    const deltaXMax = shiftRatio * plotAreaSpace.width;\n    const deltaYMin = -1 * shiftRatio * plotAreaSpace.height;\n    const deltaYMax = shiftRatio * plotAreaSpace.height;\n\n    const extents = getAxisBoundsByDelta(\n      xViewportExtent,\n      xAxisExtent,\n      yViewportExtent,\n      yAxisExtent,\n      xScale,\n      yScale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax\n    });\n  };\n\n  const onPointerDown = (event: PointerEvent) => {\n    const obj = getElementData(rootRef, event.target as HTMLElement);\n    if (obj && obj['ojObject'] === 'scrollBar') {\n      isPointerClicked.current = true;\n      (event.target as HTMLElement).setPointerCapture(event.pointerId);\n\n      const { xMin, xMax } = getAxisMinMaxDrag(\n        event.offsetX,\n        event.offsetY,\n        plotAreaSpace,\n        xViewportExtent,\n        xAxisExtent,\n        isHoriz,\n        isRtl\n      );\n\n      onViewportChange?.({\n        xMin,\n        yMin: yViewportExtent.viewportMin,\n        xMax,\n        yMax: yViewportExtent.viewportMax\n      });\n    }\n  };\n\n  const onPointerUp = () => {\n    isPointerClicked.current = false;\n  };\n\n  const onPointerMove = (event: PointerEvent) => {\n    if (!isPointerClicked.current) {\n      return;\n    }\n\n    const obj = getElementData(rootRef, event.target as HTMLElement);\n    if (obj && obj['ojObject'] === 'scrollBar') {\n      const { xMin, xMax } = getAxisMinMaxDrag(\n        event.offsetX,\n        event.offsetY,\n        plotAreaSpace,\n        xViewportExtent,\n        xAxisExtent,\n        isHoriz,\n        isRtl\n      );\n\n      onViewportChange?.({\n        xMin,\n        yMin: yViewportExtent.viewportMin,\n        xMax,\n        yMax: yViewportExtent.viewportMax\n      });\n    }\n  };\n  return onViewportChange && zoomAndScroll === 'live'\n    ? mergeProps({ onWheel, onKeyDown, onPointerMove, onPointerDown, onPointerUp }, pinchProps)\n    : {};\n}\n"],"names":["getAxisBoundsByDelta","xViewportExtent","xAxisExtent","yViewportExtent","yAxisExtent","xScale","yScale","xMin","xMax","yMin","yMax","isRtl","isHoriz","viewportMin","xViewportMin","viewportMax","xViewportMax","min","xAxisMin","max","xAxisMax","yViewportMin","yViewportMax","yAxisMin","yAxisMax","deltas","axisCoord","convertToAxisCoord","xExtents","getAxisMinMaxByDelta","yExtents","globalMin","globalMax","axisScale","minDelta","maxDelta","minDeltaVal","invert","maxDeltaVal","weight","getAxisMinMaxDrag","offsetX","offsetY","plotAreaSpace","deltaX","width","x","deltaY","y","deltaV","delta","height","onViewportChange","zoomAndScroll","rootRef","isPointerClicked","useRef","handleViewportChange","origin","deltaXMin","deltaXMax","deltaYMin","deltaYMax","extents","pinchProps","usePinch","captureTargetRef","onPinchZoomChange","onPointerOut","undefined","mergeProps","onWheel","event","preventDefault","onKeyDown","key","zoomIn","shiftRatio","onPointerMove","current","obj","getElementData","target","onPointerDown","setPointerCapture","pointerId","onPointerUp"],"mappings":"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"}