{"version":3,"file":"TextAreaAutosize-81449e46.js","sources":["../../src/UNSAFE_TextAreaAutosize/ScrollHeightUtils.tsx","../../src/UNSAFE_TextAreaAutosize/useTextAreaAutosizing.tsx","../../src/UNSAFE_TextAreaAutosize/TextAreaAutosize.tsx"],"sourcesContent":["// returns the lineHeight as a number of pixels.\nexport const calculateLineHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = window.getComputedStyle(textarea);\n  const computedlineHeight = computedStyle.lineHeight;\n  if (computedlineHeight === 'normal') {\n    // We get 'normal' for values 'initial', 'inherit', 'unset' and 'normal'\n    // TODO: Unclear if we need this.\n    // getComputedStyle always return fontSize in pixels.  Not likely a float, but since it's legal\n    // we use parseFloat()\n    const fontSize = parseFloat(computedStyle.fontSize);\n    return 1.2 * fontSize;\n  }\n  return parseFloat(computedlineHeight);\n};\nexport const getStylingHeight = (textarea: HTMLTextAreaElement) => {\n  const cssStyle = window.getComputedStyle(textarea);\n  const paddingTop = parseFloat(cssStyle.paddingTop);\n  const paddingBottom = parseFloat(cssStyle.paddingBottom);\n  const borderTop = parseFloat(cssStyle.borderTop);\n  const borderBottom = parseFloat(cssStyle.borderBottom);\n  return { paddingHeight: paddingTop + paddingBottom, borderHeight: borderTop + borderBottom };\n};\n","import type { ComponentProps, RefObject } from 'preact';\nimport { useLayoutEffect } from 'preact/hooks';\nimport { calculateLineHeight, getStylingHeight } from './ScrollHeightUtils';\nimport { TextAreaAutosize } from './TextAreaAutosize';\n\ntype PickedPropsFromTextAreaAutosize = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'minRows' | 'maxRows' | 'value'\n>;\ntype Props = PickedPropsFromTextAreaAutosize & {\n  isReadonly?: boolean;\n  enabledElementRef: RefObject<HTMLTextAreaElement>;\n  readonlyElementRef: RefObject<HTMLTextAreaElement | HTMLDivElement>;\n};\n\n// TODO: Make this fire when the container resizes - JET-50840\nexport const useTextAreaAutosizing = ({\n  isReadonly,\n  enabledElementRef,\n  readonlyElementRef,\n  minRows = 2,\n  maxRows,\n  value\n}: Props) => {\n  useLayoutEffect(() => {\n    const textareaRef = isReadonly ? readonlyElementRef : enabledElementRef;\n    if (textareaRef.current === null) return;\n    if (textareaRef.current instanceof HTMLDivElement) return; // We don't need to do anything if the readonlyElement is a DIV.\n    const textarea = textareaRef.current;\n    const lineHeight = calculateLineHeight(textarea);\n    textarea.style.height = '0';\n    const { paddingHeight, borderHeight } = getStylingHeight(textarea);\n    const heightForMinRows = lineHeight * minRows + paddingHeight + borderHeight;\n    const scrollHeight = textarea.scrollHeight + borderHeight;\n    let resizedHeight = 0;\n    // if maxRows is -1 the textarea will grow or shrink to fit all the content.\n    // it won't shrink any less than rows.\n    if (maxRows === undefined) {\n      // we want to fit the entire scrollHeight, but we don't want\n      // to shrink smaller than the height for rows.\n      if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else if (maxRows > minRows) {\n      // if maxRows is positive and greater than rows, the textarea will grow to fit the content\n      // up to maxrows, or shrink to fit the content and down to rows.\n      const heightForMaxRows = lineHeight * maxRows + paddingHeight + borderHeight;\n      if (scrollHeight > heightForMaxRows) {\n        resizedHeight = heightForMaxRows;\n      } else if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else {\n      resizedHeight = heightForMinRows;\n    }\n    // The 0.5 gaurantees that the clientHeight will be bigger than the scrollHeight, so no scrollbar appears.\n    textarea.style.height = resizedHeight + 0.5 + 'px';\n  }, [value, minRows, maxRows, isReadonly, enabledElementRef, readonlyElementRef]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { useTextAreaAutosizing } from './useTextAreaAutosizing';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MaxLengthCounter } from '../UNSAFE_TextArea';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { ComponentMessageItem } from '../UNSAFE_ComponentMessage';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = TestIdProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Specifies the maximum number of rows that the TextAreaAutosize is allowed to grow to.\n   * If maxRows is less than minRows, it is ignored.\n   */\n  maxRows?: number;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Specifies the minimum number of rows that the TextAreaAutosize is allowed to shrink to.\n   */\n  minRows?: number;\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked when the user inputs a value.\n   *\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\ntype FocusSelectHandle = FocusableHandle & SelectableHandle;\n/**\n * A text area auto size displays a field that allows a user to enter a multi-line text value, and will adjust its height based on its content.\n */\nexport const TextAreaAutosize = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      maxRows,\n      messages,\n      minRows = 2,\n      placeholder,\n      role,\n      //TODO: Add counter to show the length remaining - JET-50752\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const formControl_limitReached = maxLength\n      ? translations.formControl_limitReached({\n          CHARACTER_LIMIT: maxLength\n        })\n      : '';\n\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const maxLengthDescribedByIdRef = useRef<string>(useId());\n    // The enabledAriaDescribedBy includes the maxLengthDescribedById in addition to what was passed in to aria-describedby.\n    // We don't need to announce the max length message for readonly, as it only applies when editing the value.\n    const enabledAriaDescribedBy = ariaDescribedBy\n      ? `${ariaDescribedBy} ${maxLengthDescribedByIdRef.current}`\n      : maxLengthDescribedByIdRef.current;\n\n    const enabledElementRef = useRef<HTMLTextAreaElement>(null);\n    const readonlyElementRef = useRef<HTMLTextAreaElement | HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLTextAreaElement, HTMLTextAreaElement | HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    const { methods: selectMethods } =\n      useSelectableTextField<HTMLTextAreaElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthReached, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const limitMessage = [{ detail: formControl_limitReached, severity: 'info' }];\n    const allMessages = [\n      ...(messages ?? []),\n      ...(isMaxLengthReached ? limitMessage : [])\n    ] as ComponentMessageItem[];\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy: isReadonly || isDisabled ? ariaDescribedBy : enabledAriaDescribedBy,\n        contentVariant: 'textarea',\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages: allMessages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, [enabledElementRef]);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={allMessages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={allMessages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    useTextAreaAutosizing({\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      minRows,\n      maxRows,\n      value\n    });\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          elementRef={readonlyElementRef}\n          {...(maxRows ? { as: 'textarea', rows: minRows } : { as: 'div' })}\n          autoFocus={autoFocus}\n          textAlign={textAlign}\n          value={value}\n          variant=\"textarea\"\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            mainContent={mainContent}\n            ref={anchorRef}\n            testId={testId}\n            {...fieldLabelProps}\n          />\n        </FormFieldContext.Provider>\n      );\n    }\n    const hasMaxLength = maxLength !== undefined;\n    const mainContent = (\n      <>\n        <TextFieldInput\n          as=\"textarea\"\n          aria-label={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={minRows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && hasMaxLength && (\n          <MaxLengthCounter\n            maxLength={maxLength}\n            valueLength={valueLength}\n            onClick={onClickCounter}\n          />\n        )}\n        {hasMaxLength && (\n          <HiddenAccessible id={maxLengthDescribedByIdRef.current}>\n            {translations.formControl_maxLength({\n              MAX_LENGTH: `${maxLength}`\n            })}\n          </HiddenAccessible>\n        )}\n        {hasMaxLength && isFocused && (\n          <MaxLengthLiveRegion\n            maxLength={maxLength}\n            valueLength={valueLength}\n            testId={testId + '_remainingChars'}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          columnSpan={columnSpan}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onFocusOut}\n          onFocus={focusProps?.onFocusIn}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["useTextAreaAutosizing","isReadonly","enabledElementRef","readonlyElementRef","minRows","maxRows","value","useLayoutEffect","textareaRef","current","HTMLDivElement","textarea","lineHeight","computedStyle","window","getComputedStyle","computedlineHeight","parseFloat","fontSize","calculateLineHeight","style","height","paddingHeight","borderHeight","cssStyle","paddingTop","paddingBottom","borderTop","borderBottom","getStylingHeight","heightForMinRows","scrollHeight","resizedHeight","undefined","heightForMaxRows","TextAreaAutosize","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","columnSpan","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthCounter","maxLengthUnit","messages","placeholder","role","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","variant","onInput","onCommit","testId","ref","translations","useTranslationBundle","formControl_limitReached","CHARACTER_LIMIT","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","maxLengthDescribedByIdRef","useRef","useId","enabledAriaDescribedBy","focusProps","isFocused","methods","focusMethods","useFocusableTextField","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","isMaxLengthReached","valueLength","onFilteredInput","useLengthFilter","allMessages","severity","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","contentVariant","styleVariant","onClickCounter","elm","len","length","setSelectionRange","focus","labelComp","_jsx","jsx","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","id","elementRef","as","rows","hasEmptyLabel","hasInsideLabel","FormFieldContext","Provider","children","ReadonlyTextField","hasMaxLength","_jsxs","_Fragment","Fragment","TextFieldInput","inputRef","MaxLengthCounter","onClick","HiddenAccessible","formControl_maxLength","MAX_LENGTH","MaxLengthLiveRegion","TextField","onBlur","onFocusOut","onFocus","onFocusIn","mainFieldRef"],"mappings":"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"}