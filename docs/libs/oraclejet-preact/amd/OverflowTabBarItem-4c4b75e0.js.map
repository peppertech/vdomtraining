{"version":3,"file":"OverflowTabBarItem-4c4b75e0.js","sources":["../../src/UNSAFE_RedwoodIcons/OverflowH/OverflowH.tsx","../../src/UNSAFE_TabBarCommon/OverflowTabBarItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates. All rights reserved.\n * https://www.oracle.com/contracts/docs/cloud_csa_online_v062223_us_eng.pdf?download=false&er=221886\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox' | 'children'>;\nconst SvgOverflowH = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path\n        d=\"M6 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm8 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm8 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgOverflowH as OverflowH };\n","import { ComponentChild, ComponentProps, createRef } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport {\n  NavigationListItem,\n  NavigationList,\n  RemovableNavigationListItem,\n  FocusableHandle\n} from '../UNSAFE_NavigationList';\nimport { OverflowH } from '../UNSAFE_RedwoodIcons/OverflowH';\nimport { useTabBarContext } from './useTabBarContext';\nimport { Dropdown } from '../UNSAFE_Dropdown';\nimport { Sheet } from '../UNSAFE_Sheet';\nimport { BaseTabBarItem } from './BaseTabBarItem';\nimport { styles } from './themes/OverflowTabBarItemStyles.css';\nimport { TabBarItem } from './TabBarItem';\n\nexport type OverflowSelectionDetail<K> = {\n  value: K;\n};\n\nexport type CloseDetail = {\n  /**\n   * dismissed represents dismissing the DropDown\n   */\n  reason: 'dismissed' | 'itemAction' | 'outsideMousedown';\n};\n\nexport type Item<K extends string | number> = Omit<\n  ComponentProps<typeof TabBarItem<K>>,\n  'testId' | 'aria-controls'\n> & {\n  isRemovable?: boolean;\n  /**\n   * Accepts the tabpanel element's ID associated with the tab item\n   **/\n  tabPanelId?: string;\n};\n\nexport type OverflowTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  overflowItemKey: K;\n  /**\n   * Whether to open the popup\n   */\n  isOpen: boolean;\n  /**\n   * Property that triggers a callback when DropDown is supposed to be closed.\n   */\n  onClose?: (detail: CloseDetail) => void;\n  /**\n   * The icon of the OverflowTabBarItem\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * An array of data used by NavigationList to render individual overflow items.\n   */\n  overflowItems?: Item<K>[];\n};\n\n/**\n * An OverflowTabBarItem renders TabBarItems in a device appropriate popup. OverflowTabBarItem is used internally in an OverflowTabBar.\n */\n\nexport function OverflowTabBarItem<K extends string | number>({\n  overflowItemKey,\n  icon,\n  badge,\n  overflowItems,\n  isOpen,\n  onClose\n}: OverflowTabBarItemProps<K>) {\n  const { selection, showFocusRing, isEdgeBottom, onSelect, onRemove, layout } = useTabBarContext();\n\n  const isPointerSelection = useRef<boolean>(false);\n\n  const overflowTabBarItemRef = useRef<HTMLDivElement>(null);\n  const navigationListRef = createRef<FocusableHandle>();\n\n  const handleSelectionChange = useCallback<\n    Required<ComponentProps<typeof NavigationList>>['onSelectionChange']\n  >(\n    (detail: { value: string | number; reason?: 'pointer' | 'keyboard' }) => {\n      if (detail.reason === 'pointer') {\n        isPointerSelection.current = true;\n      }\n      onSelect?.({ value: detail.value });\n      onClose?.({ reason: 'itemAction' });\n    },\n    [onSelect, onClose]\n  );\n\n  const handleDropdownClose = useCallback(\n    (e: CloseDetail) => {\n      onClose?.({ reason: e.reason });\n    },\n    [onClose]\n  );\n\n  const handleSheetClose = useCallback(() => {\n    onClose?.({ reason: 'dismissed' });\n  }, [onClose]);\n\n  //When NavigationList steals focus the app resets it. Not always would it be reset to\n  //parent of OverflowTabBarItem. Though currentKey would be correct, but focusRing would would not be visible\n  //Hence we check for isPointerSelection.current\n\n  const focusRingRequirement = showFocusRing && !isPointerSelection.current && !getIsMobile();\n\n  const overflowContainsKey = (searchKey: K) => {\n    return overflowItems?.find((item) => item.itemKey === searchKey) != null;\n  };\n\n  const currentPanelId = overflowItems?.find((item) => item.itemKey === selection)?.tabPanelId;\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const isSelected = selection !== undefined && overflowContainsKey(selection as K);\n\n  //instead of specifying flex: '1 0 auto' in cssProps var\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  const navContainerClasses = classNames([styles.navContainerBase]);\n\n  const navContainerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowDown') {\n        event.preventDefault();\n        navigationListRef.current?.focus();\n      }\n    },\n    [navigationListRef]\n  );\n  const getNavigationList = useCallback(() => {\n    return (\n      <div onKeyDown={handleKeyDown} tabIndex={0} ref={navContainerRef} class={navContainerClasses}>\n        <NavigationList\n          ref={navigationListRef}\n          selection={selection}\n          onSelectionChange={handleSelectionChange}\n          onRemove={onRemove}>\n          {overflowItems?.map((item) =>\n            item.isRemovable ? (\n              <RemovableNavigationListItem\n                itemKey={item.itemKey}\n                label={item.label}\n                badge={item.badge}\n                metadata={item.metadata}\n                severity={item.severity}\n              />\n            ) : (\n              <NavigationListItem\n                itemKey={item.itemKey}\n                label={item.label}\n                badge={item.badge}\n                metadata={item.metadata}\n                severity={item.severity}\n              />\n            )\n          )}\n        </NavigationList>\n      </div>\n    );\n  }, [\n    handleKeyDown,\n    navContainerClasses,\n    navigationListRef,\n    selection,\n    handleSelectionChange,\n    onRemove,\n    overflowItems\n  ]);\n\n  return (\n    <>\n      {overflowItems && overflowItems.length > 0 && (\n        <div ref={overflowTabBarItemRef} style={flexDimensions}>\n          <BaseTabBarItem\n            aria-controls={currentPanelId}\n            itemKey={overflowItemKey}\n            label={translations.overflowItemLabel()}\n            icon={icon ? icon : <OverflowH />}\n            badge={badge}\n            showFocusRingOverride={focusRingRequirement}\n            selectionOverride={isSelected}\n            displayOverride={'icons'}\n            aria-haspopup={true}\n          />\n        </div>\n      )}\n      {getIsMobile() ? (\n        <Sheet isOpen={isOpen} onClose={handleSheetClose}>\n          {getNavigationList()}\n        </Sheet>\n      ) : (\n        <Dropdown\n          initialFocus=\"firstFocusable\"\n          isOpen={isOpen}\n          onClose={handleDropdownClose}\n          placement={isEdgeBottom ? 'top-end' : 'bottom-end'}\n          anchorRef={overflowTabBarItemRef}>\n          {getNavigationList()}\n        </Dropdown>\n      )}\n    </>\n  );\n}\n\nconst getIsMobile = () => {\n  const { deviceType } = getClientHints();\n  return deviceType === 'phone';\n};\n"],"names":["SvgOverflowH","props","_jsx","jsx","Icon","viewBox","children","fill","d","getIsMobile","deviceType","getClientHints","overflowItemKey","icon","badge","overflowItems","isOpen","onClose","selection","showFocusRing","isEdgeBottom","onSelect","onRemove","layout","useTabBarContext","isPointerSelection","useRef","overflowTabBarItemRef","navigationListRef","createRef","handleSelectionChange","useCallback","detail","reason","current","value","handleDropdownClose","e","handleSheetClose","focusRingRequirement","currentPanelId","find","item","itemKey","tabPanelId","translations","useTranslationBundle","isSelected","undefined","searchKey","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","navContainerClasses","classNames","styles","navContainerBase","navContainerRef","handleKeyDown","event","key","preventDefault","focus","getNavigationList","onKeyDown","tabIndex","ref","class","NavigationList","onSelectionChange","map","isRemovable","RemovableNavigationListItem","label","metadata","severity","NavigationListItem","_jsxs","_Fragment","length","style","BaseTabBarItem","overflowItemLabel","OverflowH","showFocusRingOverride","selectionOverride","displayOverride","Sheet","Dropdown","initialFocus","placement","anchorRef"],"mappings":"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"}