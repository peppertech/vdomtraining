{"version":3,"file":"UNSAFE_RichSelectionItem.js","sources":["../../src/UNSAFE_RichSelectionItem/RichSelectionTextContent.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionMediaItem.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionControl.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionItem.tsx"],"sourcesContent":["import { TruncatingText } from '#UNSAFE_TruncatingText';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from './themes/RichSelectionItemStyles.css';\n\ntype RichSelectionTextContentProps = {\n  secondaryTextId?: string;\n  label?: string;\n  secondaryText?: string;\n  isDisabled?: boolean;\n  // INFO: label truncates for 1 line in only XL\n  isLayoutXL?: boolean;\n  labelId: string;\n};\n// INFO: Label and SecondaryText Content handling\nexport const RichSelectionTextContent = ({\n  secondaryTextId,\n  isDisabled,\n  isLayoutXL,\n  label,\n  labelId,\n  secondaryText\n}: RichSelectionTextContentProps) => {\n  const labelContent = (\n    <TruncatingText\n      variant={isDisabled ? 'disabled' : 'primary'}\n      lineClamp={isLayoutXL ? 1 : 2}\n      id={labelId}>\n      {label}\n    </TruncatingText>\n  );\n  const classes = classNames([\n    isLayoutXL ? styles.densityWrapper : styles.growOneColumn,\n    !isLayoutXL && !secondaryText && styles.labelOnly\n  ]);\n\n  return (\n    <div className={classes}>\n      {labelContent}\n      {secondaryText && (\n        <TruncatingText\n          size=\"sm\"\n          variant={isDisabled ? 'disabled' : 'secondary'}\n          lineClamp={3}\n          id={secondaryTextId}>\n          {secondaryText}\n        </TruncatingText>\n      )}\n    </div>\n  );\n};\n","import { Avatar } from '#UNSAFE_Avatar';\nimport { styles } from './themes/RichSelectionItemStyles.css';\nimport { Center } from '#UNSAFE_Center';\nimport { View } from '#UNSAFE_View';\nimport { AspectRatio } from '#UNSAFE_AspectRatio';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { RichSelectionMediaItemProps } from './RichSelectionTypes';\n\ntype ThumbnailProps = TestIdProps & {\n  thumbnailSrc?: string;\n  mediaAccessibleLabel?: string;\n} & Pick<RichSelectionMediaItemProps, 'layout'>;\n\nconst ThumbnailXL = ({ thumbnailSrc, mediaAccessibleLabel, testId }: ThumbnailProps) => {\n  const testIdProps = useTestId(testId ? `${testId}_thumbnail` : undefined);\n\n  return (\n    <AspectRatio ratio=\"4/3\">\n      <img\n        alt={mediaAccessibleLabel}\n        className={styles.thumbnailImage}\n        role={!mediaAccessibleLabel ? 'presentation' : undefined}\n        src={thumbnailSrc}\n        {...testIdProps}\n      />\n    </AspectRatio>\n  );\n};\n\nconst Thumbnail = ({ thumbnailSrc, mediaAccessibleLabel, layout, testId }: ThumbnailProps) => {\n  const thumbnailClass = layout === 'md' ? styles.mdMediaVariant : styles.smMediaVariant;\n  const testIdProps = useTestId(testId ? `${testId}_thumbnail` : undefined);\n  return (\n    <img\n      alt={mediaAccessibleLabel}\n      className={thumbnailClass}\n      role={!mediaAccessibleLabel ? 'presentation' : undefined}\n      src={thumbnailSrc}\n      {...testIdProps}\n    />\n  );\n};\n\nconst MediumRenderer = ({\n  mediaAccessibleLabel,\n  thumbnailSrc,\n  layout,\n  avatar,\n  testId\n}: Partial<RichSelectionMediaItemProps>) => {\n  const testIdProps = useTestId(testId ? `${testId}_medium` : undefined);\n  const mediumMediaItem = avatar ? (\n    <Avatar {...avatar} aria-label={mediaAccessibleLabel} {...testIdProps} />\n  ) : (\n    <Thumbnail\n      thumbnailSrc={thumbnailSrc}\n      mediaAccessibleLabel={mediaAccessibleLabel}\n      layout={layout}\n      testId={testId}\n    />\n  );\n\n  return <Center>{mediumMediaItem}</Center>;\n};\n\nconst SmallRenderer = ({\n  avatar,\n  iconClass,\n  layout,\n  thumbnailSrc,\n  mediaAccessibleLabel,\n  testId\n}: Partial<RichSelectionMediaItemProps>) => {\n  const testIdProps = useTestId(testId ? `${testId}_small` : undefined);\n  let smallMediaItem;\n  if (avatar) {\n    smallMediaItem = (\n      <Avatar {...avatar} aria-label={mediaAccessibleLabel} size=\"xs\" {...testIdProps} />\n    );\n  } else if (thumbnailSrc) {\n    smallMediaItem = (\n      <Thumbnail\n        thumbnailSrc={thumbnailSrc}\n        mediaAccessibleLabel={mediaAccessibleLabel}\n        layout={layout}\n        testId={testId}\n        {...testIdProps}\n      />\n    );\n  } else if (iconClass) {\n    smallMediaItem = <div class={`${styles.iconWrapper} ${iconClass}`} {...testIdProps}></div>;\n  }\n\n  return <Center>{smallMediaItem}</Center>;\n};\n\n// INFO: Media Item handling\nexport const RichSelectionMediaItem = ({\n  avatar,\n  iconClass,\n  hasSecondaryText,\n  mediaAccessibleLabel,\n  layout,\n  thumbnailSrc,\n  testId\n}: RichSelectionMediaItemProps) => {\n  if (!layout) {\n    return null;\n  }\n\n  switch (layout) {\n    case 'xl':\n      return (\n        <ThumbnailXL\n          thumbnailSrc={thumbnailSrc}\n          mediaAccessibleLabel={mediaAccessibleLabel}\n          testId={testId}\n        />\n      );\n\n    case 'md':\n      const mediumMedia = avatar ? { avatar } : thumbnailSrc ? { thumbnailSrc } : undefined;\n      return (\n        <View alignSelf={hasSecondaryText ? 'start' : 'center'}>\n          <MediumRenderer\n            mediaAccessibleLabel={mediaAccessibleLabel}\n            layout={layout}\n            testId={testId}\n            {...mediumMedia}\n          />\n        </View>\n      );\n\n    case 'sm':\n      const smallMedia = avatar\n        ? { avatar, mediaAccessibleLabel }\n        : thumbnailSrc\n        ? { thumbnailSrc, mediaAccessibleLabel }\n        : iconClass\n        ? { iconClass }\n        : undefined;\n      return (\n        <View alignSelf={hasSecondaryText ? 'start' : 'center'}>\n          <SmallRenderer {...smallMedia} layout={layout} testId={testId} />\n        </View>\n      );\n\n    default:\n      return null;\n  }\n};\n","import type { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useInteractionStyle } from '#hooks/UNSAFE_useInteractionStyle';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTestId } from '#hooks/UNSAFE_useTestId';\nimport { StyledCheckbox } from '#PRIVATE_StyledCheckbox';\nimport { CheckIcon } from '#PRIVATE_ThemedIcons/CheckIcon';\nimport { RadioOffIcon } from '#PRIVATE_ThemedIcons/RadioOffIcon';\nimport { RadioOnIcon } from '#PRIVATE_ThemedIcons/RadioOnIcon';\nimport { useCheckboxSetContext } from '#UNSAFE_CheckboxSet';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { useRadioItemContext } from '#UNSAFE_RadioItem/RadioItemContext';\nimport { radioIconVars } from '#UNSAFE_RadioItem/themes/RadioIconContract.css';\nimport { RadioIconVariantOptions } from '#UNSAFE_RadioItem/themes/RadioIconStyles.css';\nimport { radioDefaultColor, radioDisabledColor } from '#UNSAFE_RadioItem/themes/RadioStyles.css';\nimport { RadioIconRedwoodTheme } from '#UNSAFE_RadioItem/themes/redwood/RadioIconTheme';\nimport { useRadioSetContext } from '#UNSAFE_RadioSet/RadioSetContext';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from './themes/RichSelectionItemStyles.css';\n\n/**\n * Selective Element Props Type.\n */\ntype RichSelectionControlProps = {\n  value: string | number;\n  inputRef?: RefObject<HTMLInputElement>;\n  isFocus?: boolean;\n  isLayoutXL?: boolean;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  isSelected?: boolean;\n  describedBy?: string;\n  labelledBy: string;\n  testId?: string;\n  onBlur?: (event: FocusEvent) => void;\n  onFocus?: (event: FocusEvent) => void;\n};\n\nexport const RadioControl = ({\n  value,\n  inputRef,\n  isFocus,\n  isDisabled,\n  isLayoutXL,\n  isReadonly,\n  isSelected,\n  describedBy,\n  labelledBy,\n  testId,\n  onBlur,\n  onFocus\n}: RichSelectionControlProps) => {\n  const { name, value: radioGroupValue, onCommit } = useRadioSetContext();\n\n  const testIdProps = useTestId(testId);\n\n  const IconComp = isReadonly\n    ? isSelected\n      ? CheckIcon\n      : RadioOffIcon\n    : isSelected\n    ? RadioOnIcon\n    : RadioOffIcon;\n\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const { interactionProps, applyActiveStyle } = useInteractionStyle();\n\n  const onChangeHandler = useCallback(\n    (event: Event) => {\n      event.stopPropagation();\n      onCommit?.({ previousValue: radioGroupValue, value });\n    },\n    [value, radioGroupValue, onCommit]\n  );\n\n  /**\n   * When focused the view should have the respective RichSelectionItem.\n   */\n  useEffect(() => {\n    if (isFocus) {\n      spanRef?.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocus, spanRef]);\n\n  const radioColor = isDisabled ? radioDisabledColor : radioDefaultColor;\n  const { classes: radioIconClasses } = useComponentTheme<RadioIconVariantOptions>(\n    RadioIconRedwoodTheme,\n    {\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      active: applyActiveStyle ? 'isActive' : 'notActive',\n      richSelection: isLayoutXL ? 'isLayoutXL' : 'notLayoutXL'\n    }\n  );\n\n  const { isTabbable } = useTabbableMode();\n  const { index } = useRadioItemContext();\n  const tabIndex =\n    isTabbable !== false && ((index === 0 && !radioGroupValue) || isSelected) ? 0 : -1;\n\n  const hiddenInput = (\n    <HiddenAccessible>\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        {...(!isReadonly &&\n          !isDisabled && {\n            onChange: onChangeHandler\n          })}\n        checked={isSelected}\n        disabled={isDisabled}\n        aria-labelledby={labelledBy}\n        aria-describedby={describedBy}\n        tabIndex={tabIndex}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={inputRef}\n        {...testIdProps}\n      />\n    </HiddenAccessible>\n  );\n\n  // Radio control is visually hidden in readonly mode unless it is selected\n  if (!isSelected && isReadonly) {\n    return <span class={styles.inputElement}>{hiddenInput}</span>;\n  }\n\n  return (\n    <span\n      ref={spanRef}\n      class={classNames([radioColor, isLayoutXL ? styles.radioWrapper : undefined])}>\n      {hiddenInput}\n      <span aria-hidden=\"true\" class={radioIconClasses} {...interactionProps}>\n        <IconComp size={radioIconVars.iconSize} color=\"currentColor\" />\n      </span>\n    </span>\n  );\n};\n\nexport const CheckboxControl = ({\n  value,\n  inputRef,\n  isSelected,\n  isLayoutXL,\n  isDisabled,\n  isReadonly,\n  describedBy,\n  labelledBy,\n  testId,\n  onBlur,\n  onFocus\n}: RichSelectionControlProps) => {\n  const { name } = useCheckboxSetContext();\n  const testIdProps = useTestId(testId);\n  const { isTabbable } = useTabbableMode();\n  const checkboxStyles = isLayoutXL ? styles.checkboxWrapper : styles.checkboxAlign;\n\n  // Checkbox control is visually hidden in readonly mode unless it is selected\n  if (!isSelected && isReadonly) {\n    return (\n      <span class={styles.inputElement}>\n        <HiddenAccessible>\n          <input\n            aria-readonly={true}\n            aria-labelledby={labelledBy}\n            aria-describedby={describedBy}\n            type=\"checkbox\"\n            name={name}\n            value={value}\n            checked={false}\n            disabled={isDisabled}\n            tabIndex={isTabbable ? 0 : -1}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            ref={inputRef}\n            {...testIdProps}\n          />\n        </HiddenAccessible>\n      </span>\n    );\n  }\n\n  return (\n    <span class={checkboxStyles}>\n      <StyledCheckbox\n        aria-describedby={describedBy}\n        aria-labelledby={labelledBy}\n        isDisabled={isDisabled}\n        isReadonly={isReadonly}\n        isChecked={isSelected ? 'checked' : 'unchecked'}\n        name={name}\n        value={value}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={inputRef}\n        {...testIdProps}\n      />\n    </span>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\n\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useRichSelectionContext } from '#PRIVATE_RichSelectionCommon/RichSelectionContext';\nimport { StyledCard } from '#PRIVATE_StyledCard';\nimport { useCheckboxSetContext } from '#UNSAFE_CheckboxSet';\nimport { useRadioSetContext } from '#UNSAFE_RadioSet/RadioSetContext';\nimport { RichSelectionTextContent } from './RichSelectionTextContent';\nimport { RichSelectionMediaItem } from './RichSelectionMediaItem';\nimport { Flex } from '#UNSAFE_Flex';\nimport { styles } from './themes/RichSelectionItemStyles.css';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useFocus } from '#hooks/UNSAFE_useFocus';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { RadioControl, CheckboxControl } from './RichSelectionControl';\nimport { type RichSelectionItemData } from './RichSelectionTypes';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype RichSelectionItemProps<V extends string | number> = RichSelectionItemData<V> & TestIdProps;\n\n/**\n * `RichSelectionItem` is a customizable input card element used in selection interfaces. It can display a label,\n * optional secondary text, and media (such as an avatar, thumbnail, or icon). It supports both radio and checkbox\n * controls, allowing users to make a single or multiple selections, respectively. The component also handles\n * different states such as disabled, readonly, and focus, and renders dynamically based on layout( 'xl', 'md', or 'sm').\n */\nexport const RichSelectionItem = <V extends string | number>({\n  avatar,\n  iconClass,\n  mediaAccessibleLabel,\n  secondaryText,\n  thumbnailSrc,\n  label,\n  value,\n  testId\n}: RichSelectionItemProps<V>) => {\n  const { isReadonly: isFormReadonly, isDisabled: isFormDisabled } = useFormContext();\n  const styledCardRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { selection, layout, messageSeverity } = useRichSelectionContext()!;\n  const { isDisabled: isFieldDisabled, isReadonly: isFieldReadonly } = useFormFieldContext();\n  const { value: radioGroupValue, onCommit: onRadioCommit } = useRadioSetContext();\n  const { value: checkboxGroupValue, onCommit: onCheckboxCommit } = useCheckboxSetContext();\n  const { isFocus, focusProps } = useFocus();\n\n  // Determining selection state for error\n  const styledCardVariant = messageSeverity === 'error' ? 'danger' : undefined;\n  const isDisabled = isFieldDisabled ?? isFormDisabled;\n  const isReadonly = isFieldReadonly ?? isFormReadonly;\n  const id = useId();\n  const isLayoutXL = layout === 'xl';\n  const hasMedia = !!avatar || !!thumbnailSrc || !!iconClass;\n  const labelId = `${id}-labelled-text`;\n  const secondaryTextId = secondaryText ? `${id}-secondary-text` : undefined;\n  const isSingleSelection = selection === 'single';\n  const isSelected = isSingleSelection\n    ? radioGroupValue === value\n    : !!checkboxGroupValue?.has(value);\n\n  // Scroll into view when the RichSelectionItem is focused\n  useEffect(() => {\n    if (isFocus) {\n      styledCardRef?.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocus, styledCardRef]);\n\n  // Text content of label and secondaryText rendering\n  const textContent = (\n    <RichSelectionTextContent\n      secondaryTextId={secondaryTextId}\n      labelId={labelId}\n      isDisabled={isDisabled}\n      isLayoutXL={isLayoutXL}\n      label={label}\n      secondaryText={secondaryText}\n    />\n  );\n\n  // Media content rendering based on available media props respective to layout\n  const media = avatar\n    ? { avatar, mediaAccessibleLabel, layout: layout as 'md' | 'sm' }\n    : thumbnailSrc\n    ? { thumbnailSrc, mediaAccessibleLabel, layout: layout as 'xl' | 'md' | 'sm' }\n    : iconClass\n    ? { iconClass, layout: layout as 'sm' }\n    : undefined;\n\n  const mediaContent = hasMedia ? (\n    <RichSelectionMediaItem\n      {...media}\n      hasSecondaryText={!!secondaryText}\n      testId={testId ? `${testId}_media` : undefined}\n    />\n  ) : undefined;\n\n  // Selection control rendering (radio or checkbox)\n  const selectionControl = (\n    <Flex align={secondaryText ? 'start' : 'center'}>\n      {isSingleSelection ? (\n        <RadioControl\n          {...focusProps}\n          value={value}\n          inputRef={inputRef}\n          isFocus={isFocus}\n          isLayoutXL={isLayoutXL}\n          isDisabled={isDisabled}\n          isReadonly={isReadonly}\n          isSelected={isSelected}\n          describedBy={secondaryTextId}\n          labelledBy={`${id}-labelled-text`}\n          testId={testId ? `${testId}_input_radio` : undefined}\n        />\n      ) : (\n        <CheckboxControl\n          {...focusProps}\n          value={value}\n          inputRef={inputRef}\n          isFocus={isFocus}\n          isDisabled={isDisabled}\n          isLayoutXL={isLayoutXL}\n          isReadonly={isReadonly}\n          isSelected={isSelected}\n          describedBy={secondaryTextId}\n          labelledBy={`${id}-labelled-text`}\n          testId={testId ? `${testId}_input_checkbox` : undefined}\n        />\n      )}\n    </Flex>\n  );\n\n  // Handler for checkbox selection changes\n  const triggerCheckBoxAction = useCallback(() => {\n    // if selected from a click, we need to manually set focus on the input to allow for keyboard navigation\n    inputRef.current?.focus();\n\n    const newGroupValue = new Set(checkboxGroupValue);\n    const isSelectedValue = newGroupValue.has(value);\n    // If the value is already selected, remove it; otherwise, add it\n    isSelectedValue ? newGroupValue.delete(value) : newGroupValue.add(value);\n    onCheckboxCommit?.({\n      previousValue: checkboxGroupValue,\n      value: newGroupValue.size > 0 ? newGroupValue : undefined\n    });\n  }, [checkboxGroupValue, onCheckboxCommit, value]);\n\n  // Handler for radio selection changes\n  const triggerRadioAction = useCallback(() => {\n    if (radioGroupValue !== value) {\n      // if selected from a click, we need to manually set focus on the input to allow for keyboard navigation\n      inputRef.current?.focus();\n\n      onRadioCommit?.({\n        previousValue: radioGroupValue,\n        value: value\n      });\n    }\n  }, [radioGroupValue, onRadioCommit, value]);\n\n  // Event handlers for the interaction of the StyledCard\n  const { pressProps } = usePress(isSingleSelection ? triggerRadioAction : triggerCheckBoxAction, {\n    isDisabled: isDisabled || isReadonly\n  });\n\n  return (\n    <StyledCard\n      cursor=\"pointer\"\n      display=\"inlineFlex\"\n      height=\"100%\"\n      isDisabled={isDisabled || isReadonly}\n      isFocusWithin={isFocus}\n      isSelected={styledCardVariant !== 'danger' && !isDisabled && !isReadonly && isSelected}\n      parentComponentVariant=\"richSelectionItemCard\"\n      ref={styledCardRef}\n      role=\"listitem\"\n      styleVariant={styledCardVariant}\n      testId={testId ? `${testId}_styled_card` : undefined}\n      width=\"100%\"\n      {...pressProps}>\n      {isLayoutXL ? (\n        <Flex direction=\"column\" height=\"100%\" width=\"100%\">\n          {mediaContent}\n          {textContent}\n          <div class={styles.selectionElement}>{selectionControl}</div>\n        </Flex>\n      ) : (\n        <div className={styles.densityWrapper}>\n          <Flex direction=\"row\" gap=\"4x\" height=\"100%\" width=\"100%\">\n            {selectionControl}\n            {textContent}\n            {mediaContent}\n          </Flex>\n        </div>\n      )}\n    </StyledCard>\n  );\n};\n"],"names":["RichSelectionTextContent","secondaryTextId","isDisabled","isLayoutXL","label","labelId","secondaryText","labelContent","_jsx","TruncatingText","variant","lineClamp","id","classes","classNames","styles","densityWrapper","growOneColumn","labelOnly","_jsxs","className","children","size","ThumbnailXL","thumbnailSrc","mediaAccessibleLabel","testId","testIdProps","useTestId","undefined","AspectRatio","ratio","alt","thumbnailImage","role","src","Thumbnail","layout","thumbnailClass","mdMediaVariant","smMediaVariant","MediumRenderer","avatar","mediumMediaItem","jsx","Avatar","Center","SmallRenderer","iconClass","smallMediaItem","class","iconWrapper","RichSelectionMediaItem","hasSecondaryText","mediumMedia","View","alignSelf","smallMedia","RadioControl","value","inputRef","isFocus","isReadonly","isSelected","describedBy","labelledBy","onBlur","onFocus","name","radioGroupValue","onCommit","useRadioSetContext","IconComp","CheckIcon","SvgCheck","RadioOffIcon","SvgRadioButtonOff","RadioOnIcon","SvgRadioButtonOn","spanRef","useRef","interactionProps","applyActiveStyle","useInteractionStyle","onChangeHandler","useCallback","event","stopPropagation","previousValue","useEffect","current","scrollIntoView","block","radioColor","radioDisabledColor","radioDefaultColor","radioIconClasses","useComponentTheme","RadioIconRedwoodTheme","disabled","selected","active","richSelection","isTabbable","useTabbableMode","index","useRadioItemContext","tabIndex","hiddenInput","HiddenAccessible","type","onChange","checked","ref","inputElement","radioWrapper","radioIconVars","iconSize","color","CheckboxControl","useCheckboxSetContext","checkboxStyles","checkboxWrapper","checkboxAlign","StyledCheckbox","isChecked","isFormReadonly","isFormDisabled","useFormContext","styledCardRef","selection","messageSeverity","useRichSelectionContext","isFieldDisabled","isFieldReadonly","useFormFieldContext","onRadioCommit","checkboxGroupValue","onCheckboxCommit","focusProps","useFocus","styledCardVariant","useId","hasMedia","isSingleSelection","has","textContent","media","mediaContent","selectionControl","Flex","align","triggerCheckBoxAction","focus","newGroupValue","Set","delete","add","triggerRadioAction","pressProps","usePress","StyledCard","cursor","display","height","isFocusWithin","parentComponentVariant","styleVariant","width","direction","selectionElement","jsxs","gap"],"mappings":"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"}