{"version":3,"file":"Menu-5d447084.js","sources":["../../src/UNSAFE_Menu/MenuContainer.tsx","../../src/UNSAFE_Menu/useMenuCurrentKey.ts","../../src/UNSAFE_Menu/DropdownMenu.tsx","../../src/UNSAFE_Menu/SheetMenu.tsx","../../src/UNSAFE_Menu/Menu.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\nimport { BaseMenuProps } from './Menu';\nimport { useMenuCurrentKey } from './useMenuCurrentKey';\nimport {\n  getPrevNext,\n  keyElemExtractor,\n  getLastVisible,\n  getKeyboardCloseProps,\n  getCloseSubmenuEvent,\n  MenuCollectionItem,\n  getNVisible,\n  getMenuContainerFocusMethods,\n  getMenuContainerMouseLeave,\n  getMenuPointerDown\n} from './menuUtils';\nimport { useMenuContext } from './useMenuContext';\nimport { MenuContainerContext } from './MenuContainerContext';\nimport { menuStyles } from './themes/MenuStyles.css';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\ntype MenuContainerProps = Omit<\n  BaseMenuProps,\n  'isOpen' | 'defaultPlacement' | 'offsetValue' | 'anchorRef'\n> &\n  Partial<Pick<BaseMenuProps, 'anchorRef'>> & {\n    display: 'sheet' | 'dropdown';\n  };\n\n/*Component where general behavior is handled. Here we controled focus behavior, focus styling, submenu\nopening behavior and current active item behavior. */\nexport const MenuContainer = ({\n  children,\n  'aria-label': ariaLabel,\n  currentFocus = 'menu',\n  display,\n  closeSubmenu,\n  menuId,\n  menuLevel,\n  anchorRef\n}: MenuContainerProps) => {\n  const { onClose, testId } = useMenuContext();\n\n  //Important to know direction so closeSubmenu is handled properly if needed.\n  const { direction } = useUser();\n\n  const menuContainerRef = useRef<HTMLDivElement | null>(null);\n\n  /*We share same behavior as legacy menu on mouseLeave that is:\n  1. If we mouse leave a menuItem but we still on menuContainer and we are not hovering any other menuItem, we keep \n  the focus on the menuItem and hovering style.\n  2. If we mouseLeave but next target is a submenu we open a submenu. \n  3. If we mouseLeave the container and next target is not a submenu, we reset current key and set the focus on the\n  menuContainer.If we mouseLeaved a submenuItem, submenu is closed.\n  General information used by menuItems:\n  -wasMouseMoved: Used to don't allow mouseEnter callbacks being triggered if mouse was not moved already.\n  -lastMouseLeaveValidatedRelatedTarget: We use bubbling nature of events to first check/validate the related target in onMouseLeave events of \n    menuItems. For menuItems we check if the related target is the menuContainer itself or a submenu. We validate there\n    since at this level we don't have access to any submenu. Everytime mouseEnter triggers at menuContainer we have to compare if both\n    relatedTargets are the same(menuContainer and last menuItem one), if not, this means mouse is now outside of the container.\n  */\n  const menuContainerGeneralInformation = useRef<{\n    wasMouseMoved: boolean;\n    lastMouseLeaveMenuItemdRelatedTarget: HTMLElement | null;\n  }>({\n    wasMouseMoved: false,\n    lastMouseLeaveMenuItemdRelatedTarget: null\n  });\n\n  //Key of the active element on this menu container\n  const [currentKey, setCurrentKey] = useState<string | undefined>();\n\n  //State that represents if focused outline styles needs\n  const [showFocusRing, setShowFocusRing] = useState(false);\n\n  //Based on this we would include or not hovering styling. Same as legacy\n  const [isContainerFocused, setIsContainerFocused] = useState(false);\n\n  //Funtion triggered on blur. This is called since if focus is not anymore on the container we would need to do\n  //some validation\n  const blurFunction = () => {\n    if (!menuContainerRef.current?.contains(document.activeElement)) {\n      setShowFocusRing(false);\n      setIsContainerFocused(false);\n    }\n  };\n\n  const focusFunction = () => {\n    setIsContainerFocused(true);\n  };\n\n  const mouseLeaveFunction = (e: MouseEvent) => {\n    //We have to validate if new hover target was already validated correctly, if not this means mouse is now outside container\n    if (\n      !e.relatedTarget ||\n      !(e.relatedTarget as HTMLElement).isEqualNode(\n        menuContainerGeneralInformation.current.lastMouseLeaveMenuItemdRelatedTarget\n      )\n    ) {\n      //We reset current key when mouse is outside the container or any submenu. This is how legacy menu works\n      changeKey({\n        key: undefined,\n        reason: 'mouseEnter'\n      });\n      //We focus menuContainer so keyboard navigation can be still used\n      menuContainerRef.current?.focus();\n    }\n  };\n\n  //Function used to change the currentKey\n  const changeKey = useCallback((detail: MenuCollectionItem) => {\n    setCurrentKey(detail.key);\n    if (detail.reason === 'keyboard') {\n      setShowFocusRing(true);\n    } else {\n      setShowFocusRing(false);\n    }\n  }, []);\n\n  //This is used since if mouse overlaps space when menu is rendered, menuItem could trigger menuEnter,\n  // which is not desirable.Once mouse was moved inside container, we could trigger mouseEnter events normally.\n  const selfDestructiveMouseMoveEvent = useCallback(() => {\n    const handler = (e: MouseEvent) => {\n      const keyElem = keyElemExtractor(e.target as HTMLElement);\n      const key = keyElem?.key;\n      const elem = keyElem?.elem;\n      //We will trigger this event until a menuItem is found. Usually this don't take to much to happen\n      if (key && elem) {\n        menuContainerGeneralInformation.current.wasMouseMoved = true;\n        const evt = new MouseEvent('mouseenter');\n        elem.dispatchEvent(evt);\n        menuContainerRef.current?.removeEventListener('mousemove', handler);\n      }\n    };\n    menuContainerRef.current?.addEventListener('mousemove', handler);\n  }, []);\n\n  const { currentKeyProps } = useMenuCurrentKey(\n    getPrevNext(menuContainerRef.current, true, currentKey),\n    getPrevNext(menuContainerRef.current, false, currentKey),\n    () => getNVisible(menuContainerRef.current, 0),\n    () => getLastVisible(menuContainerRef.current),\n    changeKey\n  );\n\n  useEffect(() => {\n    const menuContainer = menuContainerRef.current;\n    let timer: NodeJS.Timeout | undefined;\n    /*TODO: There are some cases where is not safe to focus since \n    visibility initially is hidden at the Floating component at the initial render. Need a way to solve this in a \n    less dirty way (we are now using timeouts). More details on the descripton of JET-57353 */\n    if (currentFocus !== 'none' && menuContainer) {\n      if (currentFocus === 'menu') {\n        changeKey({ key: undefined, reason: 'click' });\n        const focusMenuContainer = () => {\n          menuContainer.focus();\n        };\n        if (display === 'sheet') {\n          focusMenuContainer();\n        } else {\n          // At this point floating has visibility set as hidden, so also menuContainer. Settimeout added so menuContainer\n          // is visible at that point and can be focused.\n          timer = setTimeout(() => {\n            focusMenuContainer();\n          }, FOCUS_SHIFT_TIMEOUT);\n        }\n      } else if (currentFocus === 'firstItem') {\n        const firstItem = getNVisible(menuContainerRef.current, 0);\n        if (firstItem) {\n          changeKey({ key: firstItem, reason: 'keyboard' });\n        }\n      } else if (currentFocus === 'secondItem') {\n        //This is just used in sheet menu, so no need to set a timeout\n        const item = getNVisible(menuContainerRef.current, 1);\n        if (item) {\n          changeKey({ key: item, reason: 'keyboard' });\n        }\n      }\n    }\n    return () => {\n      //We have to clean timers, because comp can be unmounted after finishing timeouts\n      clearTimeout(timer);\n    };\n  }, [changeKey, currentFocus, menuLevel, display, anchorRef]); // Important to notice we look for a change on the ref object, not it's current value\n\n  useEffect(() => {\n    selfDestructiveMouseMoveEvent();\n  }, [selfDestructiveMouseMoveEvent]);\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div\n      {...(menuId && { id: menuId })}\n      ref={menuContainerRef}\n      tabIndex={!currentKey && (menuLevel === 'main' || display === 'sheet') ? 0 : -1}\n      role=\"menu\"\n      aria-label={ariaLabel}\n      class={classNames([\n        menuStyles.menuContainerStyle,\n        menuStyles[`${display}MenuContainerStyle`]\n      ])}\n      {...mergeProps(\n        currentKeyProps,\n        getKeyboardCloseProps(onClose, menuLevel),\n        getCloseSubmenuEvent(direction, closeSubmenu),\n        getMenuContainerFocusMethods(blurFunction, focusFunction),\n        getMenuContainerMouseLeave(mouseLeaveFunction),\n        getMenuPointerDown()\n      )}\n      {...testIdProps}>\n      <MenuContainerContext.Provider\n        value={{\n          /*We use this ref on dropdownSubmenu since unhover only close the menu if menuContainer ref does not include\n          the new element that receives the hovering */\n          menuContainerRef,\n          currentKey,\n          showFocusRing,\n          changeKey,\n          menuContainerGeneralInformation,\n          isContainerFocused\n        }}>\n        {children}\n      </MenuContainerContext.Provider>\n    </div>\n  );\n};\n\n//Temporal constant, will probably be removed with JET-57353\nconst FOCUS_SHIFT_TIMEOUT = 0;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useMemo } from 'preact/hooks';\n\nimport { MenuCollectionItem } from './menuUtils';\n\n/**\n * Hook for handling current key update due to user interaction including keyboard navigation.\n *\n * @param getPrev function to get the previous key based on the current key\n * @param getNext function to get the next key based on the current key\n * @param getFirstVisible function to get the key of the first available item\n * @param getLastVisible function to get the key of the last available item\n * @param onChange function to invoke if the current key has changed\n * @returns\n */\nexport function useMenuCurrentKey(\n  getPrev: () => string | null,\n  getNext: () => string | null,\n  getFirstVisible: () => string | null,\n  getLastVisible: () => string | null,\n  onChange?: (detail: MenuCollectionItem) => void\n) {\n  const keyDownKeyFunctions = useMemo(() => {\n    return {\n      ArrowDown: getNext,\n      ArrowUp: getPrev,\n      Home: getFirstVisible,\n      End: getLastVisible\n    } as Record<string, (() => string | null) | undefined>;\n  }, [getNext, getPrev, getFirstVisible, getLastVisible]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (onChange) {\n        // TODO: support horizontal layout on icon menu (left/right arrow key)\n        const keyFunction = keyDownKeyFunctions[event.key];\n        if (keyFunction && !event.shiftKey) {\n          const key = keyFunction();\n          if (key) {\n            onChange({ key, reason: 'keyboard' });\n          }\n          event.preventDefault();\n        }\n      }\n    },\n    [onChange, keyDownKeyFunctions]\n  );\n\n  const currentKeyProps = onChange == null ? {} : { onKeyDown };\n  return { currentKeyProps };\n}\n","import { ComponentProps } from 'preact';\nimport { ForwardedRef, forwardRef, useCallback } from 'preact/compat';\n\nimport { Dropdown } from '#UNSAFE_Dropdown';\n\nimport { MenuContainer } from './MenuContainer';\nimport { BaseMenuProps } from './Menu';\nimport { keyElemExtractor } from './menuUtils';\nimport { useMenuContext } from './useMenuContext';\nimport { dropdownMenuStyles } from './themes/DropdownMenuStyles.css';\n\ntype DropdownMenuProps = BaseMenuProps & DropdownMenuFloatingProps;\n\ntype DropdownProps = ComponentProps<typeof Dropdown>;\ntype DropdownMenuFloatingProps = {\n  defaultPlacement: DropdownProps['placement'];\n  offsetValue: DropdownProps['offset'];\n  flipOptions: DropdownProps['flipOptions'];\n};\n\n//TODO: Start consuming PRIVATE_Dropdown. JET-53371\n/*Component used to render a dropdown menu. For now this is just rendered when device is not a phone. */\nexport const DropdownMenu = forwardRef(\n  (\n    {\n      anchorRef,\n      defaultPlacement,\n      offsetValue,\n      closeSubmenu,\n      children,\n      'aria-label': ariaLabel,\n      currentFocus,\n      menuId,\n      menuLevel,\n      flipOptions,\n      isOpen\n    }: DropdownMenuProps,\n    ref?: ForwardedRef<HTMLDivElement>\n  ) => {\n    const { onClose } = useMenuContext();\n\n    const outsideMousedownHandler = useCallback<Required<DropdownProps>['onClose']>(\n      (e) => {\n        if (menuLevel === 'sub') return;\n        // Outside click is not considered when menuItem was clicked\n        if (e.reason === 'outsideMousedown') {\n          const menuItemKey = keyElemExtractor(e.target as HTMLElement)?.key;\n          if (!menuItemKey) {\n            onClose?.({ reason: 'outsideClick', target: e.target as Element });\n          }\n        }\n      },\n      [onClose, menuLevel]\n    );\n\n    // TODO - Reuse a dropdown component instead of creating floating by ourselves.\n\n    /* \n    For this comment, we could divide menus in these categories:\n    - Dropdown menus: \"Attached\" to an specific element.\n    - Context menus: \"Attached\" to coords or an specific element.\n    We are passing anchorRef as the logicalParent of the Layer used here, even if we pass coords. So we could say \n    that we are passing an incorrect logicalParentRef for context menus. But, passing coords has no impacts either on \n    accessibility or behavior since this logical parent is only used by legacy collections for dom searching to find \n    dropdown menus. More information about that here:  \n    This comment also applies for sheet menus that in this specific context(relation between logicalParentRef\n    and menu) can be considered \"dropdown menus\"\n    For now using type assertion is safe enough, but it's kind of a dirty solution. This is a point that can be included \n    in near future conversation related to semantics of menus in favor of dividing dropdown and context menu: \n      \n    */\n\n    return (\n      <Dropdown\n        onClose={outsideMousedownHandler}\n        isOpen={isOpen}\n        placement={defaultPlacement}\n        anchorRef={anchorRef}\n        flipOptions={flipOptions}\n        offset={offsetValue}\n        shiftOptions={{\n          mainAxis: false,\n          crossAxis: false\n        }}>\n        <div\n          class={dropdownMenuStyles.base}\n          //TODO: JET-60745. Add minWidth prop on menu\n          style={{\n            minWidth: MENU_MIN_WIDTH\n          }}\n          ref={ref}>\n          <MenuContainer\n            menuLevel={menuLevel}\n            closeSubmenu={closeSubmenu}\n            aria-label={ariaLabel}\n            currentFocus={currentFocus}\n            menuId={menuId}\n            display=\"dropdown\"\n            anchorRef={anchorRef}>\n            {children}\n          </MenuContainer>\n        </div>\n      </Dropdown>\n    );\n  }\n);\n\nconst MENU_MIN_WIDTH = 200;\n","import { RefObject, forwardRef } from 'preact/compat';\nimport { useCallback, useEffect } from 'preact/hooks';\n\n//Once Sheet is consumed this will be removed\nimport { useSheetSwipe } from '../UNSAFE_Sheet';\nimport useModal from '../UNSAFE_Modal/hooks/useModal';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { Layer } from '../UNSAFE_Layer';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\nimport { BaseMenuProps } from './Menu';\nimport { useMenuContext } from './useMenuContext';\nimport { MenuContainer } from './MenuContainer';\nimport { sheetMenuStyles } from './themes/SheetMenuStyles.css';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\nexport type SheetMenuProps = BaseMenuProps;\n\nconst ModalWrapper = ({ children }: IntrinsicProps) => (\n  <div class={sheetMenuStyles.modalWrapper}>{children}</div>\n);\nconst ModalContainer = forwardRef<HTMLDivElement, IntrinsicProps>(({ children }, ref) => (\n  <div class={sheetMenuStyles.modalContainer} ref={ref}>\n    {children}\n  </div>\n));\n//ModalBackdrop on modal folder not setting the style on oj-c enviroment\n//Creating it here so we don't see that issue\nconst ModalBackdrop = ({ backdropVisible = false }) => (\n  <div\n    class={classNames([\n      sheetMenuStyles.modalBackdrop,\n      backdropVisible && sheetMenuStyles.modalBackdropVisible\n    ])}\n  />\n);\n\n//TODO: Start consuming PRIVATE_Sheet. JET-56072\nexport const SheetMenu = ({\n  children,\n  'aria-label': ariaLabel,\n  currentFocus,\n  anchorRef,\n  closeSubmenu,\n  menuLevel\n}: SheetMenuProps) => {\n  const { onClose } = useMenuContext();\n  useEffect(() => {\n    // We set the overflow body as hidden when mounted and revert to original overflow value when is\n    // unmounted. This is done to don't allow backgound being scrolled\n    // This will be handled by modal/popup when ready\n    const initialOverflow = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = initialOverflow;\n    };\n  }, []);\n\n  const dismissHandler = useCallback(() => {\n    onClose?.({ reason: 'dismissed' });\n  }, [onClose]);\n\n  const { backdropRef } = useModal({ isOpen: true, onBackdropClick: dismissHandler });\n  //TODO: Use useSwipe when it works on components that could scroll.\n  const { swipeProps } = useSheetSwipe(dismissHandler);\n\n  // TODO: For now we are mimicking current modal but using a \"different position setting\" (using absolute positioning instead of flex).\n  // Have to use modal/popup component directly instead doing this composition when that component could satisfy our requirments.\n  return (\n    <Layer logicalParentRef={anchorRef as RefObject<Element>}>\n      <ModalWrapper>\n        <ModalBackdrop backdropVisible={menuLevel === 'main'}></ModalBackdrop>\n        <ModalContainer ref={backdropRef}>\n          <div class={sheetMenuStyles.sheetMenuContainerWrapper} {...swipeProps}>\n            <MenuContainer\n              aria-label={ariaLabel}\n              currentFocus={currentFocus}\n              display=\"sheet\"\n              closeSubmenu={closeSubmenu}\n              menuLevel={menuLevel}>\n              {children}\n            </MenuContainer>\n          </div>\n        </ModalContainer>\n      </ModalWrapper>\n    </Layer>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\n\nimport { DropdownMenu } from './DropdownMenu';\nimport { SheetMenu } from './SheetMenu';\nimport { MenuContext } from './MenuContext';\nimport { getIsMobile } from './menuUtils';\nimport { Floating } from '../UNSAFE_Floating';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\n\ntype MenuProps = {\n  /**\n   * Trigger element reference\n   */\n  anchorRef: FloatingProps['anchorRef'];\n  /**\n   * Placement of the floating element relative to its reference element.\n   */\n  placement?: FloatingProps['placement'];\n  /**\n   Placement offset.\n   Offset displaces the floating element from its core placement along the specified axes. \n   */\n  offsetValue?: FloatingProps['offsetValue'];\n  /**\n   * Set of menu groups or menu items that menu will hold.Even though you could pass other type of children,\n   * is strongly recommended to use MenuItem, menu groups or components that return this type of components\n   * since passing other type of components children produces not desirable behaviors.\n   */\n  children: ComponentChildren;\n  /**\n   * Specifies if menu is opened.\n   */\n  isOpen?: boolean;\n  /**\n   * Property that triggers a callback when menu is supposed to be closed.\n   */\n  onClose?: (detail: CloseDetail) => void;\n  /**\n   * Specifies some screen reader text. Set it to create an accesible menu.\n   */\n  'aria-label'?: string;\n  /**\n   *  Determines focus behavior when the menu is opened.\n   */\n  initialFocus?: 'menu' | 'firstItem';\n};\n\ntype FloatingProps = ComponentProps<typeof Floating>;\n\ntype CloseDetail =\n  | {\n      //dismissed represents dismissing the menu using esc,tap and on mobile swiping and taping backdrop\n      reason: 'dismissed' | 'itemAction';\n    }\n  | {\n      reason: 'outsideClick';\n      target: Element;\n    };\n\n// Type only used internally by Sheet and Dropdown menu. If we want to expose both at some point we would need to\n// adjust this type.\nexport type BaseMenuProps = (MainMenu | SubMenu) &\n  Omit<MenuProps, 'onClose' | 'initialFocus'> & {\n    /*None is a valid option here since there are some use cases where a menu is opened and we don't want to focus anything\n    eg. When menu is opened due to a hover on submenuitem\n    When pasing a number, that is index of the element is going to be focused\n    eg. 1 focus the second menuitem\n    We call it currentfocus instead of initialFocus since can change when the menu is already opened. For example\n    if user hover to open a submenu and then click right key.\n    We should comeback to this since we should probably separate current focus so we have initial focus and current focus\n    as internal props of the menu container.*/\n    currentFocus?: 'menu' | 'firstItem' | 'secondItem' | 'none';\n  };\n\ntype MainMenu = {\n  menuLevel: 'main';\n  menuId?: never;\n  closeSubmenu?: never;\n};\n\ntype SubMenu = {\n  menuLevel: 'sub';\n  menuId?: string;\n  closeSubmenu?: () => void;\n};\nconst isMobile = getIsMobile();\n\n// TODO: For context menu case anchorRef is changed typically when trying to opening menu in other place\n// menu initialFocus prop should react also when anchorRef is changed not just when isOpen is changed to true.\n\n/* Component that is exposed to final user to create a menu. Important to notice that this component is just used by\nthe final user to express a main menu. It's not reused by us for submenus (we use SheetMenu and DropdownMenu directly there) */\n\nexport const Menu = ({\n  onClose,\n  isOpen,\n  testId,\n  initialFocus = 'menu',\n  placement,\n  offsetValue,\n  ...menuProps\n}: MenuProps & TestIdProps) => {\n  //On close is consumed by the whole menu structure including the main menu and submenu ones.\n  return (\n    <MenuContext.Provider value={{ onClose, isMobile, testId }}>\n      <>\n        {isMobile ? (\n          <>\n            {isOpen ? (\n              <SheetMenu {...menuProps} currentFocus={initialFocus} menuLevel=\"main\"></SheetMenu>\n            ) : null}\n          </>\n        ) : (\n          <DropdownMenu\n            {...menuProps}\n            isOpen={isOpen}\n            currentFocus={initialFocus}\n            menuLevel=\"main\"\n            defaultPlacement={placement}\n            offsetValue={offsetValue}\n            flipOptions={{\n              crossAxis: true,\n              mainAxis: true,\n              fallbackPlacements: [\n                'bottom-start',\n                'bottom-end',\n                'top-start',\n                'top-end',\n                'end-top',\n                'start-top',\n                'end-bottom',\n                'start-bottom'\n              ]\n            }}></DropdownMenu>\n        )}\n      </>\n    </MenuContext.Provider>\n  );\n};\n"],"names":["MenuContainer","children","ariaLabel","currentFocus","display","closeSubmenu","menuId","menuLevel","anchorRef","onClose","testId","useMenuContext","direction","useUser","menuContainerRef","useRef","menuContainerGeneralInformation","wasMouseMoved","lastMouseLeaveMenuItemdRelatedTarget","currentKey","setCurrentKey","useState","showFocusRing","setShowFocusRing","isContainerFocused","setIsContainerFocused","changeKey","useCallback","detail","key","reason","selfDestructiveMouseMoveEvent","handler","e","keyElem","keyElemExtractor","target","elem","current","evt","MouseEvent","dispatchEvent","removeEventListener","addEventListener","currentKeyProps","getPrev","getNext","getFirstVisible","getLastVisible","onChange","keyDownKeyFunctions","useMemo","ArrowDown","ArrowUp","Home","End","onKeyDown","event","keyFunction","shiftKey","preventDefault","useMenuCurrentKey","getPrevNext","getNVisible","useEffect","menuContainer","timer","undefined","focusMenuContainer","focus","setTimeout","FOCUS_SHIFT_TIMEOUT","firstItem","item","clearTimeout","testIdProps","useTestId","_jsx","id","ref","tabIndex","role","class","classNames","menuStyles","menuContainerStyle","mergeProps","getKeyboardCloseProps","getCloseSubmenuEvent","getMenuContainerFocusMethods","contains","document","activeElement","getMenuContainerMouseLeave","relatedTarget","isEqualNode","getMenuPointerDown","MenuContainerContext","Provider","value","DropdownMenu","forwardRef","defaultPlacement","offsetValue","flipOptions","isOpen","outsideMousedownHandler","menuItemKey","Dropdown","placement","offset","shiftOptions","mainAxis","crossAxis","dropdownMenuStyles","base","style","minWidth","MENU_MIN_WIDTH","jsx","ModalWrapper","sheetMenuStyles","modalWrapper","ModalContainer","modalContainer","ModalBackdrop","backdropVisible","modalBackdrop","modalBackdropVisible","SheetMenu","initialOverflow","body","overflow","dismissHandler","backdropRef","useModal","onBackdropClick","swipeProps","useSheetSwipe","Layer","logicalParentRef","_jsxs","sheetMenuContainerWrapper","isMobile","getIsMobile","initialFocus","menuProps","MenuContext","_Fragment","fallbackPlacements"],"mappings":"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"}