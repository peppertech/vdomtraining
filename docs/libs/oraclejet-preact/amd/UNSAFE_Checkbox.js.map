{"version":3,"file":"UNSAFE_Checkbox.js","sources":["../../src/UNSAFE_Checkbox/Checkbox.tsx"],"sourcesContent":["import { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { CheckboxControl } from '#PRIVATE_CheckboxControl';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { CheckboxRadioContext } from '#PRIVATE_CheckboxRadioField/CheckboxRadioContext';\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: AriaAttributesSignalExcluded['aria-describedby'];\n  /**\n   * Text to provide the user with additional information.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Content associated with checkbox. This can be a label or a block of text.\n   */\n  children: ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the checkbox requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Specifies if the checkbox is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies if the checkbox is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Callback invoked each time the user changes checkbox selection.\n   */\n  onCommit: (detail: ValueUpdateDetail<boolean>) => void;\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Value of the checkbox.\n   */\n  value?: boolean;\n} & TestIdProps;\n\n/**\n * Checkbox is a single standalone checkbox control. It represents a boolean value.\n */\nexport const Checkbox = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      messages,\n      onCommit,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value: propValue,\n      testId,\n      children\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    const id = useId();\n    const UAtestId = testId ? `${testId}-inline-user-assistance` : undefined;\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled or readonly fields\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const bottomUaId = hasBottomUserAssistance ? `${id}-bottom-ua` : undefined;\n\n    const onChangeHandler = useCallback(\n      (e: Event) => {\n        // return early on keyup if key isn't spacebar\n        const { key } = e as KeyboardEvent;\n        const hasKey = key !== undefined;\n\n        if (hasKey && key !== ' ') {\n          return;\n        }\n\n        const input = e.target as HTMLInputElement;\n        // While mouse clicking StyledCheckbox results in toggling the checked state on an input element, spacebar key events do not.\n        // If it is a spacebar key event, we will return the toggled value of its current state.\n        const value = hasKey ? !input.checked : input.checked;\n        const previousValue = !!propValue;\n\n        if (previousValue !== value) {\n          onCommit({\n            value,\n            previousValue\n          });\n        }\n      },\n      [onCommit, propValue]\n    );\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        !isDisabled && checkboxRef.current?.focus();\n      },\n      blur: () => {\n        const activeElement = document.activeElement as HTMLElement;\n        checkboxRef.current === activeElement && activeElement.blur();\n      }\n    }));\n\n    // TODO fix issue with tooltip and link in label\n    // \n\n    return (\n      <CheckboxRadioContext.Provider value={{ isFocusRingShown: !isDisabled }}>\n        <CheckboxControl\n          {...(hasBottomUserAssistance\n            ? {\n                onChange: onChangeHandler,\n                onKeyUp: onChangeHandler\n              }\n            : {})}\n          aria-describedby={ariaDescribedBy}\n          assistiveText={assistiveText}\n          columnSpan={columnSpan}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          isChecked={propValue}\n          isDisabled={isDisabled}\n          isReadonly={isReadonly}\n          isRequired={isRequired}\n          ref={checkboxRef}>\n          {children}\n        </CheckboxControl>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            id={bottomUaId}\n            isRequiredShown={!!isRequired && !propValue}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestId}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n          <InlineUserAssistance userAssistanceDensity=\"efficient\" testId={UAtestId} />\n        )}\n      </CheckboxRadioContext.Provider>\n    );\n  }\n);\n"],"names":["Checkbox","forwardRef","ariaDescribedBy","assistiveText","columnSpan","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","messages","onCommit","userAssistanceDensity","propUserAssistanceDensity","value","propValue","testId","children","ref","isFormDisabled","isFormReadonly","formUserAssistanceDensity","useFormContext","checkboxRef","useRef","id","useId","UAtestId","undefined","hasBottomUserAssistance","bottomUaId","onChangeHandler","useCallback","e","key","hasKey","input","target","checked","previousValue","useImperativeHandle","focus","current","blur","activeElement","document","_jsxs","jsxs","CheckboxRadioContext","Provider","isFocusRingShown","_jsx","CheckboxControl","onChange","onKeyUp","isChecked","InlineUserAssistance","isRequiredShown","requiredAlignment"],"mappings":"0zQAkFa,MAAAA,GAAWC,EAAUA,YAChC,EAEI,mBAAoBC,EACpBC,gBACAC,aACAC,iBACAC,iBACAC,WAAYC,EACZC,WAAYC,EACZC,cAAa,EACbC,WACAC,WACAC,sBAAuBC,EACvBC,MAAOC,EACPC,SACAC,YAEFC,EAA4B,QAE5B,MACEb,WAAYc,EACZZ,WAAYa,EACZR,sBAAuBS,GACrBC,EAAAA,iBAEEC,EAAcC,SAAyB,MACvCC,EAAKC,EAAAA,QACLC,EAAWX,EAAS,GAAGA,gCAAkCY,EAGzDvB,EAAaC,GAAkBa,EAC/BZ,EAAaC,GAAkBY,EAC/BR,EAAwBC,GAA6BQ,EAGrDQ,GAA2BxB,IAAeE,EAC1CuB,EAAaD,EAA0B,GAAGJ,mBAAiBG,EAE3DG,EAAkBC,eACrBC,IAEC,MAAMC,IAAEA,GAAQD,EACVE,OAAiBP,IAARM,EAEf,GAAIC,GAAkB,MAARD,EACZ,OAGF,MAAME,EAAQH,EAAEI,OAGVvB,EAAQqB,GAAUC,EAAME,QAAUF,EAAME,QACxCC,IAAkBxB,EAEpBwB,IAAkBzB,GACpBH,EAAS,CACPG,QACAyB,iBAEH,GAEH,CAAC5B,EAAUI,IAgBb,OAbAyB,EAAmBA,oBAACtB,GAAK,KAAO,CAC9BuB,MAAO,MACJpC,GAAckB,EAAYmB,SAASD,OAAO,EAE7CE,KAAM,KACJ,MAAMC,EAAgBC,SAASD,cAC/BrB,EAAYmB,UAAYE,GAAiBA,EAAcD,MAAM,MAQ/DG,EAACC,KAAAC,EAAoBA,qBAACC,SAAQ,CAACnC,MAAO,CAAEoC,kBAAmB7C,GAAYY,SAAA,CACrEkC,MAACC,EAAeA,gBAAA,IACTvB,EACD,CACEwB,SAAUtB,EACVuB,QAASvB,GAEX,CAAA,EAAG,mBACW/B,EAClBC,cAAeA,EACfC,WAAYA,EACZC,eAAgBA,EAChBC,eAAgBA,EAChBmD,UAAWxC,EACXV,WAAYA,EACZE,WAAYA,EACZE,WAAYA,EACZS,IAAKK,EACJN,SAAAA,IAEFY,EACCsB,MAACK,EAAAA,sBACC/B,GAAIK,EACJ2B,kBAAmBhD,IAAeM,EAClC2C,kBAAkB,QAClBhD,SAAUA,EACVE,sBAAiD,WAA1BA,EAAqC,SAAW,YACvEI,OAAQW,IAEkB,WAA1Bf,OAAqCgB,EAGvCuB,MAACK,EAAAA,qBAAoB,CAAC5C,sBAAsB,YAAYI,OAAQW,MAGpE"}