{"version":3,"file":"CheckboxRadioField-005a110c.js","sources":["../../src/PRIVATE_CheckboxRadioField/CheckboxRadioField.tsx","../../src/PRIVATE_CheckboxRadioField/useCheckboxRadioField.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { FocusableHandle } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { FlexboxProps } from '../utils/UNSAFE_interpolations/flexbox';\nimport { Size } from '../utils/UNSAFE_size';\nimport { BundleType } from '../resources/nls/bundle';\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\n\nimport { Flex } from '../UNSAFE_Flex';\nimport { Label } from '../UNSAFE_Label';\n\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { useCheckboxRadioField } from './useCheckboxRadioField';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\nimport { xUnits } from '../UNSAFE_Theme';\n\nimport { topUAContainerStyles } from './CheckboxRadioFieldStyles.css';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { CheckboxRadioContext } from './CheckboxRadioContext';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype AriaProps = Pick<AriaAttributesSignalExcluded, 'aria-describedby'>;\n\ntype Props = TestIdProps &\n  AriaProps & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * baseId, used to generate other element IDs.\n     */\n    baseId: string;\n    /**\n     * <RadioItem /> or <CheckboxItem />\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * layout direction of the children elements\n     */\n    direction?: FlexboxProps['direction'];\n    /**\n     * Value of the radio option.\n     */\n    hasValue?: boolean;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the radio group is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the radio group is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the radio group requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the group of radio buttons.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'start' | 'inside';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n\n    role?: 'radiogroup' | 'group';\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n\n    parentComponentVariant: 'radioSet' | 'checkboxSet';\n  };\n\nexport const CheckboxRadioField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      direction = 'column',\n      columnSpan = 1,\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      labelStartWidth = '33%',\n      parentComponentVariant,\n      messages,\n      userAssistanceDensity,\n      role,\n      children,\n      testId\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const testIdProps = useTestId(testId);\n    const UAtestId = `${testId}-inline-user-assistance`;\n    const UAtestIdTop = testId ? `${UAtestId}-top` : undefined;\n    const UAtestIdBottom = testId ? `${UAtestId}-bottom` : undefined;\n    const hasTopUserAssistance =\n      !isDisabled && !isReadonly && (!!assistiveText || (!!helpSourceLink && !!helpSourceText));\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled or readonly fields\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const {\n      groupProps,\n      labelProps,\n      topUserAssistanceProps,\n      bottomUserAssistanceProps,\n      readonlyId\n    } = useCheckboxRadioField({\n      ariaDescribedBy,\n      baseId,\n      isRequired,\n      isReadonly,\n      isDisabled,\n      label,\n      labelEdge,\n      messages,\n      hasValue,\n      hasTopUserAssistance,\n      hasBottomUserAssistance,\n      parentComponentVariant\n    });\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const readonlyLabel = translations.formControl_readOnly();\n    const isRadioSet = parentComponentVariant === 'radioSet';\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    // the props from the hook are used for focus management on the radioset variant to allow for arrow navigation\n    // while checkboxset uses tabbing\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      groupRef,\n      isRadioSet ? ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'] : ['Tab']\n    );\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div\n            id={`${baseId}-top-ua-container`}\n            class={labelEdge === 'start' ? topUAContainerStyles.start : topUAContainerStyles.top}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps} testId={UAtestIdTop}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <Flex\n          direction={direction}\n          {...(direction === 'row' && { gap: [0, xUnits(8) as Size], wrap: 'wrap' })}>\n          <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n            {children}\n          </CheckboxRadioContext.Provider>\n        </Flex>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestIdBottom}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n          <InlineUserAssistance\n            id={bottomUserAssistanceProps?.id}\n            userAssistanceDensity=\"efficient\"\n            testId={UAtestIdBottom}\n          />\n        )}\n      </>\n    );\n    // The top level element needs the column span class on it.\n    const classes = layoutSpanStyles.layoutSpanColumn[columnSpan];\n\n    return (\n      <div\n        role={role}\n        ref={groupRef}\n        class={classes}\n        {...groupProps}\n        {...focusRingProps}\n        {...testIdProps}>\n        {labelEdge === 'none' && content}\n        {labelEdge !== 'none' && (\n          <LabelValueLayout\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge}\n            labelStartWidth={labelStartWidth}>\n            {content}\n          </LabelValueLayout>\n        )}\n        {isReadonly && (\n          <HiddenAccessible id={readonlyId} isHidden={true}>\n            {readonlyLabel}\n          </HiddenAccessible>\n        )}\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useMessageSeverity } from '../hooks/PRIVATE_useMessageSeverity';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\n\ntype UseCheckboxRadioFieldProps = {\n  ariaDescribedBy?: string;\n  baseId: string;\n  hasValue?: boolean;\n  hasTopUserAssistance?: boolean;\n  hasBottomUserAssistance?: boolean;\n  isFocused?: boolean; // TODO: check if this is needed\n  isReadonly?: boolean;\n  isRequired?: boolean;\n  isDisabled?: boolean;\n  label: string;\n  labelEdge?: 'none' | 'top' | 'start' | 'inside';\n  styleVariant?: 'default' | 'embedded'; // TODO: check if this is needed\n  messages?: ComponentProps<typeof InlineUserAssistance>['messages'];\n  parentComponentVariant: 'radioSet' | 'checkboxSet';\n};\n\ntype GroupProps = {\n  groupProps: {\n    'aria-describedby'?: HTMLAttributesSignalExcluded['aria-describedby'];\n    'aria-labelledby'?: HTMLAttributesSignalExcluded['aria-labelledby'];\n    'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n    'aria-required'?: HTMLAttributesSignalExcluded['aria-required'];\n    'aria-invalid'?: HTMLAttributesSignalExcluded['aria-invalid'];\n    'aria-readonly'?: HTMLAttributesSignalExcluded['aria-readonly'];\n    'aria-disabled'?: HTMLAttributesSignalExcluded['aria-disabled'];\n    id: HTMLAttributesSignalExcluded['id'];\n  };\n  labelProps: {\n    forId: string;\n    id: string;\n    isRequiredShown?: boolean;\n  };\n  topUserAssistanceProps?: {\n    id: string;\n    variant: 'reflow';\n  };\n  bottomUserAssistanceProps?: {\n    id: string;\n    isRequiredShown: boolean;\n  };\n  readonlyId?: string;\n};\n\nexport function useCheckboxRadioField({\n  ariaDescribedBy,\n  baseId,\n  hasValue,\n  hasTopUserAssistance,\n  hasBottomUserAssistance,\n  isReadonly,\n  isRequired = false,\n  isDisabled,\n  label,\n  labelEdge,\n  messages,\n  parentComponentVariant\n}: UseCheckboxRadioFieldProps): GroupProps {\n  const optionsGroupId = `${baseId}-group`;\n  const labelId = `${baseId}-label`;\n  const topUaId = hasTopUserAssistance ? `${baseId}-top-ua` : undefined;\n  const bottomUaId = hasBottomUserAssistance ? `${baseId}-bottom-ua` : undefined;\n  const readonlyId = isReadonly ? `${baseId}-readonly` : undefined;\n  const ariaLabel = label && label.length > 0 && labelEdge === 'none' ? label : undefined;\n  const ariaLabelledBy = ariaLabel ? undefined : labelId;\n  const isRadioSet = parentComponentVariant === 'radioSet';\n  const highestMessageSeverity = useMessageSeverity(messages);\n  const hasErrorMessage = highestMessageSeverity === 'error';\n\n  return {\n    groupProps: {\n      'aria-describedby': merge([topUaId, bottomUaId, readonlyId, ariaDescribedBy]),\n      ...(isRadioSet && { 'aria-required': isRequired }),\n      ...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy }),\n      ...(ariaLabel && { 'aria-label': ariaLabel }),\n      ...(isReadonly && isRadioSet && { 'aria-readonly': true }),\n      ...(hasErrorMessage && { 'aria-invalid': true }),\n      ...(isDisabled && { 'aria-disabled': true }),\n      id: optionsGroupId\n    },\n    labelProps: {\n      forId: optionsGroupId,\n      id: labelId\n    },\n    // TOP UA is assistive text and help link/text\n    ...(hasTopUserAssistance && {\n      topUserAssistanceProps: {\n        id: topUaId as string,\n        // Use reflow variant so that top UA doesn't have min height\n        variant: 'reflow'\n      }\n    }),\n    // Bottom UA is required indicator or messages\n    ...(hasBottomUserAssistance && {\n      bottomUserAssistanceProps: {\n        id: bottomUaId as string,\n        isRequiredShown: !!isRequired && !hasValue\n      }\n    }),\n    ...(isReadonly && {\n      readonlyId\n    })\n  };\n}\n"],"names":["CheckboxRadioField","forwardRef","ariaDescribedBy","assistiveText","baseId","direction","columnSpan","hasValue","helpSourceLink","helpSourceText","isDisabled","isReadonly","isRequired","label","labelEdge","labelStartWidth","parentComponentVariant","messages","userAssistanceDensity","role","children","testId","ref","testIdProps","useTestId","UAtestId","UAtestIdTop","undefined","UAtestIdBottom","hasTopUserAssistance","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","readonlyId","optionsGroupId","labelId","topUaId","bottomUaId","ariaLabel","length","ariaLabelledBy","isRadioSet","hasErrorMessage","useMessageSeverity","merge","id","forId","variant","isRequiredShown","useCheckboxRadioField","readonlyLabel","useTranslationBundle","formControl_readOnly","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","content","_jsxs","_Fragment","_jsx","class","topUAContainerStyles","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","Flex","gap","xUnits","wrap","jsx","CheckboxRadioContext","Provider","value","InlineUserAssistance","requiredAlignment","classes","layoutSpanStyles","layoutSpanColumn","LabelValueLayout","Label","HiddenAccessible","isHidden"],"mappings":"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"}