{"version":3,"file":"Dialog-f6da299c.js","sources":["../../src/UNSAFE_Dialog/Dialog.tsx"],"sourcesContent":["import { ComponentChild, RefObject } from 'preact';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { Offset, WindowOverlay, WindowOverlayPlacement } from '../UNSAFE_WindowOverlay';\nimport { TestIdProps, useTestId } from '../hooks/UNSAFE_useTestId';\nimport { UseAnimationConfig, useAnimation } from '../hooks/UNSAFE_useAnimation';\nimport { useEffect, useState } from 'preact/hooks';\n\nimport { DialogRedwoodTheme } from './themes/redwood/DialogTheme';\nimport { DialogStyles } from './themes/DialogStyles.css';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { Layer } from '../UNSAFE_Layer';\nimport { Modal } from '../UNSAFE_Modal';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { globalImages } from '#/ImageVars.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { dimensionInterpolations, DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\n// animation states\ntype Status = 'opening' | 'closing' | 'unmounted';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children' | 'role'>;\n\ntype OnCloseDetail = {\n  reason: 'escapeKey';\n};\n\ntype DialogProps = IntrinsicProps &\n  DimensionProps & {\n    /**\n     * Optional ref for an element to focus on when component mounts\n     */\n    autoFocusRef?: RefObject<HTMLElement>;\n\n    /**\n     * On Close callback.\n     */\n    onClose?: (detail: OnCloseDetail) => void;\n\n    /**\n     * On opening or closing transition end callback.\n     */\n    onTransitionEnd?: (value: boolean) => void;\n\n    /**\n     * Determines whether the Dialog is open.\n     */\n    isOpen: boolean;\n\n    /**\n     * Dialog header content. Can be a string or VNode (Component Child).\n     * <p>\n     * When a plain string is passed, it will be used as the dialog title. Otherwise, the prop value\n     * will be used as the header content.\n     * </p>\n     * <p>\n     * Dialog will automatically refer to the header content as the accessible label.\n     * The user can override this behavior by specifying the <code>aria-labelledby</code> property\n     * and setting its value as needed.\n     * </p>\n     */\n    header?: ComponentChild;\n\n    /**\n     * Dialog footer content.\n     */\n    footer?: ComponentChild;\n\n    /**\n     * Determines dialog modality. Default is 'modal'.\n     */\n    modality?: 'modal' | 'modeless';\n\n    /**\n     * Determines placement of the dialog relative to the viewport.\n     * Supported values are:\n     * <p> <code>center</code>, <code>top</code>, <code>top-start</code>, <code>top-end</code>,\n     * <code>end</code>, <code>end-top</code>, <code>end-bottom</code>,\n     * <code>bottom</code>, <code>bottom-start</code>, <code>bottom-end</code>,\n     * <code>start</code>, <code>start-top</code>, <code>start-bottom</code>\n     * </p>\n     * Default is <code>center</code>.\n     */\n    placement?: WindowOverlayPlacement;\n\n    /**\n     * Determines the offset of the Dialog from its core placement along the specified axes.\n     *\n     * Offset could be a number or an object\n     *\n     * An object has the following type:\n     * <pre>\n     *   {\n     *     mainAxis?: number;\n     *     crossAxis?: number;\n     *   }\n     * </pre>\n     * For the <code>center</code> placement the convention for the offset type is that mainAxis defines\n     * offset from the top, crossAxis defines offset from the left side of the view port.\n     *\n     * A number is a shortcut for setting the mainAxis.\n     */\n    offset?: Offset;\n\n    /**\n     * Specifies the ARIA role type. Depending on how the dialog is used in the page, the developer\n     * should choose from the following:\n     * <ul>\n     *   <li><code>dialog</code> defines an application window that is designed to interrupt the current\n     *      processing of an application in order to prompt the user to enter information or require\n     *      a response.</li>\n     *   <li><code>alertdialog</code> defines type of dialog that contains an alert message, where initial\n     *      focus goes to an element within the dialog.</li>\n     * </ul>\n     */\n    role?: 'dialog' | 'alertdialog';\n\n    /**\n     * Optional <code>aria-labelledby</code> property referring to the content to be used as Dialog's\n     * accessible <label htmlFor=\"\" className=\"\"></label>\n     * If not specified, the Dialog will automatically refer to the entire header content as the accessible label.\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * Optional accessible description for the dialog.\n     */\n    'aria-describedby'?: string;\n  } & TestIdProps;\n\n// dialog header\n\ntype DialogHeaderProps = Pick<DialogProps, 'header'> & {\n  id?: string;\n};\n\nconst StyledDialogHeader = ({ header, id }: DialogHeaderProps) => {\n  const { styles } = useComponentTheme<never, DialogStyles>(DialogRedwoodTheme);\n  const content: ComponentChild =\n    typeof header === 'string' ? (\n      <h1 id={id} className={styles.dialogTitleStyle}>\n        {header}\n      </h1>\n    ) : (\n      header\n    );\n\n  return <div className={styles.dialogHeaderStyle}>{content}</div>;\n};\n\n// styled dialog\n\ntype MainProps = Pick<DialogProps, 'children' | 'header' | 'footer' | 'role'> &\n  Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'style' | 'onKeyDown'> & {\n    labelId?: string;\n    ariaLabelledBy?: string;\n    ariaDescribedBy?: string;\n  } & TestIdProps;\n\nconst StyledDialog = forwardRef(\n  (\n    {\n      children,\n      header,\n      footer,\n      labelId,\n      role,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      onKeyDown,\n      testId,\n      style\n    }: MainProps,\n    ref: ForwardedRef<HTMLDivElement | null>\n  ) => {\n    const { classes: styleClasses, styles } = useComponentTheme<never, DialogStyles>(\n      DialogRedwoodTheme\n    );\n\n    const testIdProps = useTestId(testId);\n\n    return (\n      <div\n        ref={ref}\n        className={classNames([styleClasses, globalImages])}\n        style={Object.assign({}, { opacity: 0 }, style)}\n        onKeyDown={onKeyDown}\n        role={role}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...testIdProps}>\n        <div className={styles.dialogContainerStyle}>\n          <StyledDialogHeader id={labelId} header={header} />\n          <div className={styles.dialogContentStyle}>\n            <div className={styles.dialogBodyStyle}>{children}</div>\n          </div>\n          <div className={styles.dialogFooterStyle}>{footer}</div>\n        </div>\n      </div>\n    );\n  }\n);\n\n// main Dialog component\n\n/**\n * WAI-ARIA-compliant dialog component. A dialog is a floating window that typically contains\n * a title bar and a content area.\n * The dialog is generally placed on top of the rest of the page content. It can be either modal\n * (only the content in the dialog can be interacted with) or non-modal (it's still possible\n * to interact with content outside of the dialog).\n */\nexport const Dialog = ({\n  autoFocusRef,\n  children,\n  isOpen,\n  header = '',\n  footer,\n  modality = 'modal',\n  placement = 'center',\n  offset = 0,\n  onClose,\n  onTransitionEnd,\n  role = 'dialog',\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  testId,\n  ...props\n}: DialogProps) => {\n  const [state, setState] = useState<Status>(isOpen ? 'opening' : 'unmounted');\n\n  const uniqueId = useId();\n  const labelId = ariaLabelledBy ? ariaLabelledBy : uniqueId;\n\n  const interpolations = [...Object.values(dimensionInterpolations)];\n  const styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n  const { ...styles } = styleInterpolations(props);\n\n  useEffect(() => {\n    // Ignore state update on initial render\n    if (state === 'unmounted' && !isOpen) {\n      return;\n    }\n    setState(isOpen ? 'opening' : 'closing');\n  }, [isOpen, state]);\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(state, {\n    animationStates,\n    isAnimatedOnMount: true,\n    onAnimationEnd: ({ animationState }) => {\n      if (animationState === 'closing') {\n        setState('unmounted');\n        onTransitionEnd?.(false);\n      } else {\n        onTransitionEnd?.(true);\n      }\n    }\n  });\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    switch (event.code) {\n      case 'Escape': {\n        onClose?.({ reason: 'escapeKey' });\n        break;\n      }\n    }\n  };\n\n  const renderDialog = () => {\n    return (\n      <WindowOverlay placement={placement} offset={offset}>\n        <FocusTrap autoFocusRef={autoFocusRef}>\n          <StyledDialog\n            ref={nodeRef}\n            labelId={labelId}\n            header={header}\n            footer={footer}\n            role={role}\n            ariaLabelledBy={labelId}\n            ariaDescribedBy={ariaDescribedBy}\n            onKeyDown={handleKeyDown}\n            testId={testId}\n            style={styles}>\n            {children}\n          </StyledDialog>\n        </FocusTrap>\n      </WindowOverlay>\n    );\n  };\n\n  if (modality === 'modal') {\n    return <Modal isOpen={state !== 'unmounted'}>{renderDialog()}</Modal>;\n  } else {\n    return state !== 'unmounted' ? <Layer>{renderDialog()}</Layer> : null;\n  }\n};\n\nconst animationStates: UseAnimationConfig<Status, HTMLElement>['animationStates'] = {\n  opening: {\n    from: {\n      scaleX: 0,\n      scaleY: 0,\n      transformOrigin: 'center',\n      opacity: 0\n    },\n    to: {\n      scaleX: 1,\n      scaleY: 1,\n      opacity: 1\n    },\n    options: {\n      duration: 200\n    }\n  },\n  closing: {\n    from: {\n      scaleX: 1,\n      scaleY: 1,\n      transformOrigin: 'center',\n      opacity: 1\n    },\n    to: {\n      scaleX: 0,\n      scaleY: 0,\n      opacity: 0\n    },\n    options: {\n      duration: 200\n    }\n  }\n};\n"],"names":["StyledDialogHeader","header","id","styles","useComponentTheme","DialogRedwoodTheme","content","_jsx","jsx","className","dialogTitleStyle","children","dialogHeaderStyle","StyledDialog","forwardRef","footer","labelId","role","ariaLabelledBy","ariaDescribedBy","onKeyDown","testId","style","ref","classes","styleClasses","testIdProps","useTestId","classNames","globalImages","Object","assign","opacity","_jsxs","dialogContainerStyle","dialogContentStyle","dialogBodyStyle","dialogFooterStyle","animationStates","opening","from","scaleX","scaleY","transformOrigin","to","options","duration","closing","autoFocusRef","isOpen","modality","placement","offset","onClose","onTransitionEnd","props","state","setState","useState","uniqueId","useId","interpolations","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","useEffect","nodeRef","useAnimation","isAnimatedOnMount","onAnimationEnd","animationState","handleKeyDown","event","code","reason","renderDialog","WindowOverlay","FocusTrap","Modal","Layer"],"mappings":"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"}