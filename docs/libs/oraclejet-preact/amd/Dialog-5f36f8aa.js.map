{"version":3,"file":"Dialog-5f36f8aa.js","sources":["../../src/UNSAFE_Dialog/Dialog.tsx"],"sourcesContent":["import type { ComponentChild, RefObject } from 'preact';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { Offset, WindowOverlay, WindowOverlayPlacement } from '../UNSAFE_WindowOverlay';\nimport { TestIdProps, useTestId } from '../hooks/UNSAFE_useTestId';\nimport { useAnimation } from '../hooks/UNSAFE_useAnimation';\nimport { useEffect, useRef, useCallback, useMemo, useState } from 'preact/hooks';\nimport { mergeRefs } from '../utils/PRIVATE_refUtils';\n\nimport { DialogRedwoodTheme } from './themes/redwood/DialogTheme';\nimport { DialogStyles } from './themes/DialogStyles.css';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { Layer } from '../UNSAFE_Layer';\nimport { Modal } from '../UNSAFE_Modal';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { globalImages } from '#/ImageVars.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { dimensionInterpolations, DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useResizeObserver } from '../hooks/UNSAFE_useResizeObserver';\n\nimport { DraggableProps, useDraggable } from '../hooks/PRIVATE_useDraggable';\nimport { Floating, Coords } from '../UNSAFE_Floating';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { Resizable } from '../PRIVATE_Resizable/Resizable';\nimport { Position, Rect } from '../utils/UNSAFE_flexibleComponentUtils';\nimport { useBreakpoints } from '../hooks/UNSAFE_useBreakpoints';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport {\n  SLIDE_DOWN_XLARGE,\n  SLIDE_UP_XLARGE,\n  DURATION_LARGE\n} from '../utils/PRIVATE_animationUtils';\nimport {\n  allTabbableElements,\n  focusOn,\n  focusWithin,\n  getActiveElement\n} from '../utils/PRIVATE_tabbableUtils';\n\n// dialog states\ntype Status = 'initial' | 'opening' | 'closing' | 'unmounted';\ntype VisibilityStatus = 'hidden' | 'visible';\ntype Animations = 'zoomIn' | 'zoomOut' | 'slideUp' | 'slideDown';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children' | 'role'>;\n\nexport type OnCloseDetail = {\n  reason: 'escapeKey' | 'icon';\n};\n\nexport type CancelBehavior = 'none' | 'escape' | 'icon';\n\ntype DialogProps = IntrinsicProps &\n  DimensionProps & {\n    /**\n     * Optional ref for an element to focus on when component mounts\n     */\n    autoFocusRef?: RefObject<HTMLElement>;\n\n    /**\n     * On Close callback.\n     */\n    onClose?: (detail: OnCloseDetail) => void;\n\n    /**\n     * On opening or closing transition end callback.\n     */\n    onTransitionEnd?: (value: boolean) => void;\n\n    /**\n     * Determines whether the Dialog is open.\n     */\n    isOpen: boolean;\n\n    /**\n     * Dialog header content. Can be a string or VNode (Component Child).\n     * <p>\n     * When a plain string is passed, it will be used as the dialog title. Otherwise, the prop value\n     * will be used as the header content.\n     * </p>\n     * <p>\n     * Dialog will automatically refer to the header content as the accessible label.\n     * The user can override this behavior by specifying the <code>aria-labelledby</code> property\n     * and setting its value as needed.\n     * </p>\n     */\n    header?: ComponentChild;\n\n    /**\n     * Dialog footer content.\n     */\n    footer?: ComponentChild;\n\n    /**\n     * Determines dialog modality. Default is 'modal'.\n     */\n    modality?: 'modal' | 'modeless';\n\n    /**\n     * Specifies dialog's cancel behavior. Default is 'none'.\n     */\n    cancelBehavior?: CancelBehavior;\n\n    /**\n     * Specifies dialog's launcher. After dialog closes, it returns focus to the launcher.\n     * If not specified, focus goes back to the last active element before dialog opened.\n     */\n    launcherRef?: RefObject<HTMLElement>;\n\n    /**\n     * Specifies dialog's anchor. Dialog is placed relative to its anchor. If not specified,\n     * it is placed relatively to window.\n     */\n    anchorRef?: RefObject<Element | Coords>;\n\n    /**\n     * Determines placement of the dialog relative to the viewport.\n     * Supported values are:\n     * <p> <code>center</code>, <code>top</code>, <code>top-start</code>, <code>top-end</code>,\n     * <code>end</code>, <code>end-top</code>, <code>end-bottom</code>,\n     * <code>bottom</code>, <code>bottom-start</code>, <code>bottom-end</code>,\n     * <code>start</code>, <code>start-top</code>, <code>start-bottom</code>\n     * </p>\n     * Default is <code>center</code>.\n     */\n    placement?: WindowOverlayPlacement;\n\n    /**\n     * Determines the offset of the Dialog from its core placement along the specified axes.\n     *\n     * Offset could be a number or an object\n     *\n     * An object has the following type:\n     * <pre>\n     *   {\n     *     mainAxis?: number;\n     *     crossAxis?: number;\n     *   }\n     * </pre>\n     * For the <code>center</code> placement the convention for the offset type is that mainAxis defines\n     * offset from the top, crossAxis defines offset from the left side of the view port.\n     *\n     * A number is a shortcut for setting the mainAxis.\n     */\n    offset?: Offset;\n\n    /**\n     * Determines if the Dialog should be sensitive to drag gestures. To create a draggable dialog,\n     * set <code>dragAffordance='header'</code> and specify the <code>onDragMove</code> handler.\n     */\n    dragAffordance?: 'none' | 'header';\n\n    /**\n     * Determines if the Dialog should support resizing. To create a resizable dialog,\n     * set <code>resizeBehavior='resizable'</code> and specify the <code>onResize</code> handler.\n     */\n    resizeBehavior?: 'none' | 'resizable';\n\n    /**\n     * Callback to be invoked if <code>dragAffordance</code> is set to <code>header</code> and a drag gesture is initiated.\n     * The current position is reported in the <code>pos</code> parameter.\n     *\n     * @param pos\n     */\n    onDragStart?: (pos: Position) => void;\n\n    /**\n     * Callback to be invoked if <code>dragAffordance</code> is set to <code>header</code> and a drag gesture is detected.\n     * The current position is reported in the <code>pos</code> parameter.\n     *\n     * @param pos\n     */\n    onDragMove?: (pos: Position) => void;\n\n    /**\n     * Callback to be invoked if <code>dragAffordance</code> is set to <code>header</code> and a drag gesture is completed.\n     * The current position is reported in the <code>pos</code> parameter.\n     *\n     * @param pos\n     */\n    onDragEnd?: (pos: Position) => void;\n\n    /**\n     * Callback to be invoked if <code>resizeBehavior</code> is set to <code>resizable</code> and\n     * a resize gesture is initiated. The current position and dimensions are reported in the\n     * <code>rect</code> parameter.\n     *\n     * @param rect\n     */\n    onResizeStart?: (rect: Rect) => void;\n\n    /**\n     * Callback to be invoked if <code>resizeBehavior</code> is set to <code>resizable</code> and\n     * a resize gesture is detected. The current position and dimensions are reported in the\n     * <code>rect</code> parameter.\n     *\n     * @param rect\n     */\n    onResize?: (rect: Rect) => void;\n\n    /**\n     * Callback to be invoked if <code>resizeBehavior</code> is set to <code>resizable</code> and\n     * a resize gesture is completed. The current position and dimensions are reported in the\n     * <code>rect</code> parameter.\n     *\n     * @param rect\n     */\n    onResizeEnd?: (rect: Rect) => void;\n\n    /**\n     * Specifies callback triggered when initial focus is set or when a modeless dialog receives focus\n     * via the F6 key.\n     */\n    onFocusSet?: () => void;\n\n    /**\n     * Determines if the header decoration should be displayed. The default is <code>on</code>\n     * which renders a textured strip at the top of the dialog header in the Redwood theme.\n     * If set to <code>off</code>, no decoration is rendered.\n     */\n    headerDecoration?: 'off' | 'on';\n\n    /**\n     * Specifies the ARIA role type. Depending on how the dialog is used in the page, the developer\n     * should choose from the following:\n     * <ul>\n     *   <li><code>dialog</code> defines an application window that is designed to interrupt the current\n     *      processing of an application in order to prompt the user to enter information or require\n     *      a response.</li>\n     *   <li><code>alertdialog</code> defines type of dialog that contains an alert message, where initial\n     *      focus goes to an element within the dialog.</li>\n     * </ul>\n     */\n    role?: string;\n\n    /**\n     * Optional <code>aria-labelledby</code> property referring to the content to be used as Dialog's\n     * accessible <label htmlFor=\"\" className=\"\"></label>\n     * If not specified, the Dialog will automatically refer to the entire header content as the accessible label.\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * Optional accessible description for the dialog.\n     */\n    'aria-describedby'?: string;\n  } & TestIdProps;\n\n// dialog header\ntype DialogHeaderProps = Pick<DialogProps, 'children'> & {\n  id?: string;\n  cancelBehavior?: CancelBehavior;\n  onClose?: (detail: OnCloseDetail) => void;\n  draggableProps?: DraggableProps;\n  headerDecoration?: 'off' | 'on';\n};\n\nconst StyledDialogHeader = ({\n  children,\n  id,\n  cancelBehavior,\n  onClose,\n  draggableProps,\n  headerDecoration = 'on'\n}: DialogHeaderProps) => {\n  const { styles } = useComponentTheme<never, DialogStyles>(DialogRedwoodTheme);\n\n  const classes = classNames([\n    styles.dialogHeaderStyle,\n    ...(headerDecoration === 'on' ? [styles.dialogHeaderDecorationStyle] : [])\n  ]);\n\n  const content: ComponentChild =\n    typeof children === 'string' ? (\n      <h1 id={id} className={styles.dialogTitleStyle}>\n        {children}\n      </h1>\n    ) : (\n      <div>{children}</div>\n    );\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const handleIconClose = () => {\n    onClose?.({ reason: 'icon' });\n  };\n\n  const closeIcon: ComponentChild =\n    cancelBehavior === 'icon' ? (\n      <div>\n        <div className={styles.dialogHeaderCloseIconStyle}>\n          <IconButton\n            aria-label={translations.message_close()}\n            size=\"sm\"\n            variant=\"ghost\"\n            onAction={handleIconClose}>\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </div>\n    ) : null;\n\n  return (\n    <div className={classes} {...draggableProps}>\n      {content}\n      {closeIcon}\n    </div>\n  );\n};\n\n// dialog footer\n\ntype DialogFooterProps = Pick<DialogProps, 'children'> & {\n  style?: string;\n};\n\nconst StyledDialogFooter = forwardRef(\n  ({ children, style }: DialogFooterProps, ref: ForwardedRef<HTMLDivElement | null>) => {\n    return (\n      <div ref={ref} className={style}>\n        {children}\n      </div>\n    );\n  }\n);\n\n// styled dialog\n\ntype MainProps = Pick<DialogProps, 'children' | 'header' | 'footer' | 'role'> &\n  Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'style' | 'onKeyDown'> & {\n    visibility: VisibilityStatus;\n    labelId?: string;\n    ariaLabelledBy?: string;\n    ariaDescribedBy?: string;\n    cancelBehavior?: CancelBehavior;\n    draggableProps?: DraggableProps;\n    isResizable?: boolean;\n    headerDecoration?: 'off' | 'on';\n    containerRef?: RefObject<HTMLElement>;\n    onClose?: (detail: OnCloseDetail) => void;\n    onResizeStart?: (rect: Rect) => void;\n    onResize?: (rect: Rect) => void;\n    onResizeEnd?: (rect: Rect) => void;\n    footerRef?: RefObject<HTMLDivElement | null>;\n  } & TestIdProps;\n\nconst StyledDialog = forwardRef(\n  (\n    {\n      children,\n      header,\n      footer,\n      visibility,\n      labelId,\n      role,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      cancelBehavior,\n      draggableProps,\n      isResizable,\n      headerDecoration,\n      containerRef,\n      onClose,\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      onKeyDown,\n      testId,\n      style,\n      footerRef\n    }: MainProps,\n    ref: ForwardedRef<HTMLDivElement | null>\n  ) => {\n    const elementRef = useRef<HTMLDivElement>(null);\n    const mergedRef = mergeRefs(ref, elementRef);\n\n    const [isSmallHeight, setSmallHeight] = useState<boolean>(false);\n    const isSmallWidth = !useBreakpoints()['md'];\n\n    const { classes: styleClasses, styles } = useComponentTheme<never, DialogStyles>(\n      DialogRedwoodTheme\n    );\n\n    const resizeHandler = useCallback(() => {\n      if (elementRef.current) {\n        if (elementRef.current.clientHeight < 400) {\n          setSmallHeight(true);\n        } else {\n          setSmallHeight(false);\n        }\n      }\n    }, []);\n\n    // set initial Height\n    useEffect(() => {\n      resizeHandler();\n    }, [resizeHandler]);\n\n    useResizeObserver(elementRef, resizeHandler);\n\n    // for small widths (mobile), use the 'smallWidth' dialog style\n    // otherwise, check for small height to apply 'smallWidth' or 'desktop' styles accordingly\n    const baseStyle = isSmallWidth ? styles.baseStyleSmallWidth : styles.baseStyleDesktop;\n\n    // content should scroll depending on the viewport height\n    // on large screens, the header and footer should be \"sticky\",\n    // at small viewport heights, the entire content should be scrollable\n    const contentStyle = isSmallHeight\n      ? styles.dialogContentStyleNoShrink\n      : styles.dialogContentStyle;\n\n    const visibilityStyle =\n      visibility === 'visible' ? styles.visibilityVisible : styles.visibilityHidden;\n\n    const testIdProps = useTestId(testId);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={classNames([styleClasses, baseStyle, visibilityStyle, globalImages])}\n        style={style}\n        onKeyDown={onKeyDown}\n        role={role}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...testIdProps}>\n        <div className={styles.dialogContainerStyle}>\n          <StyledDialogHeader\n            id={labelId}\n            onClose={onClose}\n            headerDecoration={headerDecoration}\n            cancelBehavior={cancelBehavior}\n            draggableProps={draggableProps}>\n            {header}\n          </StyledDialogHeader>\n          <div className={contentStyle}>\n            <div className={styles.dialogBodyStyle}>{children}</div>\n          </div>\n          <StyledDialogFooter ref={footerRef} style={styles.dialogFooterStyle}>\n            {footer}\n          </StyledDialogFooter>\n        </div>\n        {isResizable && (\n          <Resizable\n            onResizeStart={onResizeStart}\n            onResize={onResize}\n            onResizeEnd={onResizeEnd}\n            containerRef={containerRef}></Resizable>\n        )}\n      </div>\n    );\n  }\n);\n\n// main Dialog component\n\n/**\n * WAI-ARIA-compliant dialog component. A dialog is a floating window that typically contains\n * a title bar and a content area.\n * The dialog is generally placed on top of the rest of the page content. It can be either modal\n * (only the content in the dialog can be interacted with) or non-modal (it's still possible\n * to interact with content outside of the dialog).\n */\nexport const Dialog = forwardRef(\n  (\n    {\n      autoFocusRef,\n      children,\n      isOpen,\n      header = '',\n      footer,\n      modality = 'modal',\n      launcherRef,\n      anchorRef,\n      placement,\n      offset = 0,\n      cancelBehavior = 'none',\n      dragAffordance = 'none',\n      resizeBehavior = 'none',\n      headerDecoration = 'on',\n      onDragStart,\n      onDragMove,\n      onDragEnd,\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      onFocusSet,\n      onClose,\n      onTransitionEnd,\n      role = 'dialog',\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      testId,\n      ...props\n    }: DialogProps,\n    ref: ForwardedRef<HTMLDivElement | null>\n  ) => {\n    const [status, setStatus] = useState<Status>(isOpen ? 'initial' : 'unmounted');\n    const [visibility, setVisibility] = useState<VisibilityStatus>('hidden');\n\n    const floatingRef = useRef<HTMLDivElement>(null);\n    const contentWrapperRef = useRef<HTMLDivElement | null>(null);\n    const localLauncherRef = useRef<HTMLElement | null>(null);\n    const footerRef = useRef<HTMLDivElement | null>(null);\n\n    const isSmallWidth = !useBreakpoints()['md'];\n    const derivedPlacement = isSmallWidth ? 'bottom' : placement ? placement : 'center';\n    const animationType = isSmallWidth\n      ? status === 'opening'\n        ? 'slideUp'\n        : 'slideDown'\n      : status === 'opening'\n      ? 'zoomIn'\n      : 'zoomOut';\n\n    const uniqueId = useId();\n    const labelId = ariaLabelledBy ? ariaLabelledBy : uniqueId;\n\n    const interpolations = [...Object.values(dimensionInterpolations)];\n    const styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n    const { ...styles } = styleInterpolations(props);\n\n    const setInitialFocus = useCallback(() => {\n      // Focus on first tabbable in the Dialog container or container itself if there is none\n      if (footerRef.current && allTabbableElements(footerRef.current).length > 0) {\n        focusWithin(footerRef.current);\n      } else {\n        focusWithin(contentWrapperRef.current as HTMLElement);\n      }\n      onFocusSet?.();\n    }, [onFocusSet]);\n\n    const returnFocus = useCallback((): void => {\n      // Try to return focus to 1.launcher or 2.anchor\n      const launcherEl = localLauncherRef.current;\n\n      if (launcherEl) {\n        focusOn(launcherEl);\n        // Checking instanceof to avoid Coords type that can not be focused\n      }\n    }, [localLauncherRef]);\n\n    // Animation\n    const { nodeRef } = useAnimation<Animations, HTMLDivElement>(animationType, {\n      animationStates,\n      isAnimatedOnMount: true,\n      onAnimationEnd: () => {\n        if (isOpen) {\n          onTransitionEnd?.(true);\n        } else if (!isOpen) {\n          returnFocus();\n          nodeRef(null);\n          setVisibility('hidden');\n          setStatus('unmounted');\n          onTransitionEnd?.(false);\n        }\n      }\n    });\n\n    const mergedRef = useMemo(() => mergeRefs(contentWrapperRef, ref), [contentWrapperRef, ref]);\n\n    const launcherKeyDownCallback = useCallback(\n      (event: KeyboardEvent): void => {\n        if (localLauncherRef.current === getActiveElement() && event.code === 'F6') {\n          // Prevent default F6 handlers.\n          // F6 is a standard Chrome address bar shortcut on Windows.\n          event.preventDefault();\n          event.stopPropagation();\n\n          focusWithin(contentWrapperRef.current as HTMLElement);\n          onFocusSet?.();\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [modality]\n    );\n\n    const { draggableProps } = useDraggable({\n      isDisabled: dragAffordance === 'none',\n      containerRef: floatingRef,\n      onDragStart,\n      onDragMove,\n      onDragEnd\n    });\n\n    useEffect(() => {\n      // 1. Ignore status update on initial render\n      if (status === 'unmounted' && !isOpen) {\n        return;\n      }\n\n      // 2. Mount visually hidden component\n      // Component gets mounted, but will be visually hidden to avoid flickering\n      // Flickering happens because it gets rendered before animation hook repositions\n      // it in next render cycle\n      if (status === 'unmounted' && isOpen) {\n        setStatus('initial');\n        return;\n      }\n\n      // 3. Setup animation\n      // Component has been mounted.\n      // We will kick out animation as node is already present in DOM.\n      // To avoid flickering, we still keep it visually hidden until the next render cycle.\n      if (status === 'initial' && isOpen) {\n        nodeRef(contentWrapperRef.current);\n        setStatus('opening');\n        return;\n      }\n\n      // 3. Unhide component. It becomes visible.\n      if (status === 'opening' && isOpen) {\n        setVisibility('visible');\n        return;\n      }\n\n      // 4. Closing\n      if (!isOpen) {\n        setStatus('closing');\n      }\n    }, [isOpen, status, nodeRef]);\n\n    // Initialize launcher\n    useEffect(() => {\n      if (isOpen) {\n        if (!launcherRef?.current) {\n          // 1. If launcher is not defined, most frequent scenario is,\n          // that element, that has focus before opening the dialog is considered launcher\n          localLauncherRef.current = getActiveElement() as HTMLElement;\n        } else if (launcherRef.current instanceof Element) {\n          // 2. launcherRef element was provided.\n          // Verify, if it exists in DOM, otherwise use the last active element\n          localLauncherRef.current = document.body.contains(launcherRef.current)\n            ? launcherRef.current\n            : (getActiveElement() as HTMLElement);\n        } else {\n          localLauncherRef.current = getActiveElement() as HTMLElement;\n        }\n        // Register F6 key handler to enter a modeless dialog\n        if (modality === 'modeless') {\n          localLauncherRef.current?.addEventListener('keydown', launcherKeyDownCallback);\n        }\n      }\n      return () => {\n        // Deregister F6 key handler\n        if (modality === 'modeless') {\n          localLauncherRef.current?.removeEventListener('keydown', launcherKeyDownCallback);\n        }\n      };\n    }, [isOpen, launcherRef, launcherKeyDownCallback, modality]);\n\n    // setInitialFocus when the dialog becomes visible\n    useEffect(() => {\n      if (visibility === 'visible') {\n        setInitialFocus();\n      }\n    }, [visibility, setInitialFocus]);\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.code) {\n        case 'Escape':\n          onClose?.({ reason: 'escapeKey' });\n          break;\n        case 'F6':\n          // Focus launcher\n          if (localLauncherRef.current && modality === 'modeless') {\n            focusOn(localLauncherRef.current);\n          }\n          // Prevent default F6 handlers. F6 is a standard Chrome address bar shortcut on Windows.\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n      }\n    };\n\n    const renderDialogContent = () => {\n      return (\n        <FocusTrap autoFocusRef={autoFocusRef}>\n          <StyledDialog\n            ref={mergedRef}\n            labelId={labelId}\n            header={header}\n            footer={footer}\n            role={role}\n            ariaLabelledBy={labelId}\n            ariaDescribedBy={ariaDescribedBy}\n            onKeyDown={handleKeyDown}\n            testId={testId}\n            style={styles}\n            visibility={visibility}\n            cancelBehavior={cancelBehavior}\n            draggableProps={draggableProps}\n            isResizable={resizeBehavior === 'resizable'}\n            headerDecoration={headerDecoration}\n            containerRef={floatingRef}\n            onClose={onClose}\n            onResizeStart={onResizeStart}\n            onResize={onResize}\n            onResizeEnd={onResizeEnd}\n            footerRef={footerRef}>\n            {children}\n          </StyledDialog>\n        </FocusTrap>\n      );\n    };\n\n    const renderDialog = () => {\n      if (anchorRef && anchorRef.current) {\n        return (\n          <Floating\n            ref={floatingRef}\n            anchorRef={anchorRef}\n            placement={'bottom-start'}\n            flipOptions={{ mainAxis: false, crossAxis: false }}\n            shiftOptions={{ mainAxis: false, crossAxis: false }}>\n            {renderDialogContent()}\n          </Floating>\n        );\n      } else {\n        return (\n          <WindowOverlay placement={derivedPlacement} offset={offset}>\n            {renderDialogContent()}\n          </WindowOverlay>\n        );\n      }\n    };\n\n    if (modality === 'modal') {\n      return <Modal isOpen={status !== 'unmounted'}>{renderDialog()}</Modal>;\n    } else {\n      return status !== 'unmounted' ? <Layer>{renderDialog()}</Layer> : null;\n    }\n  }\n);\n\nconst animationStates = {\n  zoomIn: {\n    from: {\n      scaleX: 0.9,\n      scaleY: 0.9,\n      transformOrigin: 'center',\n      opacity: 0\n    },\n    to: {\n      scaleX: 1,\n      scaleY: 1,\n      opacity: 1\n    },\n    options: {\n      duration: 200\n    }\n  },\n  zoomOut: {\n    from: {\n      scaleX: 1,\n      scaleY: 1,\n      transformOrigin: 'center',\n      opacity: 1\n    },\n    to: {\n      scaleX: 0.9,\n      scaleY: 0.9,\n      opacity: 0\n    },\n    options: {\n      duration: 200\n    }\n  },\n  slideUp: {\n    ...SLIDE_UP_XLARGE,\n    options: {\n      duration: DURATION_LARGE\n    }\n  },\n  slideDown: {\n    ...SLIDE_DOWN_XLARGE,\n    options: {\n      duration: DURATION_LARGE\n    }\n  }\n};\n"],"names":["StyledDialogHeader","children","id","cancelBehavior","onClose","draggableProps","headerDecoration","styles","useComponentTheme","DialogRedwoodTheme","classes","classNames","dialogHeaderStyle","dialogHeaderDecorationStyle","content","_jsx","className","dialogTitleStyle","jsx","translations","useTranslationBundle","closeIcon","dialogHeaderCloseIconStyle","IconButton","message_close","size","variant","onAction","reason","CloseIcon","SvgClose","_jsxs","StyledDialogFooter","forwardRef","style","ref","StyledDialog","header","footer","visibility","labelId","role","ariaLabelledBy","ariaDescribedBy","isResizable","containerRef","onResizeStart","onResize","onResizeEnd","onKeyDown","testId","footerRef","elementRef","useRef","mergedRef","mergeRefs","isSmallHeight","setSmallHeight","useState","isSmallWidth","useBreakpoints","styleClasses","resizeHandler","useCallback","current","clientHeight","useEffect","useResizeObserver","baseStyle","baseStyleSmallWidth","baseStyleDesktop","contentStyle","dialogContentStyleNoShrink","dialogContentStyle","visibilityStyle","visibilityVisible","visibilityHidden","testIdProps","useTestId","jsxs","globalImages","dialogContainerStyle","dialogBodyStyle","dialogFooterStyle","Resizable","Dialog","autoFocusRef","isOpen","modality","launcherRef","anchorRef","placement","offset","dragAffordance","resizeBehavior","onDragStart","onDragMove","onDragEnd","onFocusSet","onTransitionEnd","props","status","setStatus","setVisibility","floatingRef","contentWrapperRef","localLauncherRef","derivedPlacement","animationType","uniqueId","useId","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","setInitialFocus","allTabbableElements","length","focusWithin","returnFocus","launcherEl","focusOn","nodeRef","useAnimation","animationStates","isAnimatedOnMount","onAnimationEnd","useMemo","launcherKeyDownCallback","event","getActiveElement","code","preventDefault","stopPropagation","useDraggable","isDisabled","Element","document","body","contains","addEventListener","removeEventListener","handleKeyDown","renderDialogContent","FocusTrap","renderDialog","Floating","flipOptions","mainAxis","crossAxis","shiftOptions","WindowOverlay","Modal","Layer","zoomIn","from","scaleX","scaleY","transformOrigin","opacity","to","options","duration","zoomOut","slideUp","SLIDE_UP_XLARGE","DURATION_LARGE","slideDown","SLIDE_DOWN_XLARGE"],"mappings":"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"}