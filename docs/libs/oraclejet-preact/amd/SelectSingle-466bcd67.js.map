{"version":3,"file":"SelectSingle-466bcd67.js","sources":["../../src/UNSAFE_SelectSingle/SelectSingleDesktopDropdown.tsx","../../src/UNSAFE_SelectSingle/SelectSingleField.tsx","../../src/UNSAFE_SelectSingle/SelectSingleFieldInput.tsx","../../src/UNSAFE_SelectSingle/SelectSingleMobileDropdown.tsx","../../src/UNSAFE_SelectSingle/useMobileDropdown.ts","../../src/UNSAFE_SelectSingle/SelectSingle.tsx","../../src/UNSAFE_SelectSingle/useSelectSingle.ts","../../src/UNSAFE_SelectSingle/useDisplayValue.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport type { CollectionRendererProps } from './SelectSingle.types';\n\ntype PickedDropdownProps = Pick<\n  ComponentProps<typeof Dropdown>,\n  'isOpen' | 'onAutoDismiss' | 'onPosition'\n>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDropdownProps &\n  PickedInlineUserAssistanceProps & {\n    data?: DataState<K, D> | null;\n    collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n    collectionRendererContext: CollectionRendererProps<K, D>;\n    dropdownId: string;\n    dropdownRef: RefObject<HTMLDivElement>;\n    isAddToListShown?: boolean;\n    isAdvancedSearchShown: boolean;\n    isDisabled?: boolean;\n    isDropdownAbove: boolean;\n    isEmptyResults: boolean;\n    isReadonly?: false;\n    label: string;\n    mainFieldRef: RefObject<HTMLDivElement>;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\nexport function SelectSingleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  collectionRenderer,\n  collectionRendererContext,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  label,\n  mainFieldRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onAutoDismiss,\n  onPosition,\n  userAssistanceDensity\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      </TabbableModeContext.Provider>\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n      {translations.select_addToList()}\n    </LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      anchorRef={mainFieldRef}\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n        {advancedSearchContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { DropdownArrow } from '#PRIVATE_SelectCommon';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { CancelS } from '#UNSAFE_RedwoodIcons/CancelS';\nimport { NavLeft } from '#UNSAFE_RedwoodIcons/NavLeft';\nimport { TextField } from '#UNSAFE_TextField';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps } from 'preact';\n\ntype PickedTextFieldProps = Pick<\n  ComponentProps<typeof TextField>,\n  | 'columnSpan'\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'endContent'\n  | 'hasZeroStartMargin'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onKeyDown'\n  | 'onMouseDown'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'resize'\n  | 'rootRef'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'testId'\n> & {\n  children: ComponentProps<typeof TextField>['mainContent'];\n};\n\ntype Props = PickedTextFieldProps & {\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  onBackButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onClearButtonClick?: ComponentProps<typeof IconButton>['onAction'];\n  onDropdownArrowClick?: ComponentProps<typeof DropdownArrow>['onClick'];\n};\n\nexport function SelectSingleField({\n  children,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  ...passThroughTextFieldProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { isDisabled, isLoading } = useFormFieldContext();\n\n  const startContent = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const endContent = isLoading ? undefined : (\n    <>\n      {isClearButtonShown && (\n        <IconButton\n          aria-label={translations.formControl_clear()}\n          size=\"sm\"\n          variant=\"ghost\"\n          onAction={onClearButtonClick}>\n          <CancelS />\n        </IconButton>\n      )}\n      {isDropdownArrowShown && (\n        <DropdownArrow\n          isDisabled={isDisabled}\n          onClick={onDropdownArrowClick}\n          testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <TextField\n      startContent={startContent}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","import { LiveRegion } from '#UNSAFE_LiveRegion';\nimport { TextFieldInput } from '#UNSAFE_TextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ComponentProps, Ref } from 'preact';\n\ntype PickedTextFieldInputProps = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'isRequired'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\n\ntype Props = PickedTextFieldInputProps & {\n  displayValue: string;\n  isAddToListShown: boolean;\n  isAdvancedSearchShown: boolean;\n  isUserFiltering: boolean;\n  liveRegionText?: string;\n  userInput?: string;\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n};\n\nexport function SelectSingleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isUserFiltering,\n  liveRegionText,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const addToListAccText = translations.select_addToListAvailable();\n  const advancedSearchAccText = translations.select_moreSearchOptionsAvailable();\n\n  return (\n    <>\n      <TextFieldInput\n        {...passThroughTextFieldInputProps}\n        hasEndContent={true}\n        aria-autocomplete=\"list\"\n        autoComplete=\"off\"\n        role=\"combobox\"\n        spellcheck={false}\n        type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n        value={isUserFiltering ? userInput : displayValue}\n      />\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n      {isAdvancedSearchShown ? <LiveRegion>{advancedSearchAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { View } from '#UNSAFE_View';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { ComponentChildren, ComponentProps } from 'preact';\nimport type { CollectionRendererProps } from './SelectSingle.types';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { useMobileDropdown, type UseMobileDropdownProps } from './useMobileDropdown';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\ntype PickedSelectSingleFieldInputProps = Pick<\n  ComponentProps<typeof SelectSingleFieldInput>,\n  | 'aria-describedby'\n  | 'aria-label'\n  | 'displayValue'\n  | 'isAddToListShown'\n  | 'isAdvancedSearchShown'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'virtualKeyboard'\n> & {\n  onFieldBlur?: ComponentProps<typeof SelectSingleFieldInput>['onBlur'];\n  onFieldFocus?: ComponentProps<typeof SelectSingleFieldInput>['onFocus'];\n  onFieldInput?: ComponentProps<typeof SelectSingleFieldInput>['onInput'];\n  onFieldKeyDown?: ComponentProps<typeof SelectSingleFieldInput>['onKeyDown'];\n  onFieldKeyUp?: ComponentProps<typeof SelectSingleFieldInput>['onKeyUp'];\n};\ntype PickedSelectMobileDropdownProps = Pick<ComponentProps<typeof SelectMobileDropdown>, 'isOpen'>;\ntype PickedUseMobileDropdownProps<K extends string | number, D extends Record<string, any>> = Pick<\n  UseMobileDropdownProps<K, D>,\n  'clearValue' | 'setDropdownOpen' | 'stopFiltering' | 'setUserInput'\n> & {\n  mainFieldInputRef: UseMobileDropdownProps<K, D>['inputRef'];\n};\n\ntype Props<\n  K extends string | number,\n  D extends Record<string, any>\n> = PickedInlineUserAssistanceProps &\n  PickedSelectMobileDropdownProps &\n  PickedSelectSingleFieldInputProps &\n  PickedUseMobileDropdownProps<K, D> & {\n    data?: DataState<K, D> | null;\n    collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n    collectionRendererContext: CollectionRendererProps<K, D>;\n    dropdownId: string;\n    isEmptyResults: boolean;\n    isFocused: boolean;\n    isLoading: boolean;\n    label: string;\n    liveRegionText?: string;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    propIsLoading?: boolean;\n    userAssistanceDensity?: UserAssistanceDensityType;\n    userInput?: string;\n    virtualKeyboard?: SelectSingleFieldInputProps['virtualKeyboard'];\n  };\n\nexport function SelectSingleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  clearValue,\n  collectionRenderer,\n  collectionRendererContext,\n  data,\n  displayValue,\n  dropdownId,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen = false,\n  isRequired,\n  label,\n  liveRegionText,\n  mainFieldInputRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  placeholder,\n  propIsLoading,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  userAssistanceDensity,\n  userInput,\n  virtualKeyboard\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n    useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: ''\n    });\n  const { selectSingleFieldInputProps, selectSingleFieldProps } = useMobileDropdown({\n    clearValue,\n    displayValue,\n    inputRef: mainFieldInputRef,\n    isDropdownOpen: isOpen,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...labelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...userAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={formFieldContext}>\n          <View>\n            <SelectSingleField\n              {...textFieldProps}\n              {...mobileDropdownFieldLabelProps}\n              {...selectSingleFieldProps}\n              onFocus={onFieldFocus}\n              onBlur={onFieldBlur}>\n              <SelectSingleFieldInput\n                {...inputProps}\n                {...selectSingleFieldInputProps}\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isAdvancedSearchShown={isAdvancedSearchShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n              />\n            </SelectSingleField>\n          </View>\n          {dropdownInlineUserAssistance}\n          {advancedSearchContent}\n        </FormFieldContext.Provider>\n      }\n      hasHeaderSeparator={!(isAdvancedSearchShown && isEmptyResults)}\n      id={dropdownId}\n      isOpen={isOpen}\n      labelId={labelProps.id}>\n      <DropdownList\n        isLoading={data === null}\n        hasTopGap={!(isAddToListShown || isAdvancedSearchShown)}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","import { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport type { useSelectSingle } from './useSelectSingle';\n\ntype Key = string | number;\ntype Data = Record<string, any>;\n\ntype PickedPropsFromUseSelectSingle<K extends Key, D extends Data> = Pick<\n  ReturnType<typeof useSelectSingle<K, D>>,\n  | 'clearValue'\n  | 'inputRef'\n  | 'isDropdownOpen'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K extends Key, D extends Data> = PickedPropsFromUseSelectSingle<\n  K,\n  D\n> & {\n  displayValue: string;\n};\n\nexport function useMobileDropdown<K extends Key, D extends Data>({\n  clearValue,\n  displayValue,\n  inputRef,\n  isDropdownOpen,\n  userInput,\n  setDropdownOpen,\n  stopFiltering,\n  setUserInput\n}: UseMobileDropdownProps<K, D>) {\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  const closeDropdown = useCallback(() => {\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    // reset the user filter and the value of the component\n    stopFiltering();\n    // clear the value but do not close the dropdown\n    clearValue(false);\n    // set focus to the dropdown input field\n    dropdownInputRef.current?.focus();\n  }, [clearValue, stopFiltering]);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n    }\n    wasDropdownOpen.current = isDropdownOpen;\n  }, [isDropdownOpen]);\n\n  const isInitialRender = useRef(true);\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    setUserInput(displayValue);\n  }\n\n  return {\n    selectSingleFieldInputProps: {\n      displayValue: userInput ?? '',\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput\n    },\n    selectSingleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown:\n        !isSearchTextEmptyOrUndefined(userInput) || !isSearchTextEmptyOrUndefined(displayValue),\n      isDropdownArrowShown: false,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  type UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport type { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { useFocusableTextField, type FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { Size } from '#utils/UNSAFE_size';\nimport type { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport {\n  Fragment,\n  type VNode,\n  type ComponentChildren,\n  type ComponentProps,\n  type Ref\n} from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef, useCallback, useImperativeHandle, useRef } from 'preact/hooks';\nimport type { CollectionRendererProps, ItemRendererProps } from './SelectSingle.types';\nimport { SelectSingleDesktopDropdown } from './SelectSingleDesktopDropdown';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { SelectSingleMobileDropdown } from './SelectSingleMobileDropdown';\nimport { useDisplayValue } from './useDisplayValue';\nimport { useSelectSingle } from './useSelectSingle';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters\n   * and there are no results.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * Specifies whether the advanced search link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because the conditions for when it is shown are\n   * more relaxed than add to list and its external UI could also potentially include the\n   * ability to add to list.\n   */\n  advancedSearch?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: SelectSingleFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Render function for the collection in the dropdown.\n   */\n  collectionRenderer?: (\n    collectionRendererProps: CollectionRendererProps<K, D>\n  ) => ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectSingle will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: SelectSingleFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: SelectSingleFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: SelectSingleFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the key, data, and optional metadata for the selected value.\n   */\n  valueItem?: Item<K, D>;\n  /**\n   * The style variant of the component.\n   */\n  variant?: SelectSingleFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function called when the user triggers the advanced search link shown in the dropdown.\n   */\n  onAdvancedSearchAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected value.\n   *\n   * The function should set a new <code>valueItem</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectSingle is a dropdown list that supports single selection and search filtering.\n */\nexport const SelectSingle = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      advancedSearch = 'off',\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      collectionRenderer,\n      columnSpan,\n      data,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItem,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const enabledElementRef = useRef<HTMLInputElement>(null);\n    const readonlyElementRef = useRef<HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused: origIsFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    useImperativeHandle(ref!, () => focusMethods, [focusMethods]);\n\n    const {\n      addToListEventHandlers,\n      advancedSearchEventHandlers,\n      clearValue,\n      collectionRendererContext,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      inputEventHandlers,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textFieldRef,\n      userInput\n    } = useSelectSingle<K, D>({\n      addToList,\n      advancedSearch,\n      data,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      valueItem\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItem !== undefined ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValue(itemText, valueItem);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const defaultCollectionRenderer = useCallback(\n      ({\n        onPersistCurrentRowKey,\n        onRowAction,\n        selected,\n        searchText,\n        currentRowKeyOverride\n      }: CollectionRendererProps<K, D>) => (\n        <DefaultList\n          aria-label={label ?? ''}\n          currentItemVariant=\"highlight\"\n          currentKey={currentRowKeyOverride}\n          data={data}\n          itemRenderer={itemRenderer}\n          itemText={itemText}\n          onCurrentKeyChange={onPersistCurrentRowKey}\n          onItemAction={onRowAction}\n          onLoadRange={onLoadRange}\n          searchText={isUserFiltering ? searchText : undefined}\n          selectedKeys={selected}\n          selectionMode=\"single\"\n        />\n      ),\n      [data, isUserFiltering, itemRenderer, itemText, label, onLoadRange]\n    );\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainContent = !isPhoneMainFieldInput ? (\n      <SelectSingleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputProps}\n        {...inputEventHandlers}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectSingleMobileDropdown\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        clearValue={clearValue}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        collectionRendererContext={collectionRendererContext}\n        data={data}\n        displayValue={displayValue}\n        dropdownId={dropdownId}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isRequired={isRequired}\n        label={label}\n        liveRegionText={liveRegionText}\n        mainFieldInputRef={enabledElementRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        setDropdownOpen={setDropdownOpen}\n        stopFiltering={stopFiltering}\n        setUserInput={setUserInput}\n        textAlign={textAlign}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        virtualKeyboard={virtualKeyboard}\n      />\n    ) : (\n      <SelectSingleDesktopDropdown\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        collectionRendererContext={collectionRendererContext}\n        data={data}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectSingleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onFocusOut}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onFocus={focusProps?.onFocusIn}\n            rootRef={textFieldRef as Ref<HTMLElement> | undefined}\n            testId={testId}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}>\n            {mainContent}\n          </SelectSingleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n) as {\n  <K extends string | number, D extends Record<string, any>>(\n    props: Props<K, D> & { ref?: Ref<FocusableHandle> }\n  ): VNode<any> | null;\n}; // forwardRef will remove generics, so we cast it explicitly to preserve generics.\n\nexport type SelectSingleProps<K extends string | number, D extends Record<string, any>> = Props<\n  K,\n  D\n>;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  UseCollectionRendererSelectSingleParams,\n  isBeforeDataFetch,\n  isPhone,\n  isSearchTextEmptyOrUndefined,\n  useCollectionRenderer,\n  useSelectCommon\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\nimport { KEYS, isControlOrFunctionKey } from '#utils/PRIVATE_keyboardUtils';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { SelectSingle } from './SelectSingle';\n\ntype PickedPropsFromSelectSingle = Pick<\n  ComponentProps<typeof SelectSingle>,\n  | 'addToList'\n  | 'advancedSearch'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onAdvancedSearchAction'\n  | 'onFilter'\n>;\ntype UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {\n  data?: DataState<K, D> | null;\n  inputRef: RefObject<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  valueItem?: Item<K, D>;\n};\n\n/**\n * Hook that manages SelectSingle state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectSingle, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected value is committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param valueItem Specifies the key, data, and optional metadata for the selected value.\n *\n * @returns Properties to apply to internal components that SelectSingle renders, and component\n * state.\n */\nexport function useSelectSingle<K extends string | number, D extends Record<string, any>>({\n  addToList,\n  advancedSearch,\n  data,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCommit: propOnCommit,\n  onFilter,\n  valueItem\n}: UseSelectSingleProps<K, D>) {\n  const {\n    currentRowKeyRef,\n    currentRowOverride,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRowOverride,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isBlurClearValue, setBlurClearValue] = useState(false);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [isTabbingOutOfDropdown, setTabbingOutOfDropdown] = useState(false);\n\n  // refs used by some of the effects below to determine whether the effect needs to run,\n  // for when the list of dependencies is longer than what we want the trigger to actually be\n  const prevDataRef = useRef(data);\n  const prevDropdownOpenRef = useRef(isDropdownOpen);\n  const prevSearchText = useRef(searchText);\n\n  const isAdvancedSearchShown =\n    advancedSearch === 'on' && isUserFiltering && searchText != null && searchText.length > 0;\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  // advanced search and add to list should not be shown at the same time, so if both are on,\n  // let advanced search win because it is shown more often than add to list in the dropdown\n  // (even when the list is not empty) and its external UI could potentially include the\n  // ability to add to list too\n  const isAddToListShown =\n    addToList === 'on' &&\n    advancedSearch !== 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0 &&\n    isEmptyResults;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const handleAdvancedSearchAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAdvancedSearchAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAdvancedSearchAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const onCommit = useCallback(\n    (value?: K) => {\n      propOnCommit?.({\n        value: value,\n        previousValue: valueItem !== undefined ? valueItem.key : undefined\n      });\n    },\n    [propOnCommit, valueItem]\n  );\n\n  const clearValue = useCallback(\n    (shouldCloseDropdown = true) => {\n      if (shouldCloseDropdown) {\n        setDropdownOpen(false);\n      }\n\n      setSelectedKeys(new Set<K>());\n\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(undefined);\n    },\n    [onCommit, setDropdownOpen]\n  );\n\n  // determine if we need to clear the value because the user has deleted all the text\n  const isClearValueNeeded = useCallback(() => {\n    return isUserFiltering && userInput === '' && valueItem !== undefined;\n  }, [isUserFiltering, userInput, valueItem]);\n\n  const clearValueIfNeeded = useCallback(() => {\n    if (isClearValueNeeded()) {\n      clearValue();\n      return true;\n    }\n    return false;\n  }, [clearValue, isClearValueNeeded]);\n\n  // JET-65757 - Empty value rejected when not confirmed by Enter/Tab\n  // When the field loses focus, check to see if we need to clear the value and set a state flag\n  // to later check in a useEffect.\n  // (We have to make this check outside of the useEffect itself because by the time the useEffect\n  // is called, the state we check here to see if we need to clear the value may have already\n  // been changed.)\n  if (\n    prevIsFocused &&\n    !isFocused &&\n    !isTabbingOutOfDropdown &&\n    !isBlurClearValue &&\n    isClearValueNeeded()\n  ) {\n    setBlurClearValue(true);\n  }\n  // Create this function with useEffectEvent so that it is stable and by itself won't cause\n  // the below dependent useEffect to trigger.\n  const handleBlur_stable = useEffectEvent(() => {\n    // if we need to clear the value, do it now and reset the flag\n    if (isBlurClearValue) {\n      clearValue();\n      setBlurClearValue(false);\n    }\n    // if we were tabbing out of the dropdown, reset the flag now that we've lost focus\n    if (isTabbingOutOfDropdown) {\n      setTabbingOutOfDropdown(false);\n    }\n  });\n  // only run this effect when focus changes (handleBlur_stable has to be listed\n  // as a dependency, but it's stable and won't change across renders)\n  useEffect(() => {\n    if (!isFocused) {\n      handleBlur_stable();\n    }\n  }, [handleBlur_stable, isFocused]);\n\n  // JET-60376 - Evaluate unit test driving strategy for SelectSingle\n  // Add a _changeValue method to the root DOM element so that a test adapter can call it\n  // to simulate the user changing the value, similar to what we do in the core pack select\n  // component test adapters.\n  const textFieldRef = useRef<HTMLElement>();\n  const changeValue = useCallback(\n    (value?: K) => {\n      // we always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI\n      if (!isReadonly && !isDisabled) {\n        onCommit(value);\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly or disabled');\n    },\n    [isDisabled, isReadonly, onCommit]\n  );\n  useEffect(() => {\n    const ref = isReadonly ? mainFieldRef : textFieldRef;\n    if (ref.current) {\n      (ref.current as any)._changeValue = changeValue;\n    }\n  }, [changeValue, isReadonly, mainFieldRef]);\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // if there are multiple tabbable elements in the dropdown, like the list and\n              // the advanced search link, then leave the dropdown open when tabbing among them\n              const isShift = keyboardEvent.shiftKey;\n              const tabbableElems = getDropdownTabbableElems();\n              if (tabbableElems && tabbableElems.length > 1) {\n                const firstTabbableElem = tabbableElems[0];\n                const lastTabbableElem = tabbableElems[tabbableElems.length - 1];\n                // check if tabbing forwards and focus is not on the last tabbable elem or\n                // tabbing backwards and focus is not on the first tabbable elem,\n                // then keep the dropdown open and simply return\n                if (\n                  (!isShift && document.activeElement !== lastTabbableElem) ||\n                  (isShift && document.activeElement !== firstTabbableElem)\n                ) {\n                  setDropdownOpen(true);\n                  return;\n                }\n              }\n\n              // if there is a currentRow in the dropdown, select it and commit it\n              if (currentRowKeyRef.current !== undefined && data != null && data.data.length > 0) {\n                setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n                onCommit(currentRowKeyRef.current);\n\n                // set flag that we're tabbing out of dropdown so that we can check it in a\n                // useEffect that gets executed when we lose focus\n                setTabbingOutOfDropdown(true);\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              focusInput();\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [\n      currentRowKeyRef,\n      data,\n      focusInput,\n      getDropdownTabbableElems,\n      isDropdownOpen,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen\n    ]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          // if we're not going to clear the value when the component loses focus,\n          // check whether we need to select the current item\n          const isValueClearedTab = isClearValueNeeded();\n          if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {\n            // JET-68215 (Error state is lost after mouse click + Tab). If the user is just tabbing\n            // to navigate between controls, we don't want to consider that a selection. Only commit\n            // if the user has interacted with the control. isUserFiltering is set to true whenever\n            // the user types to filter and will get reset when the dropdown closes.\n            if (isUserFiltering) {\n              // if there is a currentRow in the dropdown (meaning a highlighted item that would\n              // have keyboard focus if the dropdown list had physical focus, which may be different\n              // from the currently selected item), select it and commit it;\n              // otherwise commit the currently selected value again so that a valueAction event\n              // will be fired\n              if (currentRowKeyRef.current !== undefined) {\n                setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n                onCommit(currentRowKeyRef.current);\n              } else {\n                onCommit(valueItem?.key ?? undefined);\n              }\n            }\n          }\n\n          // Remove the dropdown immediately, without waiting for a rerender based on changing\n          // state, so that the open dropdown cannot get focus when the browser handles the\n          // Tab key.\n          removeDropdown();\n\n          setDropdownOpen(false);\n          break;\n\n        case KEYS.ENTER:\n          // if this is on a mobile device (only phone and not in tablet devices), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown, there are no results, so trigger the add to list link\n          if (isAddToListShown) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if advanced search is shown and there are no results, trigger the advanced\n          // search link\n          if (isAdvancedSearchShown && isEmptyResults) {\n            handleAdvancedSearchAction();\n            return;\n          }\n\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueCleared = clearValueIfNeeded();\n          if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {\n            setDropdownOpen(false);\n\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n\n            // if there is a currentRow in the dropdown, select it and commit it;\n            // otherwise commit the currently selected value again\n            if (currentRowKeyRef.current !== undefined) {\n              setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n              onCommit(currentRowKeyRef.current);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      clearValueIfNeeded,\n      currentRowKeyRef,\n      data,\n      handleAddToListAction,\n      handleAdvancedSearchAction,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isClearValueNeeded,\n      isDropdownOpen,\n      isEmptyResults,\n      isUserFiltering,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen,\n      stopFiltering,\n      valueItem\n    ]\n  );\n\n  // when the valueItem changes, save the new selectedKeys\n  useEffect(() => {\n    setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));\n  }, [valueItem]);\n\n  const onItemAction = useCallback<UseCollectionRendererSelectSingleParams<K, D>['onItemAction']>(\n    (detail) => {\n      focusInput();\n      setDropdownOpen(false);\n\n      // after selecting a value, the user is no longer actively filtering, so update related\n      // state accordingly so that the newly selected value appears in the field\n      stopFiltering();\n\n      const newKey = detail.context.key;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for a new valueItem to be set\n      setSelectedKeys(new Set([newKey]));\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(newKey);\n    },\n    [focusInput, onCommit, setDropdownOpen, stopFiltering]\n  );\n\n  useEffect(() => {\n    // only run this effect when data changes because we need to wait for the new set of\n    // filtered data to be set before highlighting the first result\n    if (data === prevDataRef.current) {\n      return;\n    }\n\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    if (\n      isDropdownOpen &&\n      isUserFiltering &&\n      data != null &&\n      data.offset === 0 &&\n      data.data.length > 0\n    ) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRowOverride({\n        rowKey: !isSearchTextEmptyOrUndefined(searchText) ? data.data[0].metadata.key : undefined\n      });\n    }\n  }, [data, isDropdownOpen, isUserFiltering, searchText, setCurrentRowOverride]);\n\n  useEffect(() => {\n    // only run this effect when the state of the dropdown changes\n    if (isDropdownOpen === prevDropdownOpenRef.current) {\n      return;\n    }\n\n    // JET-66783 - <oj-c-select-single> scroll position is not at selected item when we open the list second time.\n    // set the current item to the selected item (if there is one)\n    // when the dropdown opens if there is no filter text\n    if (\n      isDropdownOpen &&\n      (!isUserFiltering || searchText === undefined || searchText.length === 0)\n    ) {\n      setCurrentRowOverride({ rowKey: [...(selectedKeys ?? [undefined])][0] });\n    }\n  }, [isDropdownOpen, isUserFiltering, searchText, selectedKeys, setCurrentRowOverride]);\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const collectionRendererContext = useCollectionRenderer<K, D>({\n    currentKey: currentRowOverride.rowKey,\n    searchText,\n    selectedKeys,\n    onCurrentKeyChange,\n    onItemAction\n  });\n\n  if (isFocused !== prevIsFocused) {\n    setPrevIsFocused(isFocused);\n  }\n\n  // update refs used in some of the above effects in a useEffect on every render so that they\n  // update after the above effects run\n  useEffect(() => {\n    prevDataRef.current = data;\n    prevDropdownOpenRef.current = isDropdownOpen;\n    prevSearchText.current = searchText;\n  });\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    advancedSearchEventHandlers: {\n      onAction: handleAdvancedSearchAction\n    },\n    collectionRendererContext,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    clearValue,\n    dropdownEventHandlers,\n    dropdownRef,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isAdvancedSearchShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textFieldRef,\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValue<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItem?: Item<K, D>\n): string {\n  // create the text displayed in the field from the selected value\n  const displayValue = useMemo(() => {\n    return valueItem === undefined ? '' : renderItemText(valueItem, itemText) ?? '';\n  }, [valueItem, itemText]);\n\n  return displayValue;\n}\n"],"names":["SelectSingleDesktopDropdown","assistiveText","collectionRenderer","collectionRendererContext","data","dropdownId","dropdownRef","helpSourceLink","helpSourceText","isAddToListShown","isAdvancedSearchShown","isDisabled","isDropdownAbove","isEmptyResults","isOpen","isReadonly","label","mainFieldRef","onAddToListAction","onAdvancedSearchAction","onAutoDismiss","onPosition","userAssistanceDensity","translations","useTranslationBundle","dropdownInlineUserAssistance","undefined","_jsx","TabbableModeContext","Provider","value","isTabbable","children","jsx","DropdownUserAssistance","fieldLabel","dropdownListContent","EmptyResults","addToListContent","LinkItem","isHighlighted","onAction","select_addToList","advancedSearchContent","_jsxs","onMouseDown","preventDefault","Separator","select_moreSearchOptions","Dropdown","anchorRef","id","jsxs","DropdownList","hasBottomGap","isLoading","SelectSingleField","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","passThroughTextFieldProps","useFormFieldContext","startContent","IconButton","selectMultiple_back","size","variant","NavLeft","endContent","_Fragment","Fragment","formControl_clear","CancelS","SvgCancelS","DropdownArrow","onClick","testId","TextField","mainContent","SelectSingleFieldInput","displayValue","isUserFiltering","liveRegionText","userInput","virtualKeyboard","passThroughTextFieldInputProps","addToListAccText","select_addToListAvailable","advancedSearchAccText","select_moreSearchOptionsAvailable","TextFieldInput","hasEndContent","autoComplete","role","spellcheck","type","LiveRegion","SelectSingleMobileDropdown","ariaDescribedBy","ariaLabel","clearValue","isFocused","isRequired","mainFieldInputRef","onFieldBlur","onFieldFocus","onFieldInput","onFieldKeyDown","onFieldKeyUp","placeholder","propIsLoading","setDropdownOpen","setUserInput","stopFiltering","textAlign","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","isRequiredShown","labelEdge","styleVariant","selectSingleFieldInputProps","selectSingleFieldProps","inputRef","isDropdownOpen","dropdownInputRef","useRef","closeDropdown","useCallback","current","focus","wasDropdownOpen","useEffect","setTimeout","isInitialRender","hasEmptyLabel","removeIcon","isSearchTextEmptyOrUndefined","useMobileDropdown","hasValue","mobileDropdownFieldLabelProps","Label","SelectMobileDropdown","header","FormFieldContext","View","onFocus","onBlur","onInput","onKeyDown","onKeyUp","hasHeaderSeparator","labelId","hasTopGap","SelectSingle","forwardRef","addToList","advancedSearch","columnSpan","propIsDisabled","propIsReadonly","itemRenderer","itemText","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","onLoadRange","propTextAlign","propUserAssistanceDensity","valueItem","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","readonlyElementRef","focusProps","origIsFocused","methods","focusMethods","useFocusableTextField","useImperativeHandle","addToListEventHandlers","advancedSearchEventHandlers","dropdownArrowEventHandlers","dropdownEventHandlers","inputEventHandlers","isDataFetched","mouseProps","textFieldRef","propIsFocused","propOnCommit","currentRowKeyRef","currentRowOverride","getDropdownTabbableElems","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","onCurrentKeyChange","searchText","setCurrentRowOverride","useSelectCommon","selectedKeys","setSelectedKeys","useState","isBlurClearValue","setBlurClearValue","prevIsFocused","setPrevIsFocused","isTabbingOutOfDropdown","setTabbingOutOfDropdown","prevDataRef","prevDropdownOpenRef","prevSearchText","length","isBeforeDataFetch","totalSize","handleAddToListAction","handleAdvancedSearchAction","previousValue","key","shouldCloseDropdown","Set","isClearValueNeeded","clearValueIfNeeded","handleBlur_stable","useEffectEvent","changeValue","Promise","reject","resolve","_changeValue","focusInput","removeDropdown","parentElement","removeChild","myHandleDropdownAutoDismiss","event","keyboardEvent","code","KEYS","TAB","isShift","shiftKey","tabbableElems","firstTabbableElem","lastTabbableElem","document","activeElement","myHandleMainFieldKeyDown","isControlOrFunctionKey","ENTER","isPhone","onItemAction","detail","newKey","context","offset","rowKey","metadata","useMemo","mergeProps","useCollectionRenderer","currentKey","useSelectSingle","useLoadingIndicatorTimer","baseId","renderItemText","useDisplayValue","labelComp","fieldLabelProps","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","defaultCollectionRenderer","onPersistCurrentRowKey","onRowAction","selected","currentRowKeyOverride","DefaultList","currentItemVariant","selectionMode","ReadonlyTextFieldInput","as","elementRef","ReadonlyTextField","onFocusOut","onFocusIn","select_noMatchesFound","select_oneMatchFound","sizePrecision","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","SelectMobileFieldInput","isTablet","shouldShowDropdown","dropdown","rootRef"],"mappings":"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"}