{"version":3,"file":"BaseNavigationListItem-368284be.js","sources":["../../src/UNSAFE_NavigationListCommon/NavigationListContext.ts","../../src/UNSAFE_NavigationListCommon/useNavigationListContext.ts","../../src/UNSAFE_NavigationListCommon/useNavigationListItem.ts","../../src/UNSAFE_NavigationListCommon/BaseNavigationListItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { NavigationListProps } from './NavigationListProps';\n\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n\nexport type NavigationListContextProps<K extends string | number> = Pick<\n  NavigationListProps<K>,\n  'selection' | 'onSelectionChange' | 'onRemove'\n> & {\n  currentKey?: K;\n  showFocusRing: boolean;\n  onCurrentKeyChange:\n    | (<K extends string | number>(detail: CurrentKeyDetail<K>) => void)\n    | undefined;\n  navigationListItemPrefix: string;\n};\n\n/**\n * Context used to pass navlist information without having to pass it to navlist children props.\n * We want to communicate information down to any interested navlist item children.\n */\n\nconst NavigationListContext = createContext<NavigationListContextProps<string | number>>(null!);\n\nexport { NavigationListContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\nimport { NavigationListContext } from './NavigationListContext';\n\n/**\n * Utility hook for consuming the NavigationListContext\n *\n * @returns The value of NavigationListContext provider\n */\nfunction useNavigationListContext() {\n  return useContext(NavigationListContext);\n}\n\nexport { useNavigationListContext };\n","import { useCallback } from 'preact/hooks';\n\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useNavigationListContext } from './useNavigationListContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from '../UNSAFE_NavigationList/themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\n\nconst flexItemStyleInterpolations = mergeInterpolations<FlexitemProps>([\n  ...Object.values(flexitemInterpolations)\n]);\nconst { class: labelContainerFlexItemClasses, ...labelContainerFlexItemStyle } =\n  flexItemStyleInterpolations({\n    alignSelf: 'center'\n  });\n\nexport function useNavigationListItem<K extends string | number>({ itemKey }: { itemKey: K }) {\n  const { onSelectionChange, selection, currentKey, showFocusRing, navigationListItemPrefix } =\n    useNavigationListContext();\n\n  //Selection and focus state\n  const isCurrent = currentKey === itemKey;\n\n  const isSelected = selection === itemKey;\n\n  //Styling\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle, applyActiveStyle } =\n    useInteractionStyle();\n\n  const {\n    classes: listItemClasses,\n    styles: { labelContainerClasses }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme,\n    {\n      focusRing: showFocusRing ? 'isFocusRing' : 'notFocusRing',\n      current: isCurrent ? 'isCurrent' : 'notCurrtent',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      hybridHover: applyHoverStyle ? 'isHybridHover' : 'notHybridHover',\n      pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      active: applyActiveStyle ? 'isActive' : 'notActive'\n    }\n  );\n\n  //Item handlers\n  const handlePress = useCallback(() => {\n    onSelectionChange?.({ value: itemKey as K, reason: 'pointer' });\n  }, [itemKey, onSelectionChange]);\n\n  //Legacy navlist makes selection on keyDown, but since preact tabbar made selection after keyUp, will do the same\n  //for preact navlist\n  const { pressProps } = usePress(handlePress);\n\n  return {\n    itemId: navigationListItemPrefix + itemKey,\n    itemHandlers: mergeProps(interactionProps, pressProps /*,onFocusProps*/),\n    itemClasses: classNames([listItemClasses]),\n    isSelected,\n    labelContainerClasses: classNames([labelContainerClasses, labelContainerFlexItemClasses]),\n    labelContainerStyle: labelContainerFlexItemStyle\n  };\n}\n","import { useRef } from 'preact/hooks';\n\nimport { Text } from '../UNSAFE_Text';\n\nimport { useNavigationListItem } from './useNavigationListItem';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Badge } from '../UNSAFE_Badge';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from '../UNSAFE_NavigationList/themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\nimport { ComponentChildren } from 'preact';\n\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\n\nexport type BaseNavigationListItemProps<K extends string | number> = {\n  /**\n   * Key of the NavigationListItem.\n   */\n  itemKey: K;\n  /**\n   * Label of the NavigationListItem.\n   */\n  label?: string;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n};\n\n/*TODO: JET-58535. Add ripple effect when touching navigationListItem. */\nexport function BaseNavigationListItem<K extends string | number>({\n  itemKey,\n  label,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon\n}: BaseNavigationListItemProps<K>) {\n  const itemRef = useRef<HTMLLIElement | null>(null);\n\n  //Logic of the component handled here\n  const {\n    itemId,\n    itemHandlers,\n    itemClasses,\n    isSelected,\n    labelContainerClasses,\n    labelContainerStyle\n  } = useNavigationListItem({\n    itemKey\n  });\n\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        return <ErrorS color=\"danger\" />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const {\n    styles: { iconLabelContainer, iconContainer, navigationItemMetadata }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme\n  );\n\n  const navigationItemMatadata = classNames([navigationItemMetadata]);\n\n  const endIconContainerClasses = classNames([iconLabelContainer, iconContainer]);\n  const {\n    styles: { navigationlistRemoveIcon }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme\n  );\n\n  const removeClass = classNames([navigationlistRemoveIcon]);\n\n  return (\n    <li\n      role=\"tab\"\n      {...itemHandlers}\n      data-oj-key={itemKey}\n      id={itemId}\n      class={itemClasses}\n      aria-selected={isSelected}\n      ref={itemRef}>\n      {label && (\n        <span class={labelContainerClasses} style={labelContainerStyle}>\n          <Text size=\"inherit\" weight=\"inherit\" variant=\"inherit\">\n            {label}\n          </Text>\n        </span>\n      )}\n      {(metadata || severityRequirement || badge || removeIcon) && (\n        <Flex gap=\"2x\" align=\"center\" justify=\"end\" flex=\"1 1 auto\">\n          {' '}\n          {badge && (\n            <span class={endIconContainerClasses}>\n              <Badge size=\"md\" variant=\"neutralSubtle\">\n                {badge}\n              </Badge>\n            </span>\n          )}\n          {metadata && (\n            <span class={navigationItemMatadata}>\n              <Text>{'( ' + metadata + ' )'}</Text>\n            </span>\n          )}\n          {severityRequirement && (\n            <span class={endIconContainerClasses}>{IconComponent(severity)}</span>\n          )}\n          {removeIcon && <span class={removeClass}>{removeIcon}</span>}\n        </Flex>\n      )}\n    </li>\n  );\n}\n"],"names":["NavigationListContext","createContext","useNavigationListContext","useContext","flexItemStyleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","labelContainerFlexItemClasses","labelContainerFlexItemStyle","alignSelf","itemKey","label","badge","metadata","severity","removeIcon","itemRef","useRef","itemId","itemHandlers","itemClasses","isSelected","labelContainerClasses","labelContainerStyle","onSelectionChange","selection","currentKey","showFocusRing","navigationListItemPrefix","isCurrent","interactionProps","applyPseudoHoverStyle","applyHoverStyle","applyActiveStyle","useInteractionStyle","classes","listItemClasses","styles","useComponentTheme","NavigationListItemRedwoodTheme","focusRing","current","selected","hybridHover","pseudoHover","active","handlePress","useCallback","value","reason","pressProps","usePress","mergeProps","classNames","useNavigationListItem","severityRequirement","undefined","iconLabelContainer","iconContainer","navigationItemMetadata","navigationItemMatadata","endIconContainerClasses","navigationlistRemoveIcon","removeClass","_jsxs","jsxs","role","id","ref","children","_jsx","jsx","style","Text","size","weight","variant","Flex","gap","align","justify","flex","Badge","severityValue","ErrorS","SvgErrorS","color","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","IconComponent"],"mappings":"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"}