{"version":3,"file":"TabBar-1c002b5b.js","sources":["../../src/UNSAFE_TabBar/TabBar.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { useImperativeHandle, useRef } from 'preact/hooks';\nimport { TabBarContext, TabBarLayout } from '../UNSAFE_TabBarCommon';\nimport { styles } from './themes/TabBarStyles.css';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\nimport { forwardRef } from 'preact/compat';\nexport {\n  TabBarItem,\n  RemovableTabBarItem,\n  OverflowTabBarItem,\n  TabBarContext,\n  useTabBarContext,\n  TabBarLayout\n} from '../UNSAFE_TabBarCommon';\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\n\n/**\n * type for payload of current key change event handler\n */\nexport type CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\ntype DisplayProps =\n  | {\n      /**\n       * Controls the content layout of the TabBarItem: 'standard' lays out the contents horizontally,\n       *'icons' hides the label,\n       */\n      display?: 'standard' | 'icons';\n      /**\n       *  The size indicates how tall the TabBarItem is rendered.\n       *  Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      size?: 'md' | 'lg';\n    }\n  | {\n      /**\n       *'stacked' stacks the icon on top of the label.\n       * Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      display?: 'stacked';\n      size?: 'never';\n    };\n\nexport type TabBarProps<K extends string | number> = DisplayProps & {\n  /**\n   * A set of TabBarItem(s) that TabBar will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Whether to stretch the tab bar items to occupy available space or to condense items\n   */\n  layout?: 'stretch' | 'condense';\n  /**\n   * The position of the TabBar. Valid Values: top and bottom.\n   * 'top' is used when TabBar is placed on top of content section and the selection\n   *  indicator would be placed below the TabBarItem.\n   * 'bottom' is used when TabBar is placed on bottom of content section and the selection\n   *  indicator would be placed above the TabBarItem.\n   */\n  edge?: 'top' | 'bottom';\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when user selects a tab.\n   * The callback is also invoked when a user selects a tab that is already selected.\n   */\n  onSelect?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Callback function to handle remove\n   */\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  /**\n   * Accepts the ID of an element that provides instructions for interaction with the TabBar.\n   */\n  'aria-describedby'?: string;\n  /**\n   * An aria-label which defines a string value that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-labelledby'?: string;\n};\n/**\n * A tab bar allows navigation between different content sections.\n */\nexport const TabBar = forwardRef(\n  <K extends string | number>(\n    {\n      children,\n      layout = 'stretch',\n      display = 'standard',\n      size = 'md',\n      edge = 'top',\n      selection,\n      onSelect,\n      onRemove,\n      'aria-describedby': ariaDescribedBy,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby\n    }: TabBarProps<K> & TestIdProps,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(ref!, () => ({\n      focus: () => {\n        if (rootRef.current) {\n          rootRef.current.focus();\n        }\n      },\n      blur: () => {\n        if (rootRef.current) {\n          rootRef.current.focus();\n        }\n      }\n    }));\n\n    const { rootProps, tabBarContext } = useTabBar({\n      class: styles.tabBarBase,\n      edge: edge,\n      onRemove,\n      onSelect,\n      ref: rootRef,\n      selection,\n      size,\n      children\n    });\n    return (\n      <TabBarContext.Provider value={tabBarContext}>\n        <div\n          {...rootProps}\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledby}\n          aria-describedby={ariaDescribedBy}>\n          <TabBarLayout layout={layout} display={display}>\n            {children}\n          </TabBarLayout>\n        </div>\n      </TabBarContext.Provider>\n    );\n  }\n);\n"],"names":["TabBar","forwardRef","children","layout","display","size","edge","selection","onSelect","onRemove","ariaDescribedBy","ariaLabel","ariaLabelledby","ref","rootRef","useRef","useImperativeHandle","focus","current","blur","rootProps","tabBarContext","useTabBar","class","styles","tabBarBase","_jsx","jsx","TabBarContext","Provider","value","TabBarLayout"],"mappings":"4jCAiHa,MAAAA,EAASC,EAAUA,YAC9B,EAEIC,WACAC,SAAS,UACTC,UAAU,WACVC,OAAO,KACPC,OAAO,MACPC,YACAC,WACAC,WACA,mBAAoBC,EACpB,aAAcC,EACd,kBAAmBC,GAErBC,KAEA,MAAMC,EAAUC,SAAuB,MAGvCC,EAAmBA,oBAACH,GAAM,KAAO,CAC/BI,MAAO,KACDH,EAAQI,SACVJ,EAAQI,QAAQD,OACjB,EAEHE,KAAM,KACAL,EAAQI,SACVJ,EAAQI,QAAQD,OACjB,MAIL,MAAMG,UAAEA,EAASC,cAAEA,GAAkBC,YAAU,CAC7CC,MAAOC,EAAMA,OAACC,WACdnB,KAAMA,EACNG,WACAD,WACAK,IAAKC,EACLP,YACAF,OACAH,aAEF,OACEwB,EAAAC,IAACC,EAAaA,cAACC,SAAS,CAAAC,MAAOT,WAC7BK,EAAAA,IACM,MAAA,IAAAN,EACQ,aAAAT,oBACKC,EAAc,mBACbF,EAAeR,SACjCwB,MAACK,EAAYA,aAAA,CAAC5B,OAAQA,EAAQC,QAASA,WACpCF,OAIP"}