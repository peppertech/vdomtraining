{"version":3,"file":"BaseCardViewSelectionTest-9627e4ab.js","sources":["../../src/PRIVATE_BaseCardView/__tests__/testHelpers.tsx","../../src/PRIVATE_BaseCardView/__tests__/BaseCardViewTest.tsx","../../src/PRIVATE_BaseCardView/__tests__/BaseCardViewSelectionTest.tsx"],"sourcesContent":["import { fireEvent, screen } from '@testing-library/preact';\nimport { VNode } from 'preact';\nimport { ListItemRendererContext, SelectionMode } from '../../UNSAFE_Collection';\nimport { ActionDetail } from '../../UNSAFE_BaseButton';\nimport { Avatar } from '../../UNSAFE_Avatar';\nimport { Button } from '../../UNSAFE_Button';\nimport { Text } from '../../UNSAFE_Text';\nimport { View } from '../../UNSAFE_View';\nimport { Flex } from '../../UNSAFE_Flex';\nimport { Center } from '../../UNSAFE_Center';\nimport { DragHandle } from '../../UNSAFE_DragHandle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { Employee } from '../__dev__/BaseCardViewData';\n\nexport type GenericCardGridProps<K extends string | number> = {\n  data: Employee[];\n  delay?: number;\n  isReorderEnabled?: boolean;\n  initialCurrentKey?: K;\n  fetchSize?: number;\n};\n\nexport type ActionCardGridProps<K extends string | number> = GenericCardGridProps<K> & {\n  handleAction?: (details: ActionDetail) => void;\n  showButton?: boolean; // for testing invalid focusBehavior\n};\n\nexport type SelectionCardGridProps<K extends string | number> = GenericCardGridProps<K> & {\n  selectionMode?: SelectionMode;\n  selectedKeys?: Set<Employee['id']>;\n};\n\nexport type TestComponentsProps<K extends string | number> = {\n  GenericCardGrid: (props: GenericCardGridProps<K>) => VNode;\n  ActionCardGrid: (props: ActionCardGridProps<K>) => VNode;\n  SelectionCardGrid: (props: SelectionCardGridProps<K>) => VNode;\n} & Record<string, (props: any) => VNode>;\n\nexport const CardContent = ({\n  context,\n  showButton,\n  isReorderEnabled\n}: {\n  context: ListItemRendererContext<Employee['id'], Employee>;\n  showButton?: boolean;\n  isReorderEnabled?: boolean;\n}) => {\n  const dragIcon = isReorderEnabled && (\n    <RootEnvironmentProvider environment={{ mode: 'test' }}>\n      <Center>\n        <DragHandle testId={`drag-icon-${context.metadata.key}`} />\n      </Center>\n    </RootEnvironmentProvider>\n  );\n  const buttons = showButton && (\n    <View paddingBlockStart={'1x'}>\n      <Flex direction=\"row\" wrap=\"wrap\" gap={'1x'} width={'100%'}>\n        <Button variant=\"outlined\" size=\"md\" label=\"A\" />\n        <Button variant=\"outlined\" size=\"md\" label=\"B\" />\n      </Flex>\n    </View>\n  );\n\n  return (\n    <View padding=\"6px\">\n      {dragIcon}\n      <View padding=\"10px\" paddingBlockEnd={0}>\n        <Avatar initials={context.data.initials} size=\"xl\" />\n        <View paddingBlockStart=\"2x\">\n          <Text variant=\"primary\" size=\"md\" lineClamp={1}>\n            {context.data.name}\n          </Text>\n          <Text variant=\"secondary\" size=\"md\" lineClamp={1}>\n            {context.data.title}\n          </Text>\n        </View>\n      </View>\n      <View padding=\"10px\" paddingBlockStart={0}>\n        {buttons}\n        {context.selector?.()}\n      </View>\n    </View>\n  );\n};\n\nexport const populateData = (count: number, isNumberKey?: boolean) =>\n  [...Array(count)].map(\n    (_, i) =>\n      ({\n        id: isNumberKey ? i : `${i}`,\n        name: `Employee ${i}`,\n        title: `Employee title ${i}`,\n        initials: `E${i}`\n      }) as Employee\n  );\n\nexport const getRoot = async () => {\n  return screen.findByRole('grid');\n};\n\nexport const getItems = async (role = 'row') => {\n  return screen.findAllByRole(role);\n};\n\nexport const getContents = async (role = 'gridcell') => {\n  return screen.findAllByRole(role);\n};\n\nexport const mouseItemSelection = (element: HTMLElement, options?: Record<string, unknown>) => {\n  fireEvent.click(element, options);\n};\n\nexport const fireDragAndDropEvent = (dragElement: HTMLElement, dropElement: HTMLElement) => {\n  fireEvent.dragStart(dragElement);\n  fireEvent.dragEnter(dropElement);\n  fireEvent.drop(dropElement);\n  fireEvent.dragEnd(dragElement);\n};\n\nexport const keyboardReorder = (\n  element: HTMLElement,\n  keyCode: 'ArrowLeft' | 'ArrowRight' | 'ArrowUp' | 'ArrowDown'\n) => {\n  fireEvent.keyDown(element, {\n    key: keyCode,\n    code: keyCode,\n    shiftKey: true,\n    metaKey: true\n  });\n};\n","import { render, waitFor, screen, fireEvent } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\n\nimport translations from '#resources/nls/en/bundle';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport {\n  getRoot,\n  getItems,\n  populateData,\n  TestComponentsProps,\n  mouseItemSelection,\n  fireDragAndDropEvent,\n  keyboardReorder\n} from './testHelpers';\n\nexport const testRender = ({\n  GenericCardGrid,\n  ActionCardGrid,\n  SelectionCardGrid,\n  ContentUpdatableCardGrid\n}: TestComponentsProps<string | number>) => {\n  it('initial render', async function () {\n    const data = populateData(100);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect(items.length).eq(25);\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is none', async () => {\n    const data = populateData(2);\n    render(<SelectionCardGrid data={data}></SelectionCardGrid>);\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq(null);\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq(null);\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is single', async () => {\n    const data = populateData(2);\n    render(\n      <SelectionCardGrid\n        data={data}\n        selectionMode={'single'}\n        selectedKeys={new Set(['1'])}></SelectionCardGrid>\n    );\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq('false');\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq('false');\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq('true');\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is multiple', async () => {\n    const data = populateData(3);\n    render(\n      <SelectionCardGrid\n        data={data}\n        selectionMode={'multiple'}\n        selectedKeys={new Set(['1', '2'])}></SelectionCardGrid>\n    );\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq('true');\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq('false');\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq('true');\n    expect((items[2] as HTMLElement).getAttribute('aria-selected')).eq('true');\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest === typeof undefined) {\n    // because jest doesn't show grid layout, the number of focusable elements is not calculated correctly\n    it('content focusBehavior - valid case', async () => {\n      const data = populateData(3);\n      render(<ActionCardGrid data={data}></ActionCardGrid>);\n      const items = await getItems('gridcell');\n\n      await userEvent.tab();\n\n      await waitFor(() => {\n        expect(items[0].matches(':focus-within')).to.be.true;\n      });\n    });\n\n    it('content focusBehavior - invalid case', async () => {\n      const data = populateData(3);\n      render(<ActionCardGrid data={data} showButton={true}></ActionCardGrid>);\n      const grid = await getRoot();\n\n      await userEvent.tab();\n      await waitFor(() => {\n        expect(grid.matches(':focus')).to.be.true;\n      });\n    });\n  }\n\n  // JET-61732\n  it('memoization - update memoized children', async () => {\n    const data = populateData(3);\n    const { queryByTestId } = render(\n      <ContentUpdatableCardGrid data={data}></ContentUpdatableCardGrid>\n    );\n\n    const elem0 = queryByTestId(data[0].id) as HTMLElement;\n    const elem1 = queryByTestId(data[1].id) as HTMLElement;\n    const elem2 = queryByTestId(data[2].id) as HTMLElement;\n    expect(elem0?.innerHTML, 'the 1st item initial count should be 0').eq('0');\n    expect(elem1?.innerHTML, 'the 2nd item initial count should be 0').eq('0');\n    expect(elem2?.innerHTML, 'the 3rd item initial count should be 0').eq('0');\n\n    const button = queryByTestId('mybutton') as HTMLElement;\n    await userEvent.click(button);\n\n    expect(elem0?.innerHTML, 'the 1st item new count should be 1').eq('1');\n    expect(elem1?.innerHTML, 'the 2nd item new count should be 1').eq('1');\n    expect(elem2?.innerHTML, 'the 3rd item new count should be 1').eq('1');\n  });\n\n  it('reorder - fire Drag and Drop Event', async () => {\n    const data = populateData(5);\n    const { queryByTestId } = render(<GenericCardGrid data={data} isReorderEnabled={true} />);\n\n    let items = await getItems('gridcell');\n    const count = items.length;\n    const firstItemDragIcon = queryByTestId('drag-icon-0') as HTMLElement;\n    const thirdItemDragIcon = queryByTestId('drag-icon-2') as HTMLElement;\n    const firstItem = items[0];\n\n    // drag the first item and drop on the third item\n    fireDragAndDropEvent(firstItemDragIcon, thirdItemDragIcon);\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const updatedThirdItem = items[2];\n      expect(firstItem).equals(updatedThirdItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  it('reorder - reorder the first item to right using keyboard', async () => {\n    const data = populateData(5);\n    render(<GenericCardGrid data={data} isReorderEnabled={true} />);\n\n    const grid = await getRoot();\n    let items = await getItems('gridcell');\n    const count = items.length;\n    const firstItem = items[0];\n\n    // reorder the first item to left\n    mouseItemSelection(firstItem);\n    keyboardReorder(grid, 'ArrowLeft');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[0];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // reorder the first item to right\n    keyboardReorder(grid, 'ArrowRight');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[1];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // continuous reorder the first item to right\n    keyboardReorder(grid, 'ArrowRight');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[2];\n      expect(firstItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  it('reorder - reorder the last item to left using keyboard', async () => {\n    const data = populateData(5);\n    render(<GenericCardGrid data={data} isReorderEnabled={true} />);\n\n    const grid = await getRoot();\n    let items = await getItems('gridcell');\n    const count = items.length;\n    const lastItem = items[items.length - 1];\n\n    // reorder the last item to right\n    mouseItemSelection(lastItem);\n    keyboardReorder(grid, 'ArrowRight');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[items.length - 1];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // reorder the last item to left\n    keyboardReorder(grid, 'ArrowLeft');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[items.length - 2];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n\n    // continuous reorder the last item to left\n    keyboardReorder(grid, 'ArrowLeft');\n    await waitFor(async () => {\n      items = await getItems('gridcell');\n      const reorderedItem = items[items.length - 3];\n      expect(lastItem).equals(reorderedItem);\n      expect(items.length).equal(count);\n    });\n  });\n\n  if (typeof jest == typeof undefined) {\n    it('reorder - instruction text should exist when reorder is enabled', async () => {\n      // get instruction text\n      const { deviceType, platform } = getClientHints();\n      const keyPressed =\n        platform === 'windows' ? translations.accControlKey() : translations.accCommandKey();\n      const reorderInstructions =\n        deviceType === 'phone' || deviceType === 'tablet'\n          ? ''\n          : translations.accReorderInstructions({\n              keyPressed: keyPressed\n            });\n\n      // instruction text should exist when reorder is enabled\n      const data = populateData(3);\n      const { rerender } = render(<GenericCardGrid data={data} isReorderEnabled={true} />);\n      let instructionText = screen.queryByText(reorderInstructions);\n      expect(instructionText).not.to.be.null;\n\n      // instruction text should not exist when reorder is disabled\n      rerender(<GenericCardGrid data={data} />);\n      instructionText = screen.queryByText(reorderInstructions);\n      expect(instructionText).to.be.null;\n    });\n  }\n\n  // test in karma mocha only since it involves scrolling\n  if (typeof jest === typeof undefined) {\n    it('scroll into view - when cardview regains focus', async () => {\n      const data = populateData(10);\n      render(<GenericCardGrid data={data} initialCurrentKey={data[9].id} />);\n\n      // the initial current item is Employee 9, so the scrollTop is high\n      const grid = await getRoot();\n      await waitFor(() => {\n        expect(grid.scrollTop).to.greaterThanOrEqual(450);\n      });\n\n      // scroll cardview up until scrollTop is 0\n      grid.scrollTop = 0;\n      await waitFor(() => {\n        expect(grid.scrollTop).to.eq(0);\n      });\n\n      // tab into cardview, should scroll Employee 9 into view\n      grid.focus();\n      await waitFor(() => {\n        expect(grid.scrollTop).to.greaterThanOrEqual(450);\n      });\n    });\n  }\n\n  // test in karma mocha only since it involves rerender\n  if (typeof jest === typeof undefined) {\n    it('load more on scroll - should fetch data once during keyboard navigation', async () => {\n      const data = populateData(21);\n      render(<GenericCardGrid data={data} fetchSize={7} />);\n\n      let items = await getItems('gridcell');\n      const thirdItem = items[3];\n      await userEvent.click(thirdItem);\n\n      const grid = await getRoot();\n      expect(grid.matches(':focus')).to.be.true;\n      fireEvent.keyDown(grid, { key: 'ArrowDown' });\n\n      await waitFor(async () => {\n        items = await getItems('gridcell');\n        expect(items.length).to.eq(14);\n      });\n\n      // load more should only happen once\n      try {\n        await waitFor(async () => {\n          items = await getItems('gridcell');\n          expect(items.length).to.eq(21);\n        });\n      } catch (e) {\n        expect(e).not.null;\n      }\n    }, 6000);\n  }\n};\n","import { render, waitFor, fireEvent } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport {\n  getRoot,\n  populateData,\n  TestComponentsProps,\n  getContents,\n  mouseItemSelection\n} from './testHelpers';\n\nexport const testSelectionRender = ({\n  SelectionCardGrid\n}: TestComponentsProps<string | number>) => {\n  it('multiple selection - multiple selected items can be preserved', async () => {\n    const data = populateData(3);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n\n    mouseItemSelection(items[0]);\n    mouseItemSelection(items[1]);\n    await waitFor(() => {\n      expect(items[0].getAttribute('aria-selected')).eq('true');\n      expect(items[1].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('range selection - space and then shift+space', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // press space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ' });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow right to the 3rd item, then shift + space the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - click and then shift+space', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // click to select the 1st item\n    mouseItemSelection(items[0]);\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow right to the 3rd item, then shift + space the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - space and then shift+click', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // press space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ' });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 3rd item\n    mouseItemSelection(items[2], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - click and then shift+click', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n\n    // click to select the 1st item\n    mouseItemSelection(items[0]);\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 3rd item\n    mouseItemSelection(items[2], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - from current item to shift+click item', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 3rd item\n    fireEvent.click(items[2], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - from current item to shift+arrow items', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - from current item to shift+click and then shift+click', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - from current item to shift+click and then shift+arrow  ', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - from current item to shift+click and then shift+space', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - from current item to shift+arrow and then shift+click', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - from current item to shift+arrow and then shift+arrow', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow to the 3rd item, then shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyDown(grid, { key: 'ArrowRight' });\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - from current item to shift+arrow and then shift+space', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowRight', shiftKey: true });\n    await waitFor(() => {\n      expect(items[0].getAttribute('aria-selected')).eq('true');\n      expect(items[1].getAttribute('aria-selected')).eq('true');\n      expect(items[2].getAttribute('aria-selected')).eq('false');\n      expect(items[3].getAttribute('aria-selected')).eq('false');\n    });\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    await waitFor(() => {\n      expect(items[0].getAttribute('aria-selected')).eq('false');\n      expect(items[1].getAttribute('aria-selected')).eq('true');\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('range selection - from current item to shift+space and then shift+space', async () => {\n    const data = populateData(4);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow down to the 3rd item, then shift + space the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('range selection - shift+space and then shift+space', async () => {\n    const data = populateData(5);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n    mouseItemSelection(items[0]);\n\n    // shift + space to select the 2nd item\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection - deselect selected item by shift+space', async () => {\n    const data = populateData(3);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n    mouseItemSelection(items[0]);\n\n    // shift + space to select the 2nd item\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n\n    fireEvent.keyUp(items[1], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection backward - shift+space and then shift+space', async () => {\n    const data = populateData(5);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection backward - shift+click and then shift+space', async () => {\n    const data = populateData(5);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + click to select the 1st item\n    mouseItemSelection(items[0], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('range selection backward - shift+arrow and then shift+space', async () => {\n    const data = populateData(5);\n    render(<SelectionCardGrid data={data} selectionMode={'multiple'}></SelectionCardGrid>);\n\n    const grid = await getRoot();\n    const items = await getContents();\n    mouseItemSelection(items[2]);\n\n    // shift + arrow to select the 1st item\n    fireEvent.keyDown(grid, { key: 'ArrowLeft', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowLeft', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the last item\n    fireEvent.keyUp(items[4], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n  });\n};\n"],"names":["populateData","count","isNumberKey","Array","map","_","i","id","name","title","initials","getRoot","async","screen","findByRole","getItems","role","findAllByRole","getContents","mouseItemSelection","element","options","fireEvent","click","keyboardReorder","keyCode","keyDown","key","code","shiftKey","metaKey","context","showButton","isReorderEnabled","dragIcon","_jsx","jsx","RootEnvironmentProvider","environment","mode","children","Center","DragHandle","testId","metadata","buttons","View","paddingBlockStart","_jsxs","Flex","direction","wrap","gap","width","Button","variant","size","label","padding","jsxs","paddingBlockEnd","Avatar","data","Text","lineClamp","selector","GenericCardGrid","ActionCardGrid","SelectionCardGrid","ContentUpdatableCardGrid","it","render","items","expect","length","eq","undefined","dataset","grid","getAttribute","selectionMode","selectedKeys","Set","jest","userEvent","tab","waitFor","matches","to","be","true","queryByTestId","elem0","elem1","elem2","innerHTML","button","firstItemDragIcon","thirdItemDragIcon","firstItem","dragElement","dropElement","dragStart","dragEnter","drop","dragEnd","updatedThirdItem","equals","equal","reorderedItem","lastItem","deviceType","platform","getClientHints","keyPressed","translations","accControlKey","accCommandKey","reorderInstructions","accReorderInstructions","rerender","instructionText","queryByText","not","null","initialCurrentKey","scrollTop","greaterThanOrEqual","focus","fetchSize","thirdItem","e","keyUp"],"mappings":"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"}