{"version":3,"file":"FormContext-5130e198.js","sources":["../../src/hooks/UNSAFE_useFormContext/FormContext.ts"],"sourcesContent":["import { createContext } from 'preact';\nimport { Size } from '../../utils/UNSAFE_size';\n\n/**\n * Props of the FormContext\n */\n// TODO: investigate labelEdge, labelStartWidth, labelWrapping and see if they still need to be on the form components,\n// or if we can just use a FormContext to pass this to a single component when it isn't in a form layout. See JET-51152\ntype FormContextProps = {\n  /**\n   * Indicates whether the form layout is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Indicates whether the component is inside a form layout.\n   */\n  isFormLayout?: boolean;\n  /**\n   * Indicates whether the form layout is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies the label position.\n   */\n  labelEdge?: 'inside' | 'start' | 'top';\n  /**\n   * Specifies the width of the start aligned label, ignored for top & inside aligned.\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies if start or top label text should wrap or truncate.\n   * @deprecated Since 18.0.0. Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value.\n   */\n  labelWrapping?: 'truncate' | 'wrap';\n  /**\n   * Specifies the text alignment of the value.\n   */\n  textAlign?: 'start' | 'end' | 'right';\n  /**\n   * Specifies the density of the user assistance presentation.\n   */\n  userAssistanceDensity?: 'reflow' | 'efficient' | 'compact';\n};\n\nconst DefaultFormContext: FormContextProps = {\n  isDisabled: false,\n  isFormLayout: false,\n  isReadonly: false,\n  labelEdge: 'inside',\n  labelStartWidth: '33%',\n  labelWrapping: 'wrap',\n  textAlign: 'start',\n  userAssistanceDensity: 'reflow'\n};\n\n/**\n * Context which the parent component can use to provide various FormLayout related\n * information to descendant form controls.\n */\nconst FormContext = createContext<FormContextProps>(DefaultFormContext);\n\nexport { DefaultFormContext, FormContext };\nexport type { FormContextProps };\n"],"names":["DefaultFormContext","isDisabled","isFormLayout","isReadonly","labelEdge","labelStartWidth","labelWrapping","textAlign","userAssistanceDensity","FormContext","createContext"],"mappings":"wDA4CA,MAAMA,EAAuC,CAC3CC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,UAAW,SACXC,gBAAiB,MACjBC,cAAe,OACfC,UAAW,QACXC,sBAAuB,UAOnBC,EAAcC,EAAaA,cAAmBV"}