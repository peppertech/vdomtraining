{"version":3,"file":"TruncatingBadge-5b720ad3.js","sources":["../../src/UNSAFE_TruncatingBadge/TruncatingBadge.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { BadgeStyles, BadgeVariantOptions } from '../UNSAFE_Badge/themes/BadgeStyles.css';\nimport { BadgeRedwoodTheme } from '../UNSAFE_Badge/themes/redwood/BadgeTheme';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { useDetectTruncation } from '#hooks/PRIVATE_useDetectTruncation';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\n\nexport type Props = {\n  /**\n   * Sets the variant for the badge. Badge can be subtle or solid with different colors. The default value of this property is theme driven.\n   */\n  variant?:\n    | 'neutral'\n    | 'neutralSubtle'\n    | 'danger'\n    | 'dangerSubtle'\n    | 'success'\n    | 'successSubtle'\n    | 'warning'\n    | 'warningSubtle'\n    | 'info'\n    | 'infoSubtle';\n  /**\n   * Specifies the size of the badge. Consists of two options: Medium and small. The default value of this property is theme driven.\n   */\n  size?: 'sm' | 'md';\n  /**\n   * Specifies the edge of the badge. Badges can be attached to the end edge of another component. They lose their default corner rounding on right side for ltr direction or left side for rtl direction.\n   */\n  edge?: 'none' | 'end';\n  /**\n   * Specifies the string that will be rendered in the badge.\n   */\n  children: string;\n};\n\nexport function TruncatingBadge({ variant, size, edge, children }: Props) {\n  const { classes } = useComponentTheme<BadgeVariantOptions, BadgeStyles>(BadgeRedwoodTheme, {\n    variant,\n    size,\n    edge\n  });\n  const { isTabbable } = useTabbableMode();\n  const { detectTruncationProps, isTextTruncated } = useDetectTruncation();\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text: children,\n    isDisabled: !isTextTruncated\n  });\n\n  return (\n    <>\n      <span\n        {...detectTruncationProps}\n        {...tooltipProps}\n        tabIndex={isTextTruncated && isTabbable ? 0 : -1}\n        class={classes}>\n        {children}\n      </span>\n      {tooltipContent}\n    </>\n  );\n}\n"],"names":["variant","size","edge","children","classes","useComponentTheme","BadgeRedwoodTheme","isTabbable","useTabbableMode","detectTruncationProps","isTextTruncated","useDetectTruncation","tooltipContent","tooltipProps","useTooltip","text","isDisabled","_jsxs","_Fragment","_jsx","tabIndex","class"],"mappings":"yjBA2CM,UAA0BA,QAAEA,EAAOC,KAAEA,EAAIC,KAAEA,EAAIC,SAAEA,IACrD,MAAMC,QAAEA,GAAYC,EAAiBA,kBAAmCC,oBAAmB,CACzFN,UACAC,OACAC,UAEIK,WAAEA,GAAeC,EAAAA,mBACjBC,sBAAEA,EAAqBC,gBAAEA,GAAoBC,EAAmBA,uBAChEC,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMZ,EACNa,YAAaN,IAGf,OACEO,OAAAC,EAAAA,SAAA,CAAAf,SAAA,CACEgB,EAAAA,IACM,OAAA,IAAAV,KACAI,EACJO,SAAUV,GAAmBH,EAAa,GAAK,EAC/Cc,MAAOjB,EACND,SAAAA,IAEFS,IAGP"}