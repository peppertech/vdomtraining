{"version":3,"file":"UNSAFE_useTableViewColumnResizing.js","sources":["../../../src/hooks/UNSAFE_useTableViewColumnResizing/useTableViewColumnResizing.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef, useState } from 'preact/hooks';\nimport { ColumnResizeDetail, ColumnWidths } from '../../UNSAFE_TableView';\n\nconst _defaultMinWidth = 33;\n\nexport type TableViewColumnResizingProps<C extends string> = {\n  columnOrder: C[];\n  applyWidths?: 'onResizing' | 'onResize';\n  columnWidths?: ColumnWidths<C>;\n  onColumnWidthsChange?: (columnWidths: ColumnWidths<C>) => void;\n  minColumnWidth?: number;\n  resizeBehavior?: 'redistribute' | 'add';\n};\n\n/**\n * Utility hook for controlling a TableView's sizing.\n */\nfunction useTableViewColumnResizing<C extends string>({\n  columnOrder,\n  columnWidths,\n  onColumnWidthsChange,\n  applyWidths = 'onResizing',\n  minColumnWidth = 33,\n  resizeBehavior = 'redistribute'\n}: TableViewColumnResizingProps<C>) {\n  const minWidth = minColumnWidth != null ? minColumnWidth : _defaultMinWidth;\n\n  const columnWidthsRef = useRef<ColumnWidths<C> | undefined>(columnWidths);\n  columnWidthsRef.current = columnWidths;\n\n  const [columnResizingIndicator, setColumnResizingIndicator] = useState<\n    { key: C; delta: number } | undefined\n  >();\n  const columnResizingStartingColumnWidthsRef = useRef<ColumnWidths<C>>();\n\n  const _cloneColumnWidths = useCallback(\n    (columnWidths: ColumnWidths<C>) => {\n      const newColumnWidths = {} as ColumnWidths<C>;\n      for (const key of columnOrder) {\n        newColumnWidths[key] = columnWidths[key];\n      }\n      return newColumnWidths;\n    },\n    [columnOrder]\n  );\n\n  /**\n   * Helper method to update the Table's column widths while a column resize operation is ongoing.\n   */\n  const onColumnResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      // save the initial state when column resize begins\n      if (columnResizingStartingColumnWidthsRef.current == null) {\n        columnResizingStartingColumnWidthsRef.current = detail.allColumnWidths;\n      }\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnWidthsRef.current != null ? columnWidthsRef.current : ({} as ColumnWidths<C>)\n      );\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = columnResizingStartingColumnWidthsRef.current[startKey];\n      const initialEndWidth = columnResizingStartingColumnWidthsRef.current[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      newStaticColumnWidths[startKey] = newStartWidth;\n      const newEndWidth = initialEndWidth + initialStartWidth - newStartWidth;\n      newStaticColumnWidths[endKey] = newEndWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      setColumnResizingIndicator({ key: startKey, delta: 0 });\n    },\n    [onColumnWidthsChange, minWidth, columnOrder, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column resize indicator line only.\n   */\n  const onColumnIndicatorResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = detail.allColumnWidths[startKey];\n      const initialEndWidth = detail.allColumnWidths[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      setColumnResizingIndicator({ key: startKey, delta: newStartWidth - initialStartWidth });\n    },\n    [columnOrder, minWidth]\n  );\n\n  /**\n   * Helper method to update the Table's column widths at the end of column resize operation. This is\n   * the same as during an ongoing resize operation, but additionally pushes back the resized column widths\n   * to the consumer if a 'setInitialColumnWidths' callback is provided, and removes the indicator line.\n   */\n  const onColumnResize = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const initialWidths =\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths;\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnWidthsRef.current != null ? columnWidthsRef.current : ({} as ColumnWidths<C>)\n      );\n      const startKey = detail.key;\n      const endKey = columnOrder[columnOrder.indexOf(startKey) + 1];\n      const initialStartWidth = initialWidths[startKey];\n      const initialEndWidth = initialWidths[endKey];\n      const newStartWidth = Math.min(\n        Math.max(initialStartWidth + detail.delta, minWidth),\n        initialStartWidth + initialEndWidth - minWidth\n      );\n      newStaticColumnWidths[startKey] = newStartWidth;\n      const newEndWidth = initialEndWidth + initialStartWidth - newStartWidth;\n      newStaticColumnWidths[endKey] = newEndWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      columnResizingStartingColumnWidthsRef.current = undefined;\n      setColumnResizingIndicator(undefined);\n    },\n    [onColumnWidthsChange, minWidth, columnOrder, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column widths while a column resize operation is ongoing.\n   */\n  const onAddBehaviorResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      // save the initial state when column resize begins\n      if (columnResizingStartingColumnWidthsRef.current == null) {\n        columnResizingStartingColumnWidthsRef.current = detail.allColumnWidths;\n      }\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths\n      );\n\n      const startKey = detail.key;\n      const initialStartWidth = columnResizingStartingColumnWidthsRef.current[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      newStaticColumnWidths[startKey] = newStartWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      setColumnResizingIndicator({ key: startKey, delta: 0 });\n    },\n    [onColumnWidthsChange, minWidth, _cloneColumnWidths]\n  );\n\n  /**\n   * Helper method to update the Table's column resize indicator line only.\n   */\n  const onAddBehaviorIndicatorResizing = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const startKey = detail.key;\n      const initialStartWidth = detail.allColumnWidths[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      setColumnResizingIndicator({ key: startKey, delta: newStartWidth - initialStartWidth });\n    },\n    [minWidth]\n  );\n\n  /**\n   * Helper method to update the Table's column widths at the end of column resize operation. This is\n   * the same as during an ongoing resize operation, but additionally pushes back the resized column widths\n   * to the consumer if a 'setInitialColumnWidths' callback is provided, and removes the indicator line.\n   */\n  const onAddBehaviorResize = useCallback(\n    (detail: ColumnResizeDetail<C>) => {\n      const initialWidths =\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths;\n      const newStaticColumnWidths = _cloneColumnWidths(\n        columnResizingStartingColumnWidthsRef.current != null\n          ? columnResizingStartingColumnWidthsRef.current\n          : detail.allColumnWidths\n      );\n      const startKey = detail.key;\n      const initialStartWidth = initialWidths[startKey];\n      const newStartWidth = Math.max(initialStartWidth + detail.delta, minWidth);\n      newStaticColumnWidths[startKey] = newStartWidth;\n\n      if (onColumnWidthsChange != null) {\n        onColumnWidthsChange(newStaticColumnWidths);\n        columnWidthsRef.current = newStaticColumnWidths;\n      }\n      columnResizingStartingColumnWidthsRef.current = undefined;\n      setColumnResizingIndicator(undefined);\n    },\n    [onColumnWidthsChange, minWidth, _cloneColumnWidths]\n  );\n\n  const onColumnResizingHandler =\n    applyWidths === 'onResize'\n      ? resizeBehavior === 'add'\n        ? onAddBehaviorIndicatorResizing\n        : onColumnIndicatorResizing\n      : resizeBehavior === 'add'\n      ? onAddBehaviorResizing\n      : onColumnResizing;\n\n  const onColumnResizeHandler = resizeBehavior === 'add' ? onAddBehaviorResize : onColumnResize;\n\n  return {\n    columnResizingProps: {\n      onColumnResizing: onColumnResizingHandler,\n      onColumnResize: onColumnResizeHandler,\n      columnResizingIndicator: columnResizingIndicator\n    }\n  };\n}\n\nexport { useTableViewColumnResizing };\n"],"names":["columnOrder","columnWidths","onColumnWidthsChange","applyWidths","minColumnWidth","resizeBehavior","minWidth","columnWidthsRef","useRef","current","columnResizingIndicator","setColumnResizingIndicator","useState","columnResizingStartingColumnWidthsRef","_cloneColumnWidths","useCallback","newColumnWidths","key","onColumnResizing","detail","allColumnWidths","newStaticColumnWidths","startKey","endKey","indexOf","initialStartWidth","initialEndWidth","newStartWidth","Math","min","max","delta","newEndWidth","onColumnIndicatorResizing","onColumnResize","initialWidths","undefined","onAddBehaviorResizing","onAddBehaviorIndicatorResizing","onAddBehaviorResize","columnResizingProps"],"mappings":"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"}