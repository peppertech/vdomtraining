{"version":3,"file":"useResizeObserver-275c3e83.js","sources":["../../src/hooks/UNSAFE_useResizeObserver/useResizeObserver.tsx"],"sourcesContent":["import { useVisAddBusyState } from '#hooks/PRIVATE_useVisAddBusyState';\nimport type { RefObject } from 'preact';\nimport { useLayoutEffect } from 'preact/hooks';\n\ntype Options = {\n  /**\n   * When set to true, the callback will not be invoked even if the target element's size changes.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Sets which box model the observer will observe changes to.\n   */\n  box?: ResizeObserverBoxOptions;\n};\n\n/**\n * A hook for observing and responding to changes to the size of a DOM element.\n * It utilizes a ResizeObserver to observe changes to the size of the specified element\n * and accepts a callback function to respond to these changes.\n *\n * @param ref The ref to the target DOM element to observe.\n * @param callback A callback function to be called when the size of the observed element changes.\n *     If the provided callback triggers the consuming component to re-render, then\n *     it's important to pass the same instance of the callback function during each render\n *     to prevent infinite re-render loops. One way to achieve this is by using useCallback.\n * @param options Configuration options.\n */\nconst useResizeObserver = (\n  ref: RefObject<Element>,\n  callback: (entry: ResizeObserverEntry) => void,\n  options?: Options\n) => {\n  const { box, isDisabled = false } = options || {};\n  const { onBusyStart, onBusyEnd } = useVisAddBusyState('useResizeObserver: resizing');\n\n  useLayoutEffect(() => {\n    // Note ref may be undefined in the hooks storybook demo\n    if (!ref?.current || isDisabled) return;\n\n    onBusyStart();\n    const target = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        callback(entry);\n      }\n      onBusyEnd();\n    });\n    resizeObserver.observe(target, { box });\n\n    return () => {\n      resizeObserver.disconnect();\n      onBusyEnd();\n    };\n  }, [ref, callback, box, isDisabled, onBusyStart, onBusyEnd]);\n};\n\nexport { useResizeObserver };\n"],"names":["ref","callback","options","box","isDisabled","onBusyStart","onBusyEnd","useVisAddBusyState","useLayoutEffect","current","target","resizeObserver","ResizeObserver","entries","entry","observe","disconnect"],"mappings":"oHA4B0B,CACxBA,EACAC,EACAC,KAEA,MAAMC,IAAEA,EAAGC,WAAEA,GAAa,GAAUF,GAAW,CAAA,GACzCG,YAAEA,EAAWC,UAAEA,GAAcC,EAAkBA,mBAAC,+BAEtDC,EAAAA,iBAAgB,KAEd,IAAKR,GAAKS,SAAWL,EAAY,OAEjCC,IACA,MAAMK,EAASV,EAAIS,QACbE,EAAiB,IAAIC,gBAAgBC,IACzC,IAAK,MAAMC,KAASD,EAClBZ,EAASa,GAEXR,GAAW,IAIb,OAFAK,EAAeI,QAAQL,EAAQ,CAAEP,QAE1B,KACLQ,EAAeK,aACfV,GAAW,CACZ,GACA,CAACN,EAAKC,EAAUE,EAAKC,EAAYC,EAAaC,GAAW"}