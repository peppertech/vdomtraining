{"version":3,"file":"Icon-2d805acb.js","sources":["../../src/UNSAFE_Icon/Icon.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX, Fragment } from 'preact';\nimport { Size, sizeToCSS } from '../utils/UNSAFE_size';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { styles } from './themes/IconStyle.css';\nimport { ExcludeSignalLike } from '#utils/UNSAFE_attributeUtils';\n\ntype IntrinsicProps = ExcludeSignalLike<JSX.SVGAttributes<SVGSVGElement>>;\n\ntype Props = {\n  /**\n   * The size of the component. Defaults to '1em', which means the font size of the parent is used.\n   */\n  size?: Size;\n  /**\n   * The color of the component. Defaults to 'currentColor', which behaves like the CSS 'currentColor' value.\n   */\n  color?: keyof typeof styles;\n  /**\n   * A label to be used for accessibility purposes.\n   */\n  accessibleLabel?: string;\n  /**\n   * The viewBox attribute value of the `<svg />` root. This defines the position and dimension, in user space, of the SVG viewport for the children content.\n   */\n  viewBox?: Pick<IntrinsicProps, 'viewBox'>['viewBox'];\n  /**\n   * The content of the icon. This can be any SVG children content.\n   */\n  children?: Pick<IntrinsicProps, 'children'>['children'];\n};\n\n/**\n * The Icon component enables you to define your own custom icon components. It renders as an <svg /> element and accepts SVG children content.\n */\nexport const Icon = ({\n  size = '1em',\n  color = 'currentColor',\n  accessibleLabel = '',\n  viewBox = 'none',\n  children\n}: Props) => (\n  <Svg\n    height=\"1em\"\n    width=\"1em\"\n    viewBox={viewBox}\n    accessibleLabel={accessibleLabel}\n    class={styles[color]}\n    style={{ fontSize: size === '1em' ? size : `${sizeToCSS(size)}` }}>\n    {children}\n  </Svg>\n);\n\ntype BaseSvgProps = Pick<\n  IntrinsicProps,\n  'height' | 'width' | 'viewBox' | 'class' | 'children' | 'style'\n>;\ntype SvgProps = BaseSvgProps & {\n  accessibleLabel: string;\n};\n\nconst Svg = ({ accessibleLabel, ...otherProps }: SvgProps) =>\n  accessibleLabel ? (\n    <SemanticSvg accessibleLabel={accessibleLabel} {...otherProps} />\n  ) : (\n    <DecorativeSvg {...otherProps} />\n  );\n\nconst DecorativeSvg = (props: BaseSvgProps) => <svg {...props} />;\n\nconst SemanticSvg = ({ accessibleLabel, children, ...props }: SvgProps) => {\n  // See JET-56791.\n  // We want the same effect as specifying a SVG <title> element for showing a tooltip.\n  // When <title> is used, the SVG is not keyboard focusable by default, and the tooltip only shows up\n  // on mouse hover. Typically any accessibility requirements beyond this should be handled by making the parent\n  // element accessible. This was the approved behavior by APO, and is consistent with the behavior of icons\n  // from other libraries.\n  //\n  // We need to use useTooltip for displaying the tooltip, but it appears spreading the onFocus and onBlur event\n  // handlers generated by the useTooltip hook onto the <svg> causes it to become keyboard focusable*.\n  // To fix this we need to omit spreading the onFocus and onBlur event handlers from the tooltipProps.\n  //\n  // *Most browsers implement the SVG 1.1 spec. There's also a SVG 1.2 Tiny spec that's not\n  // fully implemented in most browsers.\n  // The non-draft version of SVG 1.1 doesn't document the focus conditions and behavior AFAICT.\n  // However it appears browsers implemented the same behavior as the focusable=\"auto\" behavior as described\n  // in SVG 1.2 Tiny: https://www.w3.org/TR/SVGTiny12/interact.html#focus\n  // In particular, it states that if the SVG element has focus related event listeners registered on it, then it becomes focusable.\n  // The spec mentions focusin and focusout event handlers, but not focus event handlers. The reality is\n  // that having a focus event handler registered also causes the <svg> to become focusable (tested on Chrome), and that's\n  // probably because a focus event always precedes a focusin event.\n  // Note also setting focusable=\"false\", or setting tabindex=\"-1\" on the <svg> to prevent it from becoming focusable\n  // doesn't work based on my testing, and that's most probably because the focusable and tabindex attributes are not part\n  // of the SVG 1.1 spec.\n  const {\n    tooltipContent,\n    tooltipProps: { onFocus, onBlur, ...restTooltipProps }\n  } = useTooltip({\n    text: accessibleLabel,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    }\n  });\n\n  return (\n    <Fragment>\n      <svg role=\"img\" {...props} {...restTooltipProps} aria-label={accessibleLabel}>\n        {children}\n      </svg>\n      {tooltipContent}\n    </Fragment>\n  );\n};\n"],"names":["Svg","accessibleLabel","otherProps","_jsx","SemanticSvg","jsx","DecorativeSvg","props","children","tooltipContent","tooltipProps","onFocus","onBlur","restTooltipProps","useTooltip","text","anchor","x","y","_jsxs","Fragment","role","size","color","viewBox","height","width","class","styles","style","fontSize","sizeToCSS"],"mappings":"gdAyCa,MA0BPA,EAAM,EAAGC,qBAAoBC,KACjCD,EACEE,EAAAA,IAACC,EAAW,CAACH,gBAAiBA,KAAqBC,IAEnDC,EAACE,IAAAC,MAAkBJ,IAGjBI,EAAiBC,GAAwBJ,EAAAE,IAAA,MAAA,IAASE,IAElDH,EAAc,EAAGH,kBAAiBO,cAAaD,MAwBnD,MAAME,eACJA,EACAC,cAAcC,QAAEA,EAAOC,OAAEA,KAAWC,IAClCC,aAAW,CACbC,KAAMd,EACNe,OAAQ,CACNC,EAAG,UACHC,EAAG,aAIP,OACEC,OAACC,EAAQA,SAAA,CAAAZ,SAAA,CACPL,EAAAA,WAAKkB,KAAK,SAAUd,KAAWM,EAAgB,aAAcZ,EAC1DO,SAAAA,IAEFC,IAEH,SA7EgB,EAClBa,KAAAA,EAAO,MACPC,QAAQ,eACRtB,kBAAkB,GAClBuB,UAAU,OACVhB,cAEAL,EAAAE,IAACL,EAAG,CACFyB,OAAO,MACPC,MAAM,MACNF,QAASA,EACTvB,gBAAiBA,EACjB0B,MAAOC,EAAMA,OAACL,GACdM,MAAO,CAAEC,SAAmB,QAATR,EAAiBA,EAAO,GAAGS,EAAAA,UAAUT,eACvDd"}