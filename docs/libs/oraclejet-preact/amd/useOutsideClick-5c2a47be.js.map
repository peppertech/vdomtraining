{"version":3,"file":"useOutsideClick-5c2a47be.js","sources":["../../src/hooks/UNSAFE_useOutsideClick/useOutsideClick.ts"],"sourcesContent":["/**\n * `useClickOutside` hook for capturing clicking outside of an element\n */\nimport { RefObject } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { coerceArray } from '../../utils/UNSAFE_arrayUtils';\nimport { LOGICAL_PARENT } from '../../UNSAFE_Layer/Layer';\n\ntype Props = {\n  /**\n   * If true outside click is disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Reference to element or array of elements relative to which outside click is performed\n   */\n  ref: RefObject<HTMLElement> | RefObject<HTMLElement>[];\n  /**\n   * Outside click callback\n   */\n  handler?: (event: MouseEvent) => void;\n};\n\n/**\n * Checks if the mouse event target is inside of any of the specified containers, or if it\n * occurs in a layer whose 'logicalParent' belongs to one of the containers.\n *\n * @param event a mouse event associated with the potential \"outside click\" action\n * @param ref an array of references to elements that are considered \"inside\"\n * @returns 'true' if the event occurs \"outside\" of the specified list of containers\n */\nconst isPointOutside = (event: Event, ref: RefObject<HTMLElement>[]) => {\n  const target = event.target as HTMLElement;\n\n  // if the event has no target, consider it \"inside\"\n  if (!target) {\n    return false;\n  }\n\n  const doc = getDocument(target);\n  if (!doc.contains(target)) {\n    return false;\n  }\n\n  // if the target is contained in any of the target containers, it is not \"outside\"\n  if (ref.some((elRef: RefObject<HTMLElement>) => elRef.current?.contains(target))) {\n    return false;\n  }\n\n  // the event target can also occur in a popup layer that belongs to an \"inside\" container\n\n  const findLogicalParent = (elem: Element): Element | null => {\n    let elemParent = elem.parentElement as any;\n    while (elemParent) {\n      if (elemParent[LOGICAL_PARENT]) {\n        return elemParent[LOGICAL_PARENT];\n      }\n      elemParent = elemParent.parentElement;\n    }\n    return null;\n  };\n\n  const logicalParent = findLogicalParent(target);\n  // TODO: logical parents could also be nested, search for potential higher-level logical parents too\n  if (logicalParent) {\n    if (ref.some((elRef: RefObject<HTMLElement>) => elRef.current?.contains(logicalParent))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst getDocument = (node?: Node): Document => node?.ownerDocument ?? document;\n\nexport const useOutsideClick = ({ isDisabled: disabled = false, ref, handler }: Props) => {\n  // use ref to store mutable data and not cause a re-render\n  const stateRef = useRef({\n    isMouseDown: false\n  });\n\n  const state = stateRef.current;\n\n  useEffect(() => {\n    const refs = coerceArray(ref);\n    if (\n      !handler ||\n      disabled ||\n      (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1)\n    )\n      return;\n    const onMouseDown = () => {\n      state.isMouseDown = true;\n    };\n\n    const onMouseUp = (event: MouseEvent) => {\n      if (state.isMouseDown && isPointOutside(event, refs)) {\n        state.isMouseDown = false;\n        handler?.(event);\n      }\n    };\n    const firstElRef = refs[0];\n    const doc = getDocument(firstElRef.current!);\n    if (doc) {\n      doc.addEventListener('mousedown', onMouseDown, true);\n      doc.addEventListener('mouseup', onMouseUp, true);\n\n      return () => {\n        doc.removeEventListener('mousedown', onMouseDown, true);\n        doc.removeEventListener('mouseup', onMouseUp, true);\n      };\n    }\n    return undefined;\n  }, [disabled, handler, ref, state]);\n};\n"],"names":["getDocument","node","ownerDocument","document","isDisabled","disabled","ref","handler","state","useRef","isMouseDown","current","useEffect","refs","coerceArray","length","findIndex","elRef","onMouseDown","onMouseUp","event","target","contains","some","logicalParent","elem","elemParent","parentElement","LOGICAL_PARENT","findLogicalParent","isPointOutside","firstElRef","doc","addEventListener","removeEventListener"],"mappings":"6GA+BA,MA0CMA,EAAeC,GAA0BA,GAAMC,eAAiBC,2BAEvC,EAAGC,WAAYC,GAAW,EAAOC,MAAKC,cAEnE,MAIMC,EAJWC,EAAAA,OAAO,CACtBC,aAAa,IAGQC,QAEvBC,EAAAA,WAAU,KACR,MAAMC,EAAOC,cAAYR,GACzB,IACGC,GACDF,GACCQ,EAAKE,OAAS,GAAKF,EAAKG,WAAWC,GAA4B,OAAlBA,EAAMN,WAAqB,EAEzE,OACF,MAAMO,EAAc,KAClBV,EAAME,aAAc,CAAI,EAGpBS,EAAaC,IACbZ,EAAME,aAjEO,EAACU,EAAcd,KACpC,MAAMe,EAASD,EAAMC,OAGrB,IAAKA,EACH,OAAO,EAIT,IADYrB,EAAYqB,GACfC,SAASD,GAChB,OAAO,EAIT,GAAIf,EAAIiB,MAAMN,GAAkCA,EAAMN,SAASW,SAASD,KACtE,OAAO,EAKT,MAWMG,EAXoB,CAACC,IACzB,IAAIC,EAAaD,EAAKE,cACtB,KAAOD,GAAY,CACjB,GAAIA,EAAWE,EAAAA,gBACb,OAAOF,EAAWE,EAAAA,gBAEpBF,EAAaA,EAAWC,aACzB,CACD,OAAO,IAAI,EAGSE,CAAkBR,GAExC,OAAIG,IACElB,EAAIiB,MAAMN,GAAkCA,EAAMN,SAASW,SAASE,IAK/D,EA0BkBM,CAAeV,EAAOP,KAC7CL,EAAME,aAAc,EACpBH,IAAUa,GACX,EAEGW,EAAalB,EAAK,GAClBmB,EAAMhC,EAAY+B,EAAWpB,SACnC,OAAIqB,GACFA,EAAIC,iBAAiB,YAAaf,GAAa,GAC/Cc,EAAIC,iBAAiB,UAAWd,GAAW,GAEpC,KACLa,EAAIE,oBAAoB,YAAahB,GAAa,GAClDc,EAAIE,oBAAoB,UAAWf,GAAW,EAAK,QANvD,CASgB,GACf,CAACd,EAAUE,EAASD,EAAKE,GAAO"}