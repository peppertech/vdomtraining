{"version":3,"file":"usePress-a9ed1488.js","sources":["../../src/hooks/UNSAFE_usePress/usePress.ts"],"sourcesContent":["import { useMemo, useCallback, useState, useRef } from 'preact/hooks';\n\nexport type PressOptions = {\n  isDisabled?: boolean;\n  isRepeat?: boolean;\n  repeatDelay?: number;\n  repeatInterval?: number;\n};\n\nconst DefaultSettings = {\n  isDisabled: false,\n  isRepeat: false,\n  repeatDelay: 500,\n  repeatInterval: 40\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n *\n * @param onPressHandler function\n * @param isRepeat boolean\n * @param repeatInterval number number of ms between events for mouse and touch\n * @param repeatDelay number number of ms before repeat events initiates\n * @param isDisabled boolean\n * @returns\n */\n\nexport function usePress(\n  onPressHandler: (event: Event) => void,\n  settings: PressOptions = DefaultSettings\n): { pressProps: Record<string, any> } {\n  const [isClickable, setIsClickable] = useState<boolean>(true);\n  const [isPressed, setIsPressed] = useState<boolean>(false);\n  const intervalID = useRef<ReturnType<typeof setInterval>>();\n  const isRepeating = useRef<boolean>(false);\n  const mergedSettings = useMemo(() => {\n    return { ...DefaultSettings, ...settings };\n  }, [settings]);\n  const repeatHandler = useCallback(\n    (event: Event) => {\n      if (isRepeating.current) {\n        onPressHandler(event);\n      }\n      intervalID.current = setInterval(onPressHandler, mergedSettings.repeatInterval, event); // @HTMLUpdateOK\n    },\n    [mergedSettings.repeatInterval, onPressHandler]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        (event.code === 'Space' || event.code === 'Enter') &&\n        (mergedSettings.isRepeat || !event.repeat)\n      ) {\n        event.preventDefault();\n        setIsPressed(true);\n        if (mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.code === 'Space' || event.code === 'Enter') {\n        setIsPressed(false);\n        event.preventDefault();\n        if (!mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onBlur = useCallback(() => {\n    setIsPressed(false);\n  }, [setIsPressed]);\n\n  const onPointerDown = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(false);\n      if (mergedSettings.isRepeat) {\n        isRepeating.current = true;\n        event.preventDefault();\n        onPressHandler(event);\n        intervalID.current = setTimeout(repeatHandler, mergedSettings.repeatDelay, event);\n      }\n    },\n    [mergedSettings, onPressHandler, intervalID, setIsClickable, repeatHandler]\n  );\n\n  const onPointerUp = useCallback(\n    (event: PointerEvent) => {\n      if (mergedSettings.isRepeat && intervalID.current) {\n        isRepeating.current = false;\n        clearInterval(intervalID.current);\n        intervalID.current = undefined;\n      } else {\n        onPressHandler(event);\n      }\n    },\n    [mergedSettings.isRepeat, intervalID, onPressHandler]\n  );\n\n  // Keep this to permit automated invocation of target via click event\n  // Need to ignore this for manual invocation whereby browser generates click\n  // pointerdown/pointerup/click -> ignore click\n  // keydown/keyup/click -> ignore click\n  // click without pointerup or keyup -> invoke\n  const onClick = useCallback(\n    (event: Event) => {\n      // There are use cases where pressable/clickable components (eg. Buttons) are nested inside of other\n      // components that also process bubbling click events (eg. Collapsible). In order to avoid conflicting\n      // processing of clicks (eg. in order to avoid the click both activating a Button as well as toggling the\n      // ancestor Collapsible), we stop propagation here. That way, only the child component handles the\n      // click and the ancestor component is oblivious to the fact that the click even occurred.\n      event.stopPropagation();\n      if (isClickable && !isPressed && intervalID.current) {\n        onPressHandler(event);\n      }\n      setIsClickable(true);\n    },\n    [setIsClickable, onPressHandler, isClickable, intervalID, isPressed]\n  );\n\n  const onClickSingle = useCallback(\n    (event: Event) => {\n      // See note above about why propagation is stopped: to prevent nested component bubbling clicks issue\n      event.stopPropagation();\n      if (!isPressed) {\n        onPressHandler(event);\n      }\n    },\n    [onPressHandler, isPressed]\n  );\n\n  const onPointerOut = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, intervalID, setIsClickable]);\n\n  const onPointerCancel = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, intervalID, setIsClickable]);\n\n  const onContextMenu = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(true);\n      if (mergedSettings.isRepeat) {\n        event.preventDefault();\n      }\n    },\n    [mergedSettings.isRepeat, setIsClickable]\n  );\n\n  const pressProps = mergedSettings.isDisabled\n    ? {}\n    : mergedSettings.isRepeat\n    ? {\n        onPointerUp,\n        onPointerDown,\n        onPointerOut,\n        onPointerCancel,\n        onKeyDown,\n        onKeyUp,\n        onContextMenu,\n        onClick,\n        onBlur\n      }\n    : {\n        onKeyDown,\n        onKeyUp,\n        onBlur,\n        onClick: onClickSingle\n      };\n\n  return {\n    pressProps\n  };\n}\n"],"names":["DefaultSettings","isDisabled","isRepeat","repeatDelay","repeatInterval","onPressHandler","settings","isClickable","setIsClickable","useState","isPressed","setIsPressed","intervalID","useRef","isRepeating","mergedSettings","useMemo","repeatHandler","useCallback","event","current","setInterval","onKeyDown","code","repeat","preventDefault","onKeyUp","onBlur","onPointerDown","setTimeout","onPointerUp","clearInterval","undefined","onClick","stopPropagation","onClickSingle","onPointerOut","onPointerCancel","onContextMenu","pressProps"],"mappings":"8DASA,MAAMA,EAAkB,CACtBC,YAAY,EACZC,UAAU,EACVC,YAAa,IACbC,eAAgB,wBAehBC,EACAC,EAAyBN,GAEzB,MAAOO,EAAaC,GAAkBC,EAAQA,UAAU,IACjDC,EAAWC,GAAgBF,EAAQA,UAAU,GAC9CG,EAAaC,EAAAA,SACbC,EAAcD,UAAgB,GAC9BE,EAAiBC,EAAAA,SAAQ,KACtB,IAAKhB,KAAoBM,KAC/B,CAACA,IACEW,EAAgBC,eACnBC,IACKL,EAAYM,SACdf,EAAec,GAEjBP,EAAWQ,QAAUC,YAAYhB,EAAgBU,EAAeX,eAAgBe,EAAM,GAExF,CAACJ,EAAeX,eAAgBC,IAG5BiB,EAAYJ,eACfC,IAEmB,UAAfA,EAAMI,MAAmC,UAAfJ,EAAMI,OAChCR,EAAeb,UAAaiB,EAAMK,SAEnCL,EAAMM,iBACNd,GAAa,GACTI,EAAeb,UACjBG,EAAec,GAElB,GAEH,CAACJ,EAAeb,SAAUG,EAAgBM,IAGtCe,EAAUR,eACbC,IACoB,UAAfA,EAAMI,MAAmC,UAAfJ,EAAMI,OAClCZ,GAAa,GACbQ,EAAMM,iBACDV,EAAeb,UAClBG,EAAec,GAElB,GAEH,CAACJ,EAAeb,SAAUG,EAAgBM,IAGtCgB,EAAST,EAAAA,aAAY,KACzBP,GAAa,EAAM,GAClB,CAACA,IAEEiB,EAAgBV,eACnBC,IACCX,GAAe,GACXO,EAAeb,WACjBY,EAAYM,SAAU,EACtBD,EAAMM,iBACNpB,EAAec,GACfP,EAAWQ,QAAUS,WAAWZ,EAAeF,EAAeZ,YAAagB,GAC5E,GAEH,CAACJ,EAAgBV,EAAgBO,EAAYJ,EAAgBS,IAGzDa,EAAcZ,eACjBC,IACKJ,EAAeb,UAAYU,EAAWQ,SACxCN,EAAYM,SAAU,EACtBW,cAAcnB,EAAWQ,SACzBR,EAAWQ,aAAUY,GAErB3B,EAAec,EAChB,GAEH,CAACJ,EAAeb,SAAUU,EAAYP,IAQlC4B,EAAUf,eACbC,IAMCA,EAAMe,kBACF3B,IAAgBG,GAAaE,EAAWQ,SAC1Cf,EAAec,GAEjBX,GAAe,EAAK,GAEtB,CAACA,EAAgBH,EAAgBE,EAAaK,EAAYF,IAGtDyB,EAAgBjB,eACnBC,IAECA,EAAMe,kBACDxB,GACHL,EAAec,EAChB,GAEH,CAACd,EAAgBK,IAGb0B,EAAelB,EAAAA,aAAY,KAC/BV,GAAe,GACXO,EAAeb,UAAYU,EAAWQ,SACxCW,cAAcnB,EAAWQ,QAC1B,GACA,CAACL,EAAeb,SAAUU,EAAYJ,IAEnC6B,EAAkBnB,EAAAA,aAAY,KAClCV,GAAe,GACXO,EAAeb,UAAYU,EAAWQ,SACxCW,cAAcnB,EAAWQ,QAC1B,GACA,CAACL,EAAeb,SAAUU,EAAYJ,IAEnC8B,EAAgBpB,eACnBC,IACCX,GAAe,GACXO,EAAeb,UACjBiB,EAAMM,gBACP,GAEH,CAACV,EAAeb,SAAUM,IAwB5B,MAAO,CACL+B,WAtBiBxB,EAAed,WAC9B,CAAE,EACFc,EAAeb,SACf,CACE4B,cACAF,gBACAQ,eACAC,kBACAf,YACAI,UACAY,gBACAL,UACAN,UAEF,CACEL,YACAI,UACAC,SACAM,QAASE,GAMjB"}