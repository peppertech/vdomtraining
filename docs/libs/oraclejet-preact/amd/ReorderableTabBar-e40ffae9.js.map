{"version":3,"file":"ReorderableTabBar-e40ffae9.js","sources":["../../src/UNSAFE_ReorderableTabBar/ReorderableTabBarItem.tsx","../../src/UNSAFE_ReorderableTabBar/ReorderableTabBar.tsx"],"sourcesContent":["import { useRef, useCallback } from 'preact/hooks';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { getKey } from '../utils/PRIVATE_collectionUtils';\nimport { useReorderableItem } from '../hooks/PRIVATE_useReorderable';\nimport { ReorderableItemProps } from '../UNSAFE_Collection/Reorderable.types';\nimport { useTabBarContext } from '../UNSAFE_TabBar';\nimport { styles } from './themes/ReorderableTabBarItemStyles.css';\n\nexport const ITEM_SELECTOR = '[role=\"tab\"]';\n\ntype ReorderableTabBarItem<K extends string | number> = ReorderableItemProps<K> & {\n  layout: 'stretch' | 'condense' | undefined;\n};\n\n/**\n * A private item that will be used by ReorderableTabBar, location TBD (could be moved to PRIVATE_TabBar)\n */\nexport function ReorderableTabBarItem<K extends string | number>({\n  children,\n  dragKey,\n  setDragKey,\n  onReorder,\n  layout,\n  rootRef\n}: ReorderableTabBarItem<K>) {\n  const tabBarItemRef = useRef<HTMLDivElement | null>(null);\n  const getItem = useCallback(\n    () => tabBarItemRef?.current?.querySelector(ITEM_SELECTOR) as HTMLElement,\n    []\n  );\n  const setTransferData = useCallback(\n    (event: DragEvent) => {\n      event.dataTransfer?.setData('text/tabbar-item-key', getKey(getItem()) + '');\n    },\n    [getItem]\n  );\n\n  const { currentKey } = useTabBarContext();\n  const { rootProps, isDragged, overlayZoneBeforeProps, overlayZoneAfterProps } =\n    useReorderableItem({\n      currentKey: currentKey as K,\n      isDisabled: onReorder ? false : true,\n      draggable: onReorder ? true : false,\n      dragKey,\n      setDragKey,\n      onReorder,\n      rootRef,\n      ref: tabBarItemRef,\n      getItem,\n      setTransferData,\n      itemStyles: styles,\n      itemSelector: ITEM_SELECTOR\n    });\n\n  //instead of specifying flex: '1 0 auto' in style\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  return (\n    <div {...rootProps} style={flexDimensions}>\n      {children}\n      {!isDragged && dragKey && (\n        <>\n          <div {...overlayZoneBeforeProps}></div>\n          <div {...overlayZoneAfterProps}></div>\n        </>\n      )}\n    </div>\n  );\n}\n","import { toChildArray } from 'preact';\nimport { useRef, useState } from 'preact/hooks';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { TabBar, TabBarProps } from '../UNSAFE_TabBar';\nimport { ReorderableTabBarItem, ITEM_SELECTOR } from './ReorderableTabBarItem';\nimport { ReorderableContext, useReorderable } from '../hooks/PRIVATE_useReorderable';\nimport { ReorderProps } from '../UNSAFE_Collection/Reorderable.types';\n\nexport type ReorderableTabBarProps<K extends string | number> = Omit<\n  TabBarProps<K>,\n  'aria-describedby'\n> &\n  ReorderProps<K> &\n  TestIdProps;\n\n/**\n * A component that allows reordering of tabs within a TabBar.\n */\nexport function ReorderableTabBar<K extends string | number>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledby,\n  children,\n  layout = 'stretch',\n  display = 'standard',\n  size = 'md',\n  edge = 'top',\n  selection,\n  onSelect,\n  onRemove,\n  onReorder,\n  testId\n}: ReorderableTabBarProps<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const [dragKey, setDragKey] = useState<K | undefined>(undefined);\n\n  const displayStackProps = {\n    display: display\n  };\n  const displayNonStackProps = {\n    display: display,\n    size: size\n  };\n  const displayProps = display === 'stacked' ? displayStackProps : displayNonStackProps;\n\n  const {\n    reorderProps,\n    reorderContext,\n    reorderInstructionsId,\n    reorderStatus,\n    reorderInstructions\n  } = useReorderable({\n    onReorder,\n    rootRef,\n    itemSelector: ITEM_SELECTOR\n  });\n\n  return (\n    <div ref={rootRef} {...reorderProps}>\n      <ReorderableContext.Provider value={reorderContext}>\n        <TabBar\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledby}\n          layout={layout}\n          edge={edge}\n          selection={selection}\n          onSelect={onSelect}\n          onRemove={onRemove}\n          testId={testId}\n          {...displayProps}\n          aria-describedby={reorderInstructionsId}>\n          {toChildArray(children).map((child) => {\n            return (\n              <ReorderableTabBarItem\n                dragKey={dragKey}\n                setDragKey={setDragKey}\n                onReorder={onReorder}\n                layout={layout}\n                rootRef={rootRef}>\n                {child}\n              </ReorderableTabBarItem>\n            );\n          })}\n        </TabBar>\n      </ReorderableContext.Provider>\n      <span id={reorderInstructionsId}>\n        <HiddenAccessible>{reorderInstructions}</HiddenAccessible>\n      </span>\n      <LiveRegion>{reorderStatus}</LiveRegion>\n    </div>\n  );\n}\n"],"names":["ITEM_SELECTOR","ReorderableTabBarItem","children","dragKey","setDragKey","onReorder","layout","rootRef","tabBarItemRef","useRef","getItem","useCallback","current","querySelector","setTransferData","event","dataTransfer","setData","getKey","currentKey","useTabBarContext","rootProps","isDragged","overlayZoneBeforeProps","overlayZoneAfterProps","useReorderableItem","isDisabled","draggable","ref","itemStyles","styles","itemSelector","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","_jsxs","jsxs","style","_Fragment","_jsx","jsx","ariaLabel","ariaLabelledby","display","size","edge","selection","onSelect","onRemove","testId","useState","undefined","displayProps","reorderProps","reorderContext","reorderInstructionsId","reorderStatus","reorderInstructions","useReorderable","ReorderableContext","Provider","value","TabBar","toChildArray","map","child","id","HiddenAccessible","LiveRegion"],"mappings":"4iBAUO,MAAMA,EAAgB,eASb,SAAAC,GAAiDC,SAC/DA,EAAQC,QACRA,EAAOC,WACPA,EAAUC,UACVA,EAASC,OACTA,EAAMC,QACNA,IAEA,MAAMC,EAAgBC,SAA8B,MAC9CC,EAAUC,EAAWA,aACzB,IAAMH,GAAeI,SAASC,cAAcb,IAC5C,IAEIc,EAAkBH,eACrBI,IACCA,EAAMC,cAAcC,QAAQ,uBAAwBC,EAAMA,OAACR,KAAa,GAAG,GAE7E,CAACA,KAGGS,WAAEA,GAAeC,EAAAA,oBACjBC,UAAEA,EAASC,UAAEA,EAASC,uBAAEA,EAAsBC,sBAAEA,GACpDC,EAAAA,mBAAmB,CACjBN,WAAYA,EACZO,YAAYrB,EACZsB,YAAWtB,EACXF,UACAC,aACAC,YACAE,UACAqB,IAAKpB,EACLE,UACAI,kBACAe,WAAYC,EAAMA,OAClBC,aAAc/B,IAOZgC,EAHsBC,EAAAA,oBAAmC,IAC1DC,OAAOC,OAAOC,2BAEIC,CAAoB,CACzCC,KAAiB,YAAXhC,EAAuB,WAAa,aAG5C,OACEiC,EAAAC,KAAA,MAAA,IAASnB,EAAWoB,MAAOT,EAAc9B,SAAA,CACtCA,GACCoB,GAAanB,GACboC,EAAAA,KACEG,EAAAA,SAAA,CAAAxC,SAAA,CAAAyC,EAAAC,IAAA,MAAA,IAASrB,IACToB,EAAAC,IAAA,MAAA,IAASpB,SAKnB,+BCtDE,aAAcqB,EACd,kBAAmBC,EAAc5C,SACjCA,EAAQI,OACRA,EAAS,UAASyC,QAClBA,EAAU,WAAUC,KACpBA,EAAO,KAAIC,KACXA,EAAO,MAAKC,UACZA,EAASC,SACTA,EAAQC,SACRA,EAAQ/C,UACRA,EAASgD,OACTA,IAEA,MAAM9C,EAAUE,SAAuB,OAChCN,EAASC,GAAckD,EAAQA,cAAgBC,GAShDC,EAA2B,YAAZT,EAPK,CACxBA,QAASA,GAEkB,CAC3BA,QAASA,EACTC,KAAMA,IAIFS,aACJA,EAAYC,eACZA,EAAcC,sBACdA,EAAqBC,cACrBA,EAAaC,oBACbA,GACEC,iBAAe,CACjBzD,YACAE,UACAwB,aAAc/B,IAGhB,OACEuC,EAAAC,KAAA,MAAA,CAAKZ,IAAKrB,KAAakD,EAAYvD,SAAA,CACjCyC,EAAAA,IAACoB,EAAkBA,mBAACC,SAAS,CAAAC,MAAOP,EAClCxD,SAAAyC,EAAAC,IAACsB,EAAMA,OAAA,CAAA,aACOrB,EAAS,kBACJC,EACjBxC,OAAQA,EACR2C,KAAMA,EACNC,UAAWA,EACXC,SAAUA,EACVC,SAAUA,EACVC,OAAQA,KACJG,EACc,mBAAAG,EACjBzD,SAAAiE,EAAYA,aAACjE,GAAUkE,KAAKC,GAEzB1B,EAAAA,IAAC1C,EACC,CAAAE,QAASA,EACTC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,QAASA,EACRL,SAAAmE,UAMX1B,cAAM2B,GAAIX,EAAqBzD,SAC7ByC,EAAAA,IAAC4B,EAAgBA,2BAAEV,MAErBlB,MAAC6B,EAAAA,qBAAYZ,MAGnB"}