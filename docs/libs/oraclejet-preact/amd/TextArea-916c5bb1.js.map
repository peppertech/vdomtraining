{"version":3,"file":"TextArea-916c5bb1.js","sources":["../../src/UNSAFE_TextArea/MaxLengthCounter.tsx","../../src/UNSAFE_TextArea/TextArea.tsx"],"sourcesContent":["import { useCallback } from 'preact/hooks';\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { hide, maxLengthCounterBase, spanStyles } from './MaxLengthCounterStyles.css';\n\ntype Props = {\n  maxLength: number;\n  valueLength?: number;\n  onClick?: () => void; // the calling component should focus on the appropriate element when clicked.\n};\n\nconst noop = () => {};\n\nexport function MaxLengthCounter({ maxLength, valueLength = 0, onClick }: Props) {\n  const { isFocused } = useFormFieldContext();\n  // We don't want mousedown on this component to do anything, so prevent the default behavior.\n  const killEvent = useCallback((event: Event) => event.preventDefault(), []);\n  const textClasses = classNames([!isFocused && hide]);\n  const { pressProps } = usePress(onClick ?? noop);\n  return (\n    <div class={maxLengthCounterBase} onMouseDown={killEvent} {...pressProps}>\n      <span class={textClasses}>\n        <span class={spanStyles}>{valueLength}</span>\n        <span class={spanStyles}>/</span>\n        <span class={spanStyles}>{maxLength}</span>\n      </span>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { MaxLengthCounter } from './MaxLengthCounter';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { ComponentMessageItem } from '../UNSAFE_ComponentMessage';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = TestIdProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  resize?: TextFieldProps['resize'];\n  /**\n   * Specifies the ARIA role type.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  rows?: TextFieldInputProps['rows'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\ntype FocusSelectHandle = FocusableHandle & Partial<SelectableHandle>;\n\n/**\n * A text area displays a field that allows a user to enter a multi-line text value.\n */\nexport const TextArea = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      messages,\n      placeholder,\n      resize,\n      role,\n      rows,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const formControl_limitReached = maxLength\n      ? translations.formControl_limitReached({\n          CHARACTER_LIMIT: maxLength\n        })\n      : '';\n\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const maxLengthDescribedByIdRef = useRef<string>(useId());\n    // The enabledAriaDescribedBy includes the maxLengthDescribedById in addition to what was passed in to aria-describedby.\n    // We don't need to announce the max length message for readonly, as it only applies when editing the value.\n    const enabledAriaDescribedBy = ariaDescribedBy\n      ? `${ariaDescribedBy} ${maxLengthDescribedByIdRef.current}`\n      : maxLengthDescribedByIdRef.current;\n\n    const enabledElementRef = useRef<HTMLTextAreaElement>(null);\n    const readonlyElementRef = useRef<HTMLTextAreaElement>(null);\n\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLTextAreaElement, HTMLTextAreaElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    const { methods: selectMethods } =\n      useSelectableTextField<HTMLTextAreaElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthReached, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const limitMessage = [{ detail: formControl_limitReached, severity: 'info' }];\n    const allMessages = [\n      ...(messages ?? []),\n      ...(isMaxLengthReached ? limitMessage : [])\n    ] as ComponentMessageItem[];\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy: isReadonly || isDisabled ? ariaDescribedBy : enabledAriaDescribedBy,\n        contentVariant: 'textarea',\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages: allMessages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, [enabledElementRef]);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={allMessages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={allMessages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"textarea\"\n          elementRef={readonlyElementRef}\n          rows={rows}\n          autoFocus={autoFocus}\n          textAlign={textAlign}\n          value={value}\n          variant=\"textarea\"\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            ref={anchorRef}\n            testId={testId}\n            variant=\"textarea\"\n            mainContent={mainContent}\n            resize={resize}\n            {...fieldLabelProps}\n          />\n        </FormFieldContext.Provider>\n      );\n    }\n    const hasMaxLength = maxLength !== undefined;\n    const mainContent = (\n      <>\n        <TextFieldInput\n          as=\"textarea\"\n          aria-label={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={rows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && hasMaxLength && (\n          <MaxLengthCounter\n            maxLength={maxLength}\n            valueLength={valueLength}\n            onClick={onClickCounter}\n          />\n        )}\n        {hasMaxLength && (\n          <HiddenAccessible id={maxLengthDescribedByIdRef.current} isHidden={true}>\n            {translations.formControl_maxLength({\n              MAX_LENGTH: `${maxLength}`\n            })}\n          </HiddenAccessible>\n        )}\n        {hasMaxLength && isFocused && (\n          <MaxLengthLiveRegion\n            maxLength={maxLength}\n            valueLength={valueLength}\n            testId={testId + '_remainingChars'}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          columnSpan={columnSpan}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onFocusOut}\n          onFocus={focusProps?.onFocusIn}\n          mainFieldRef={anchorRef}\n          resize={resize}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["noop","MaxLengthCounter","maxLength","valueLength","onClick","isFocused","useFormFieldContext","killEvent","useCallback","event","preventDefault","textClasses","classNames","pressProps","usePress","_jsx","jsx","class","onMouseDown","_jsxs","jsxs","children","spanStyles","TextArea","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","columnSpan","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLengthCounter","maxLengthUnit","messages","placeholder","resize","role","rows","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","onInput","onCommit","testId","ref","translations","useTranslationBundle","formControl_limitReached","CHARACTER_LIMIT","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","maxLengthDescribedByIdRef","useRef","useId","enabledAriaDescribedBy","current","enabledElementRef","readonlyElementRef","focusProps","methods","focusMethods","useFocusableTextField","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","isMaxLengthReached","onFilteredInput","useLengthFilter","allMessages","severity","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","contentVariant","styleVariant","onClickCounter","elm","len","length","setSelectionRange","focus","labelComp","Label","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","id","as","elementRef","hasEmptyLabel","hasInsideLabel","FormFieldContext","Provider","ReadonlyTextField","hasMaxLength","_Fragment","Fragment","TextFieldInput","inputRef","HiddenAccessible","isHidden","formControl_maxLength","MAX_LENGTH","MaxLengthLiveRegion","TextField","onBlur","onFocusOut","onFocus","onFocusIn","mainFieldRef"],"mappings":"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"}