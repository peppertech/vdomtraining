{"version":3,"file":"TabBar-d8890a47.js","sources":["../../src/UNSAFE_TabBar/TabBarContextMenu.tsx","../../src/UNSAFE_TabBar/TabBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentProps } from 'preact';\nimport { Menu } from '../UNSAFE_Menu';\nimport { TabBarContextMenuConfig, TabBarItemContext } from '#UNSAFE_TabBarCommon';\n\nexport type Props<K extends string | number> = Omit<ComponentProps<typeof Menu>, 'children'> & {\n  contextMenuConfig: TabBarContextMenuConfig<K>;\n} & { contextMenuContext: TabBarItemContext<K> };\n\n/**\n * The internal component used to render a custom context menu\n */\nexport function TabBarContextMenu<K extends string | number>({\n  contextMenuConfig,\n  contextMenuContext,\n  ...menuProps\n}: Props<K>) {\n  const accessibleLabel = contextMenuConfig.accessibleLabel;\n\n  const menuItems = contextMenuConfig.itemsRenderer(contextMenuContext);\n  if (menuItems == null) {\n    return null;\n  }\n  return (\n    <>\n      <Menu\n        {...menuProps}\n        {...(accessibleLabel && {\n          'aria-label': accessibleLabel\n        })}>\n        {menuProps.isOpen && contextMenuConfig.itemsRenderer(contextMenuContext)}\n      </Menu>\n    </>\n  );\n}\n","import type { ComponentChildren, Ref, RefObject } from 'preact';\nimport { TabBarContext, TabBarLayout, TabBarContextMenuConfig } from '../UNSAFE_TabBarCommon';\nimport { styles } from './themes/TabBarStyles.css';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\nimport { forwardRef } from 'preact/compat';\nimport { TabBarContextMenu } from './TabBarContextMenu';\nexport {\n  TabBarItem,\n  RemovableTabBarItem,\n  OverflowTabBarItem,\n  TabBarContext,\n  useTabBarContext,\n  TabBarLayout,\n  useProgressiveTruncation,\n  TabBarLinkItem\n} from '../UNSAFE_TabBarCommon';\n\n/**\n * type for payload of current key change event handler\n */\nexport type CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\ntype DisplayProps =\n  | {\n      /**\n       * Controls the content layout of the TabBarItem: 'standard' lays out the contents horizontally,\n       *'icons' hides the label,\n       */\n      display?: 'standard' | 'icons';\n      /**\n       *  The size indicates how tall the TabBarItem is rendered.\n       *  Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      size?: 'md' | 'lg';\n    }\n  | {\n      /**\n       *'stacked' stacks the icon on top of the label.\n       * Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      display?: 'stacked';\n      size?: 'never';\n    };\n\nexport type TabBarProps<K extends string | number> = DisplayProps & {\n  /**\n   * A set of TabBarItem(s) that TabBar will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Whether to stretch the tab bar items to occupy available space or to condense items\n   */\n  layout?: 'stretch' | 'condense';\n  /**\n   * The position of the TabBar. Valid Values: top and bottom.\n   * 'top' is used when TabBar is placed on top of content section and the selection\n   *  indicator would be placed below the TabBarItem.\n   * 'bottom' is used when TabBar is placed on bottom of content section and the selection\n   *  indicator would be placed above the TabBarItem.\n   */\n  edge?: 'top' | 'bottom';\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when user selects a tab.\n   * The callback is also invoked when a user selects a tab that is already selected.\n   */\n  onSelect?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Callback function to handle remove\n   */\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  /**\n   * Accepts the ID of an element that provides instructions for interaction with the TabBar.\n   */\n  'aria-describedby'?: string;\n  /**\n   * An aria-label which defines a string value that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-labelledby'?: string;\n\n  /**\n   * Configuration used to specify a context menu.\n   */\n  contextMenuConfig?: TabBarContextMenuConfig<K>;\n};\n/**\n * A tab bar allows navigation between different content sections.\n */\nexport const TabBar = forwardRef(\n  <K extends string | number>(\n    {\n      children,\n      layout = 'stretch',\n      display = 'standard',\n      size = 'md',\n      edge = 'top',\n      selection,\n      onSelect,\n      onRemove,\n      'aria-describedby': ariaDescribedBy,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      contextMenuConfig\n    }: TabBarProps<K> & TestIdProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    const rootRef = ref as RefObject<HTMLDivElement>;\n\n    const { rootProps, tabBarContext, menuProps, contextMenuContext } = useTabBar({\n      class: styles.tabBarBase,\n      edge: edge,\n      onRemove,\n      onSelect,\n      ref: rootRef,\n      selection,\n      size,\n      children,\n      contextMenuConfig\n    });\n\n    return (\n      <>\n        <TabBarContext.Provider value={tabBarContext}>\n          <div\n            {...rootProps}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledby}\n            aria-describedby={ariaDescribedBy}>\n            <TabBarLayout layout={layout} display={display}>\n              {children}\n            </TabBarLayout>\n          </div>\n        </TabBarContext.Provider>\n        {contextMenuConfig && (\n          <TabBarContextMenu\n            {...menuProps}\n            contextMenuConfig={contextMenuConfig}\n            contextMenuContext={contextMenuContext!}\n          />\n        )}\n      </>\n    );\n  }\n);\n"],"names":["TabBarContextMenu","contextMenuConfig","contextMenuContext","menuProps","accessibleLabel","itemsRenderer","_jsx","Menu","children","isOpen","TabBar","forwardRef","layout","display","size","edge","selection","onSelect","onRemove","ariaDescribedBy","ariaLabel","ariaLabelledby","ref","rootRef","rootProps","tabBarContext","useTabBar","class","styles","tabBarBase","_jsxs","jsxs","_Fragment","TabBarContext","Provider","value","jsx","TabBarLayout"],"mappings":"k7CAkBM,SAAUA,GAA6CC,kBAC3DA,EAAiBC,mBACjBA,KACGC,IAEH,MAAMC,EAAkBH,EAAkBG,gBAG1C,OAAiB,MADCH,EAAkBI,cAAcH,GAEzC,KAGPI,2BACEA,EAAAA,IAACC,EAAAA,SACKJ,KACCC,GAAmB,CACtB,aAAcA,GAEfI,SAAAL,EAAUM,QAAUR,EAAkBI,cAAcH,MAI7D,CC2Ea,MAAAQ,EAASC,EAAUA,YAC9B,EAEIH,WACAI,SAAS,UACTC,UAAU,WACVC,OAAO,KACPC,OAAO,MACPC,YACAC,WACAC,WACA,mBAAoBC,EACpB,aAAcC,EACd,kBAAmBC,EACnBpB,qBAEFqB,KAEA,MAAMC,EAAUD,GAEVE,UAAEA,EAASC,cAAEA,EAAatB,UAAEA,EAASD,mBAAEA,GAAuBwB,EAAAA,UAAU,CAC5EC,MAAOC,EAAMA,OAACC,WACdd,KAAMA,EACNG,WACAD,WACAK,IAAKC,EACLP,YACAF,OACAN,WACAP,sBAGF,OACE6B,EACEC,KAAAC,WAAA,CAAAxB,SAAA,CAAAF,MAAC2B,EAAAA,cAAcC,SAAS,CAAAC,MAAOV,EAC7BjB,SAAAF,EAAA8B,IAAA,MAAA,IACMZ,EACQ,aAAAJ,EACK,kBAAAC,EACC,mBAAAF,EAClBX,SAAAF,EAAAA,IAAC+B,EAAAA,aAAY,CAACzB,OAAQA,EAAQC,QAASA,EACpCL,SAAAA,QAINP,GACCK,EAAA8B,IAACpC,EAAiB,IACZG,EACJF,kBAAmBA,EACnBC,mBAAoBA,MAI1B"}