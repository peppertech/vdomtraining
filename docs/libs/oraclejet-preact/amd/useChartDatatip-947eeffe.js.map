{"version":3,"file":"useChartDatatip-947eeffe.js","sources":["../../src/utils/PRIVATE_chartUtils/dataTipUtils.tsx","../../src/hooks/PRIVATE_useChartDatatip/useChartDatatip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ChartSeriesData, ValueFormats, Group } from '../UNSAFE_visTypes/chart';\nimport { VisTabularDatatip } from '../../PRIVATE_VisTabularDatatip';\nimport { TableRowData } from '../../PRIVATE_VisTabularDatatip';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\n\n/**\n * Returns the data required for the VisTabularDatatip to render.\n * @param activeInfo active item info.\n * @param series The array of chart series.\n * @param groups The array of chart groups.\n * @param valueFormats The array of chart series.\n * @param getDataItem function which returns chartItem\n */\nexport function getChartTabularData<K, D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>>(\n  data: D,\n  seriesValue: string,\n  groupValue: string,\n  valueFormats?: ValueFormats,\n  isTimeAxis?: boolean,\n  formatAxisLabel?: (axisValue: number) => string,\n  formatYValue?: (value: number) => string,\n  hasXYValues?: boolean\n) {\n  //TODO: Use translation strings\n  let itemValue, itemX, itemY;\n  if (hasXYValues && 'y' in data) {\n    const x = data.x;\n    itemX = valueFormats?.x?.format ? valueFormats?.value?.format?.(x!) : formatYValue?.(x!)!;\n\n    const y = data.y;\n    itemY = valueFormats?.y?.format ? valueFormats?.value?.format?.(y!) : formatYValue?.(y!)!;\n  } else if ('value' in data && data.value !== undefined) {\n    const value = data.value;\n    itemValue = valueFormats?.value?.format\n      ? valueFormats?.value?.format?.(value)\n      : formatYValue?.(value)!;\n  }\n  const tableData: TableRowData[] = [];\n\n  if (valueFormats?.series?.isDisplayed != false) {\n    tableData.push({\n      key: valueFormats?.series?.label || 'Series',\n      value: seriesValue\n    });\n  }\n  if (valueFormats?.group?.isDisplayed != false) {\n    tableData.push({\n      key: valueFormats?.group?.label || (isTimeAxis ? 'Date' : 'Group'),\n      value: isTimeAxis ? formatAxisLabel?.(new Date(groupValue).getTime())! : groupValue\n    });\n  }\n  if (valueFormats?.value?.isDisplayed != false) {\n    if (hasXYValues) {\n      tableData.push({\n        key: valueFormats?.value?.label || 'X',\n        value: itemX!\n      });\n      tableData.push({\n        key: valueFormats?.value?.label || 'Y',\n        value: itemY!\n      });\n    } else {\n      tableData.push({\n        key: valueFormats?.value?.label || 'Value',\n        value: itemValue!\n      });\n    }\n  }\n  return tableData;\n}\n\nexport function getDefaultDatatipRenderer<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>(options: {\n  series: ChartSeriesData<K, D>;\n  groups: Group;\n  valueFormats?: ValueFormats;\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps';\n  formatAxisLabel?: (axisValue: number) => string;\n  formatYValue?: (value: number) => string;\n  hasXYValues?: boolean;\n}) {\n  const isMixedFrequency = options.timeAxisType === 'mixedFrequency';\n  const isRegularTimeAxis =\n    options.timeAxisType === 'enabled' || options.timeAxisType === 'skipGaps';\n\n  return (context: { data: D }) => {\n    const groupValue = options.groups.name || options.groups.id;\n    const timeValue = (\n      isMixedFrequency ? context.data.x : isRegularTimeAxis ? groupValue : undefined\n    ) as string;\n    return {\n      content: (\n        <VisTabularDatatip\n          tableData={getChartTabularData<K, D>(\n            context.data,\n            options.series.name || options.series.id.toString(),\n            timeValue || options.groups.name || options.groups.id,\n            options.valueFormats,\n            options.timeAxisType != null,\n            options.formatAxisLabel,\n            options.formatYValue,\n            options.hasXYValues\n          )}\n        />\n      ),\n      borderColor: context.data.color || options.series.color\n    };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\nimport { calculateOffset } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\n\nimport { DataCursorPosition, Group, Info, Scale, ValueFormats } from '#utils/UNSAFE_visTypes/chart';\nimport { BarItemData, BarSeriesData } from '#UNSAFE_BarChart/barChart.types';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { getDefaultDatatipRenderer } from '#utils/PRIVATE_chartUtils/dataTipUtils';\nimport { LineAreaItem, LineAreaSeriesData } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { getColorRamp } from '#utils/UNSAFE_visUtils';\nimport { Placement } from '#UNSAFE_Floating';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { Property } from 'csstype';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\n\ntype Props<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n> = {\n  series: (BarSeriesData<K, D> | LineAreaSeriesData<K, D>)[];\n  groups: Group[];\n  isDataCursorEnabled?: boolean;\n  dataCursorPosition?: DataCursorPosition;\n  isHoriz: boolean;\n  getDataItemPos: (seriesIndex: number, groupIndex: number) => Dimension | undefined;\n  datatip?: (context: { data: D; seriesIndex: number; groupIndex: number; id: K }) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  };\n  xScale: Scale;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  hoveredItemInfo?: Info;\n  focusedItemInfo?: Info;\n  width: number;\n  height: number;\n  valueFormats?: ValueFormats;\n  findNearest: (x: number, y: number) => any;\n  timeAxisType?: 'mixedFrequency' | 'skipGaps' | 'enabled';\n  touchResponse: 'touchStart' | 'touchHold';\n  isDisabled: boolean;\n  formatAxisLabel?: (axisValue: number) => string;\n  formatYValue?: (value: number) => string;\n  hasXYValues?: boolean;\n};\nconst DATA_CURSOR_OFFSET = 10;\n\nexport const useChartDatatip = <\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({\n  isDataCursorEnabled,\n  dataCursorPosition,\n  isHoriz,\n  datatip,\n  xScale,\n  getDataItem,\n  getDataItemPos,\n  hoveredItemInfo,\n  focusedItemInfo,\n  series,\n  valueFormats,\n  groups,\n  width,\n  height,\n  findNearest,\n  timeAxisType,\n  touchResponse,\n  isDisabled,\n  formatAxisLabel,\n  formatYValue,\n  hasXYValues\n}: Props<K, D>) => {\n  const hasData = groups.length > 0 && series.length > 0;\n  let activeInfo = !hasData\n    ? undefined\n    : !isDisabled\n    ? focusedItemInfo?.isCurrent\n      ? focusedItemInfo\n      : hoveredItemInfo?.isCurrent &&\n        hoveredItemInfo.seriesIndex !== undefined &&\n        hoveredItemInfo.groupIndex !== undefined\n      ? hoveredItemInfo\n      : undefined\n    : undefined;\n\n  const anchor = focusedItemInfo?.isCurrent || isDataCursorEnabled ? 'element' : 'pointer';\n  const elementBounds = focusedItemInfo?.isCurrent\n    ? getDataItemPos(focusedItemInfo.seriesIndex!, focusedItemInfo.groupIndex!)\n    : undefined;\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  let placement = 'top-start' as Placement;\n  let offset = calculateOffset(isRtl, width, elementBounds);\n  if (isDataCursorEnabled && dataCursorPosition?.x != null && dataCursorPosition?.y != null) {\n    // TOD0: The offset for data cursor should be calculated according to\n    // datatip content dimensions as well.\n    activeInfo = activeInfo || findNearest?.(dataCursorPosition.x, dataCursorPosition.y);\n    const xPos = xScale.transform(dataCursorPosition.x);\n    offset = { mainAxis: -1, crossAxis: -1 };\n    if (isHoriz) {\n      placement = 'end';\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n      offset.crossAxis = xPos - height / 2;\n    } else {\n      placement = 'top';\n      offset.crossAxis = isRtl ? width / 2 - xPos : xPos - width / 2;\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n    }\n  }\n\n  let dtContent;\n  let item: D | undefined;\n  if (activeInfo?.seriesIndex != null && activeInfo?.groupIndex != null) {\n    item = getDataItem(activeInfo.seriesIndex, activeInfo.groupIndex!);\n    const datatipContext = item\n      ? {\n          data: item,\n          seriesIndex: activeInfo.seriesIndex,\n          groupIndex: activeInfo.groupIndex,\n          id: item.id\n        }\n      : undefined;\n\n    if (datatipContext) {\n      const datatipRenderer =\n        datatip ||\n        getDefaultDatatipRenderer({\n          series: series[activeInfo.seriesIndex],\n          groups: groups[activeInfo.groupIndex],\n          valueFormats,\n          timeAxisType,\n          formatAxisLabel,\n          formatYValue,\n          hasXYValues\n        });\n      dtContent = datatipRenderer(datatipContext);\n    }\n  }\n  const colors = getColorRamp();\n  const borderColor =\n    dtContent?.borderColor ||\n    (activeInfo &&\n      ((series[activeInfo.seriesIndex!] as BarSeriesData<K, D>).color ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>).lineColor ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>).areaColor)) ||\n    (activeInfo && colors[activeInfo.seriesIndex! % colors.length]);\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: dtContent?.content,\n    anchor,\n    placement,\n    offset,\n    borderColor,\n    touchResponse,\n    isDisabled\n  });\n\n  return { datatipContent, datatipProps };\n};\n"],"names":["getChartTabularData","data","seriesValue","groupValue","valueFormats","isTimeAxis","formatAxisLabel","formatYValue","hasXYValues","itemValue","itemX","itemY","x","format","value","y","undefined","tableData","series","isDisplayed","push","key","label","group","Date","getTime","isDataCursorEnabled","dataCursorPosition","isHoriz","datatip","xScale","getDataItem","getDataItemPos","hoveredItemInfo","focusedItemInfo","groups","width","height","findNearest","timeAxisType","touchResponse","isDisabled","activeInfo","length","isCurrent","seriesIndex","groupIndex","anchor","elementBounds","direction","useUser","isRtl","dtContent","item","placement","offset","calculateOffset","xPos","transform","mainAxis","crossAxis","datatipContext","id","options","isMixedFrequency","isRegularTimeAxis","context","name","timeValue","content","_jsx","jsx","VisTabularDatatip","toString","borderColor","color","getDefaultDatatipRenderer","colors","getColorRamp","lineColor","areaColor","datatipContent","datatipProps","useDatatip"],"mappings":"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"}