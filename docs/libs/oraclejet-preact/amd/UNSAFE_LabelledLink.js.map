{"version":3,"file":"UNSAFE_LabelledLink.js","sources":["../../src/UNSAFE_LabelledLink/HiddenLabel.tsx","../../src/UNSAFE_LabelledLink/useLabelledLinkTheme.ts","../../src/UNSAFE_LabelledLink/LabelledLink.tsx","../../src/UNSAFE_LabelledLink/useLabelledLinkAria.ts"],"sourcesContent":["import { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { Label } from '#UNSAFE_Label/Label';\n\ntype Props = {\n  children: string;\n  id?: string;\n};\n\nexport const HiddenLabel = ({ children, id }: Props) => (\n  <HiddenAccessible isHidden>\n    <Label id={id}>{children}</Label>\n  </HiddenAccessible>\n);\n","import { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { textInterpolations } from '#utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '#utils/UNSAFE_mergeInterpolations';\nimport { LabelledLinkVariantOptions } from './themes/LabelledLinkStyles.css';\nimport { LabelledLinkRedwoodTheme } from './themes/redwood/LabelledLinkTheme';\n\ntype UseLabelledLinkThemeProps = {\n  hasInsideLabel?: boolean;\n  isFormLayout?: boolean;\n  isFormReadonly?: boolean;\n  textAlign?: 'start' | 'end' | 'right';\n};\n\nexport function useLabelledLinkTheme({\n  hasInsideLabel,\n  isFormLayout,\n  isFormReadonly,\n  textAlign\n}: UseLabelledLinkThemeProps) {\n  // Style interpolations for text align\n  const interpolations = [...Object.values(textInterpolations)];\n  const styleInterpolations = mergeInterpolations<UseLabelledLinkThemeProps>(interpolations);\n\n  // Calculate the style interpolation classes\n  const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n  // Calculate the theme classes\n  const { classes: themeClasses } = useComponentTheme<LabelledLinkVariantOptions>(\n    LabelledLinkRedwoodTheme,\n    {\n      formLayout: isFormLayout ? 'isFormLayout' : 'notFormLayout',\n      readonlyForm: isFormReadonly ? 'isReadonlyForm' : 'notReadonlyForm',\n      insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel'\n    }\n  );\n  // merge all the classes\n  const classes = classNames([styleInterpolationClasses, themeClasses]);\n\n  return { classes };\n}\n","import { Label } from '#UNSAFE_Label/Label';\nimport { Link } from '#UNSAFE_Link';\nimport { Text } from '#UNSAFE_Text';\nimport { ReadonlyTextField } from '#UNSAFE_TextField';\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { View } from '#UNSAFE_View';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { ComponentProps } from 'preact';\nimport { HiddenLabel } from './HiddenLabel';\nimport { useLabelledLinkAria } from './useLabelledLinkAria';\nimport { useLabelledLinkTheme } from './useLabelledLinkTheme';\n\ntype PickedLinkProps = Pick<\n  ComponentProps<typeof Link>,\n  'aria-describedby' | 'href' | 'onClick' | 'target'\n>;\n\nexport type LabelledLinkProps = PickedLinkProps & {\n  /**\n   * Specifies the text that should appear in the field. If this property\n   * is not provided, then the URL provided using the `href` property\n   * will be used as the text in the field.\n   */\n  children?: string;\n\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   * @default 'inside'\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: 'start' | 'end' | 'right';\n\n  /**\n   * The component does not support any assistive text. But, this property can be used to specify\n   * whether or not the component should reserve space to be consistent with the other form components\n   * in the Form Layout. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Reserve space to prevent layout reflow.</li>\n   * <li><code>'reflow'</code>: Do not reserve space.</li>\n   * <li><code>'compact'</code>: Do not reserve space. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n};\n\n/**\n * LabelledLink component can be used to render a readonly form control field that\n * has a link for its content.\n */\nexport const LabelledLink = ({\n  'aria-describedby': ariaDescribedBy,\n  children,\n  columnSpan,\n  href,\n  label,\n  labelEdge: propLabelEdge,\n  labelStartWidth: propLabelStartWidth,\n  onClick,\n  target,\n  textAlign: propTextAlign,\n  userAssistanceDensity: propUserAssistanceDensity\n}: LabelledLinkProps) => {\n  // Consume the form context to get the default values\n  const {\n    isFormLayout,\n    isReadonly: isFormReadonly,\n    labelEdge: formLabelEdge,\n    labelStartWidth: formLabelStartWidth,\n    textAlign: formTextAlign,\n    userAssistanceDensity: formUserAssistanceDensity\n  } = useFormContext();\n\n  // default to FormContext values if component properties are not specified\n  const labelEdge = propLabelEdge ?? formLabelEdge;\n  const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n  const textAlign = propTextAlign ?? formTextAlign;\n  const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n  // We will use the URL as text if the link text is not provided as a child\n  const linkText = children ?? href;\n\n  // Calculate the text field related props\n  const { baseId, formFieldContext, labelProps, inputProps, userAssistanceProps } = useTextField({\n    ariaDescribedBy,\n    isReadonly: true,\n    labelEdge,\n    value: linkText\n  });\n\n  // Create the label component and the fieldLabelProps\n  const labelComp = <Label {...labelProps}>{label}</Label>;\n  const fieldLabelProps = {\n    label: labelEdge !== 'none' ? labelComp : undefined,\n    labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n    labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n  };\n\n  // save space for user assistance if density is 'efficient', even though we don't\n  // render user assistance for readonly fields for now.\n  const inlineUserAssistance =\n    userAssistanceDensity === 'efficient' ? (\n      <InlineUserAssistance\n        userAssistanceDensity={userAssistanceDensity}\n        {...userAssistanceProps}\n      />\n    ) : undefined;\n\n  // Get the theme classes\n  const { classes } = useLabelledLinkTheme({\n    hasInsideLabel: labelEdge === 'inside',\n    isFormLayout,\n    isFormReadonly,\n    textAlign\n  });\n\n  // Get the aria props\n  const hasEmptyLabel = label === '';\n  const hasHiddenLabel = labelEdge === 'none';\n  const { containerAria, hiddenLabelAria, linkAria } = useLabelledLinkAria({\n    'aria-describedby': inputProps['aria-describedby'],\n    baseId,\n    hasEmptyLabel,\n    hasHiddenLabel,\n    labelId: labelProps.id\n  });\n\n  return (\n    <FormFieldContext.Provider value={formFieldContext}>\n      <ReadonlyTextField\n        columnSpan={columnSpan}\n        role=\"presentation\"\n        inlineUserAssistance={inlineUserAssistance}\n        {...fieldLabelProps}\n        mainContent={\n          <div class={classes} {...containerAria}>\n            {hasHiddenLabel && <HiddenLabel {...hiddenLabelAria}>{label}</HiddenLabel>}\n            {/**\n             * The containing div is a flexbox. So, the text-align will not work for the link\n             * content. So, we wrap the link in a 100% block. This way the text align will\n             * work as the link is now inside a block and not flexbox.\n             */}\n            <View width=\"100%\">\n              <Link href={href} target={target} onClick={onClick} {...linkAria}>\n                <Text size=\"md\" variant=\"inherit\">\n                  {linkText}\n                </Text>\n              </Link>\n            </View>\n          </div>\n        }\n      />\n    </FormFieldContext.Provider>\n  );\n};\n","import { useAccessibleContext } from '#hooks/UNSAFE_useAccessibleContext';\nimport { classNames as mergeIds } from '#utils/UNSAFE_classNames';\n\ntype UseLabelledLinkAriaProps = {\n  'aria-describedby'?: string;\n  baseId: string;\n  hasEmptyLabel: boolean;\n  hasHiddenLabel: boolean;\n  labelId?: string;\n};\n\nexport function useLabelledLinkAria({\n  'aria-describedby': ariaDescribedBy,\n  baseId,\n  hasEmptyLabel,\n  hasHiddenLabel,\n  labelId: propLabelId\n}: UseLabelledLinkAriaProps) {\n  const containerId = `${baseId}--container`;\n  const labelId = propLabelId ?? `${baseId}--hidden-label`;\n\n  // JET-52089: add unsafe API for specifying an external label which is added to ariaLabelledBy on the input or div,\n  // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n  // kinds of labels, this helps to ensure we don't override a meaningful label.\n  const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n  const ariaLabelledBy = mergeIds([\n    labelId,\n    hasEmptyLabel && hasHiddenLabel && UNSAFE_ariaLabelledBy,\n    containerId\n  ]);\n\n  return {\n    containerAria: {\n      id: containerId\n    },\n    hiddenLabelAria: hasHiddenLabel\n      ? {\n          id: labelId\n        }\n      : {},\n    linkAria: {\n      'aria-describedby': ariaDescribedBy,\n      'aria-labelledby': ariaLabelledBy\n    }\n  };\n}\n"],"names":["HiddenLabel","children","id","_jsx","HiddenAccessible","isHidden","Label","useLabelledLinkTheme","hasInsideLabel","isFormLayout","isFormReadonly","textAlign","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","class","styleInterpolationClasses","classes","themeClasses","useComponentTheme","LabelledLinkRedwoodTheme","formLayout","readonlyForm","insideLabel","classNames","ariaDescribedBy","columnSpan","href","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","onClick","target","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","isReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","linkText","baseId","formFieldContext","labelProps","inputProps","userAssistanceProps","useTextField","value","labelComp","jsx","fieldLabelProps","undefined","inlineUserAssistance","InlineUserAssistance","hasEmptyLabel","hasHiddenLabel","containerAria","hiddenLabelAria","linkAria","labelId","propLabelId","containerId","UNSAFE_ariaLabelledBy","useAccessibleContext","mergeIds","useLabelledLinkAria","FormFieldContext","Provider","ReadonlyTextField","role","mainContent","_jsxs","View","width","Link","Text","size","variant"],"mappings":"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"}