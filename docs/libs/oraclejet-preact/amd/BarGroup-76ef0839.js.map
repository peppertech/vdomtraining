{"version":3,"file":"BarGroup-76ef0839.js","sources":["../../src/UNSAFE_BarChart/utils/barSeriesUtils.ts","../../src/UNSAFE_BarChart/Bar.tsx","../../src/UNSAFE_BarChart/utils/barItemUtils.ts","../../src/UNSAFE_BarChart/utils/barLayoutUtils.ts","../../src/UNSAFE_BarChart/utils/barItemLabelUtils.ts","../../src/UNSAFE_BarChart/BarChartStackLabel.tsx","../../src/UNSAFE_BarChart/BarLabel.tsx","../../src/UNSAFE_BarChart/BarGroup.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nconst IDEAL_DATA_ITEM_GAP = 2;\nconst DEFAULT_BAR_GAP_RATIO = 0.25;\n\n/**\n * The function that calculates the barWidth and offset from group center for each series.\n * @param groupWidth The width of the group.\n * @param noOfSeries The number of series present in the chart.\n * @param barGapRatio The ratio of gap to groupWidth.\n * @param dataItemGaps The ratio that determines the gap between the bars.\n */\nexport function getBarGapsInfo(\n  seriesIndex: number,\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const numSeries = isStacked ? 1 : numOfSeries;\n  const itemsGaps = IDEAL_DATA_ITEM_GAP * dataItemGaps;\n  const barWidth = (groupWidth * (1 - barGapRatio) - (numSeries - 1) * itemsGaps) / numSeries;\n  if (isStacked) {\n    return { barWidth, offset: (-1 * barWidth) / 2, itemsGaps };\n  }\n  const center = groupWidth / 2;\n  const seriesStart =\n    groupWidth * (barGapRatio / 2) + seriesIndex * (barWidth + IDEAL_DATA_ITEM_GAP * dataItemGaps);\n  const offset = isRtl ? center - seriesStart - barWidth : seriesStart - center;\n\n  return { barWidth, offset, itemsGaps };\n}\n\n/**\n * Returns the bar gap ratio.\n * @param isStacked Whether the chart is a stacked bar chart.\n * @param startIndex The viewport start index.\n * @param endIndex The viewport end index.\n */\nexport function getBarGapRatio(isStacked: boolean, startIndex: number, endIndex: number) {\n  const noOfGroups = endIndex - startIndex + 1;\n  // logic from legacy\n  return isStacked ? 0.37 + 0.26 / noOfGroups : DEFAULT_BAR_GAP_RATIO;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { classNames } from '#utils/UNSAFE_classNames';\n\ntype BarProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDimmed: boolean;\n  activeId?: string;\n  isPointerEnabled: boolean;\n  fill: ColorProps['color'];\n  stroke?: ColorProps['color'];\n  strokeWidth?: number;\n  seriesIndex: number;\n  groupIndex: number;\n  'aria-label'?: string;\n};\n\nconst HOVERED_INNER_INSET = 1.5;\nconst SELECTED_INNER_INSET = 2.5;\n\n/**\n * The rect representing the bar item.\n * @param props\n * @returns\n */\nexport function Bar(props: BarProps) {\n  const isInteractive = props.isSelected || props.isFocused;\n\n  if (isInteractive) {\n    return <InteractiveBar {...props} />;\n  }\n\n  return (\n    <rect\n      x={props.x}\n      y={props.y}\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      data-oj-object=\"bar\"\n      aria-label={props['aria-label']}\n      role={props['aria-label'] ? 'img' : undefined}\n      id={props.activeId}\n      style={{\n        width: props.width,\n        height: props.height,\n        fill: props.fill,\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth\n      }}\n      class={classNames([\n        props.isPointerEnabled ? styles.cursorEnable : undefined,\n        props.isDimmed ? styles.dimmed : undefined\n      ])}\n    />\n  );\n}\n\n/**\n * The selected or hovered selected bar.\n */\nexport function InteractiveBar(props: BarProps) {\n  const { x, y, width, height, fill, isSelected, isFocused } = props;\n  const inset = isSelected ? SELECTED_INNER_INSET : HOVERED_INNER_INSET;\n  return (\n    <g\n      id={props.activeId}\n      data-oj-object=\"bar\"\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      className={props.isDimmed ? styles.dimmed : ''}\n      role={props['aria-label'] ? 'img' : undefined}\n      aria-label={props['aria-label']}>\n      <rect\n        x={x}\n        y={y}\n        class={classNames([isSelected ? styles.selectedBorder : ''])}\n        style={{\n          width: width,\n          height: height,\n          fill: !isSelected && isFocused ? fill : undefined\n        }}></rect>\n      <rect\n        x={x + inset}\n        y={y + inset}\n        class={classNames([\n          styles.contrastBorder,\n          props.isPointerEnabled ? styles.cursorEnable : undefined\n        ])}\n        style={{\n          width: width - 2 * inset,\n          height: height - 2 * inset,\n          fill: fill\n        }}></rect>\n    </g>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { BarItemData, BarSeriesData } from '../barChart.types';\n\nexport function getBarProps<K, D>(\n  item: BarItemData<K>,\n  series: BarSeriesData<K, D>,\n  seriesColor: ColorProps['color']\n) {\n  const fill = item.color || series.color || seriesColor;\n  const stroke = item.borderColor || series.borderColor;\n  return { fill, stroke };\n}\n\n/**\n * Returns the coordinate of bar rect.\n * @param x1 The bar start coordinate in x axis.\n * @param x2 The bar end coordinate in x axis.\n * @param endCoord The coordinate of bar top in y axis.\n * @param baselineCoord The coordinate of bar base in y axis.\n * @param isHoriz Whether the chart is horizontal chart.\n * @returns\n */\nexport function getRectCoord(\n  x1: number,\n  x2: number,\n  endCoord: number,\n  baselineCoord: number,\n  isHoriz: boolean\n) {\n  let x: number;\n  let y: number;\n  let width: number;\n  let height: number;\n\n  let x_1 = x1;\n  let x_2 = x2;\n\n  // Bar width has to be at least 1px to prevent disappearing bars\n  let barWidth = x2 - x1;\n  if (barWidth < 1) {\n    x_1 = Math.floor(x_1);\n    x_2 = x_1 + 1;\n    barWidth = 1;\n  }\n\n  if (!isHoriz) {\n    x = x_1;\n    y = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(x_2 - x_1);\n    height = Math.abs(baselineCoord - endCoord);\n  } else {\n    y = x_1;\n    x = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(baselineCoord - endCoord);\n    height = Math.abs(x_2 - x_1);\n  }\n\n  return { x, y, width, height };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getBarGapsInfo } from './barSeriesUtils';\nimport { getRectCoord } from './barItemUtils';\nimport { BarItemData, BarSeriesData } from '../barChart.types';\nimport { Scale, Group } from '#utils/UNSAFE_visTypes/chart';\n\n/**\n * Returns the base and end coordinate of the bar.\n * @param value The value of the bar item.\n * @param yScale The yscale.\n * @param isStacked Whether the bar chart is stacked or not.\n * @param isLog Whether the y axis is in log scale.\n * @param itemsGaps The gap between data item.\n * @param negCummulativeValue The negative cummulative value of the group.\n * @param posCummulativeValue The positive cummulative value of the group.\n * @returns\n */\nexport function getBaseAndEndCoord(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  itemsGaps: number,\n  negCummulativeValue: number,\n  posCummulativeValue: number\n) {\n  let baselineCoord;\n  let endCoord;\n  if (isStacked) {\n    baselineCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n    negCummulativeValue += value < 0 ? value : 0;\n    posCummulativeValue += value > 0 ? value : 0;\n    endCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n\n    baselineCoord += endCoord > baselineCoord ? itemsGaps : -itemsGaps;\n  } else {\n    baselineCoord = isLog ? yScale.range()[0] : yScale.transform(0);\n    endCoord = yScale.transform(value);\n  }\n  return { baselineCoord, endCoord };\n}\n\nexport function getBarPosition<K extends string | number, D extends BarItemData<K>>(\n  series: BarSeriesData<K, D>[],\n  groups: Group[],\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  xScale: Scale,\n  yScale: Scale,\n  hiddenIds: Set<number | string> | undefined,\n  dataItemGaps: number,\n  groupWidth: number,\n  barGapRatio: number,\n  isLog: boolean,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean,\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps'\n) {\n  return (seriesIndex: number, groupIndex: number) => {\n    const numOfSeries = series.length;\n    let posCumulativeValue = 0;\n    let negCumulativeValue = 0;\n    for (let index = 0; index < numOfSeries; index += 1) {\n      const item = getDataItem(index, groupIndex);\n      let xVal = groupIndex;\n      if (timeAxisType) {\n        const val =\n          timeAxisType === 'mixedFrequency'\n            ? getDataItem(seriesIndex, groupIndex)?.x\n            : groups[groupIndex].id;\n        xVal = new Date(val!).getTime();\n      }\n      if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n        continue;\n      }\n      const groupCenter = xScale.transform(xVal);\n      const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n        index,\n        groupWidth,\n        barGapRatio,\n        numOfSeries,\n        dataItemGaps,\n        isStacked,\n        isRtl\n      );\n      const x1 = groupCenter + offset;\n      const x2 = x1 + barWidth;\n\n      const { baselineCoord, endCoord } = getBaseAndEndCoord(\n        item.value,\n        yScale,\n        isStacked,\n        isLog,\n        itemsGaps,\n        negCumulativeValue,\n        posCumulativeValue\n      );\n      negCumulativeValue += item.value < 0 ? item.value : 0;\n      posCumulativeValue += item.value > 0 ? item.value : 0;\n\n      if (seriesIndex === index) {\n        return getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n      }\n    }\n    return;\n  };\n}\n\n/**\n * Returns the center coordinate of the bar item.\n * @param value\n * @param yScale\n * @param isStacked\n * @param isLog\n * @param dataItemGaps\n * @param negCummValue\n * @param posCummValue\n * @returns\n */\nexport function getBarCenterCoordinate(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  dataItemGaps: number,\n  negCummValue: number,\n  posCummValue: number\n) {\n  const { baselineCoord, endCoord } = getBaseAndEndCoord(\n    value,\n    yScale,\n    isStacked,\n    isLog,\n    dataItemGaps,\n    negCummValue,\n    posCummValue\n  );\n  return (baselineCoord + endCoord) / 2;\n}\n\nexport function getSeriesOffsetAndWidth(\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  return (seriesIndex: number) => {\n    const { offset, barWidth } = getBarGapsInfo(\n      seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numOfSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    return { offset, dataWidth: barWidth };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nconst LABEL_OFFSET = 2;\n\nfunction getValueCoord(isHoriz: boolean, isRtl: boolean, isNegative: boolean, barDims: Dimension) {\n  if (isHoriz) {\n    return (isNegative && !isRtl) || (!isNegative && isRtl) ? barDims.x : barDims.x + barDims.width;\n  }\n  return isNegative ? barDims.height + barDims.y : barDims.y;\n}\n\nexport function getLabelProps(\n  isHoriz: boolean,\n  isRtl: boolean,\n  isNegative: boolean,\n  barDims: Dimension,\n  dataLabelPosition: 'insideBarEdge' | 'outsideBarEdge' | 'center',\n  labelDims?: Dimension\n) {\n  if (!labelDims) {\n    return {};\n  }\n\n  const valueCoord = getValueCoord(isHoriz, isRtl, isNegative, barDims);\n\n  if (dataLabelPosition === 'insideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord + (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET + 2),\n      x: isHoriz\n        ? valueCoord -\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  if (dataLabelPosition === 'outsideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n      x: isHoriz\n        ? valueCoord +\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  return {\n    x: barDims.x + barDims.width / 2,\n    y: barDims.y + barDims.height / 2\n  };\n}\n\nexport function canFitLabel(\n  isHoriz: boolean,\n  labelDims: Dimension,\n  barDims: Dimension,\n  labelPos: 'insideBarEdge' | 'outsideBarEdge' | 'center'\n) {\n  if (isHoriz) {\n    if (labelDims.height > barDims.height) {\n      return false;\n    }\n    if (labelPos != 'outsideBarEdge') {\n      return labelDims.width < barDims.width;\n    }\n    return true;\n  }\n\n  if (labelDims.width > barDims.width) {\n    return false;\n  }\n\n  if (labelPos != 'outsideBarEdge') {\n    return labelDims.height < barDims.height;\n  }\n  return true;\n}\n\nexport const getStackLabelProps = (\n  groupCenterCoord: number,\n  valueCoord: number,\n  isNegative: boolean,\n  isHoriz: boolean,\n  isRtl: boolean,\n  labelDims: Dimension\n) => {\n  return {\n    y: isHoriz\n      ? groupCenterCoord\n      : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n    x: isHoriz\n      ? valueCoord +\n        ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n          (labelDims.width / 2 + LABEL_OFFSET)\n      : groupCenterCoord\n  };\n};\n","import { Scale, Group } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { VisTextStyle } from '#utils/UNSAFE_visUtils';\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getStackLabelProps } from './utils/barItemLabelUtils';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions/textDimensionsUtils';\n\ntype Props<K, D extends BarItemData<K>> = {\n  groupCenter: number;\n  labelStyle?: VisTextStyle;\n  yScale: Scale;\n  defaultFontSize: string;\n  getStackLabel: NonNullable<BarChartProps<K, D>['getStackLabel']>;\n  group: Group;\n  isRtl: boolean;\n  posValue: number;\n  negValue: number;\n  posItemsData: D[];\n  isHoriz: boolean;\n  negItemsData: D[];\n  getTextDimensions: (text: string, font: Font) => Dimension;\n};\n\nexport function StackLabels<K, D extends BarItemData<K>>({\n  groupCenter,\n  getStackLabel,\n  group,\n  posValue,\n  negValue,\n  posItemsData,\n  yScale,\n  isHoriz,\n  isRtl,\n  negItemsData,\n  defaultFontSize,\n  labelStyle,\n  getTextDimensions\n}: Props<K, D>) {\n  const positiveStackLabel = getStackLabel({\n    group,\n    value: posValue,\n    data: posItemsData\n  });\n\n  // default style used for text dims calc. should match with styles.stackLabelStyle\n  const stackLabelStyle = { fontSize: defaultFontSize, fontWeight: 'bold', ...labelStyle };\n\n  const negativeStackLabel =\n    negValue < 0\n      ? getStackLabel?.({\n          group,\n          value: negValue,\n          data: negItemsData\n        })\n      : '';\n\n  const posProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(posValue),\n    false,\n    isHoriz,\n    isRtl,\n    getTextDimensions(positiveStackLabel, stackLabelStyle)\n  );\n  const negProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(negValue),\n    true,\n    isHoriz,\n    isRtl,\n    getTextDimensions(negativeStackLabel, stackLabelStyle)\n  );\n\n  return (\n    <>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...posProps}>\n        {positiveStackLabel}\n      </text>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...negProps}>\n        {negativeStackLabel}\n      </text>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions';\nimport { BarItemData } from './barChart.types';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { canFitLabel, getLabelProps } from './utils/barItemLabelUtils';\nimport { VNode } from 'preact';\nimport { getContrastingTextColor } from '#utils/PRIVATE_colorUtils/colorUtils';\n\ntype Props<K> = {\n  item: BarItemData<K>;\n  seriesColor?: string;\n  isStacked: boolean;\n  defaultFontSize: string;\n  isHoriz: boolean;\n  barDim: Dimension;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  isRtl: boolean;\n};\n\nexport function BarLabel<K>({\n  item,\n  seriesColor,\n  isStacked,\n  defaultFontSize,\n  barDim,\n  isRtl,\n  isHoriz,\n  getTextDimensions\n}: Props<K>) {\n  let label: VNode | null = null;\n  const position =\n    !item.labelPosition || (item.labelPosition === 'outsideBarEdge' && isStacked)\n      ? 'center'\n      : item.labelPosition;\n  const labelString = item.label;\n  const color = item.color || seriesColor;\n  const needsContrastColor = isStacked || !(position === 'outsideBarEdge');\n\n  if (\n    position != 'none' &&\n    labelString &&\n    getTextDimensions &&\n    !(isStacked && position === 'outsideBarEdge')\n  ) {\n    const labelStyle = {\n      fontSize: defaultFontSize,\n      fill: needsContrastColor ? getContrastingTextColor(color!) : undefined,\n      ...item.labelStyle\n    };\n    const labelDims = getTextDimensions(labelString, labelStyle);\n    const canFit = canFitLabel(isHoriz, labelDims, barDim, position || 'center');\n    label = canFit ? (\n      <text\n        class={styles.dataLabelStyle}\n        style={labelStyle}\n        {...getLabelProps(\n          isHoriz,\n          isRtl,\n          item.value < 0,\n          barDim,\n          position || 'center',\n          getTextDimensions?.(labelString, labelStyle)\n        )}>\n        {labelString}\n      </text>\n    ) : null;\n  }\n\n  return label;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Bar } from './Bar';\nimport { BarItemData, BarSeriesData, StackLabelContext } from './barChart.types';\nimport { getBarProps, getRectCoord } from './utils/barItemUtils';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { getBarGapsInfo } from './utils/barSeriesUtils';\nimport { getBaseAndEndCoord } from './utils/barLayoutUtils';\nimport { getMixedFreqGroupCenter } from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { Info, Scale, Group } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { getItemAriaLabel } from '#utils/PRIVATE_chartUtils/accUtils';\nimport { VisTextStyle, supportsMobileScreenReader } from '#utils/UNSAFE_visUtils';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions';\nimport { StackLabels } from './BarChartStackLabel';\nimport { BarLabel } from './BarLabel';\nimport { JSX } from 'preact/jsx-runtime';\n\ntype BarGroupProps<K, D> = {\n  yScale: Scale;\n  xScale: Scale;\n  colors: ColorProps['color'][];\n  series: BarSeriesData<K, D>[];\n  group: Group;\n  timeAxisType?: 'enabled' | 'skipGaps' | 'mixedFrequency';\n  focusedItemInfo?: Info;\n  hoveredItemInfo?: Info;\n  isSelectionEnabled: boolean;\n  selectedIds?: Set<K>;\n  hiddenIds?: Set<K>;\n  highlightedIds?: Set<K>;\n  groupIndex: number;\n  barGapRatio: number;\n  dataItemGaps: number;\n  groupWidth: number;\n  isStacked: boolean;\n  activeId?: string;\n  orientation: 'horizontal' | 'vertical';\n  isDrillEnabled: boolean;\n  isLog: boolean;\n  isRtl: boolean;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  defaultFontSize: string;\n  stacklabelStyle?: VisTextStyle;\n  getStackLabel?: (context: StackLabelContext<D>) => string;\n  seriesIndex?: number;\n};\n\nexport function BarGroup<K extends string | number, D extends BarItemData<K>>({\n  yScale,\n  xScale,\n  colors,\n  series,\n  groupIndex,\n  hiddenIds,\n  barGapRatio,\n  dataItemGaps,\n  groupWidth,\n  highlightedIds,\n  selectedIds,\n  isPointInsideMarquee,\n  orientation,\n  isLog,\n  activeId,\n  getDataItem,\n  isRtl,\n  isStacked,\n  isSelectionEnabled,\n  focusedItemInfo,\n  hoveredItemInfo,\n  isDrillEnabled,\n  group,\n  timeAxisType,\n  getTextDimensions,\n  defaultFontSize,\n  stacklabelStyle,\n  getStackLabel,\n  seriesIndex\n}: BarGroupProps<K, D>) {\n  const isHoriz = orientation === 'horizontal';\n  const items: JSX.Element[] = [];\n  const numSeries = series.length;\n\n  let posCumulativeValue = isLog ? yScale.domain()[0] : 0;\n  let negCumulativeValue = 0;\n\n  const positiveValueItems: D[] = [];\n  const negativeValueItems: D[] = [];\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const isStackLabelRendered = isStacked && !!getStackLabel && timeAxisType != 'mixedFrequency';\n\n  let groupCenter =\n    timeAxisType != 'mixedFrequency'\n      ? xScale.transform(timeAxisType != undefined ? new Date(group.id).getTime() : groupIndex)\n      : undefined;\n\n  const processSeries = (_seriesIndex: number) => {\n    const item = getDataItem(_seriesIndex, groupIndex);\n    if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n      return;\n    }\n\n    if (timeAxisType === 'mixedFrequency') {\n      groupCenter = getMixedFreqGroupCenter<K, D>(xScale, item);\n    }\n\n    const isFocused =\n      focusedItemInfo?.groupIndex === groupIndex &&\n      focusedItemInfo?.seriesIndex === _seriesIndex &&\n      focusedItemInfo?.isFocusVisible;\n    const isHovered =\n      hoveredItemInfo?.groupIndex === groupIndex &&\n      hoveredItemInfo?.seriesIndex === _seriesIndex &&\n      hoveredItemInfo?.isCurrent;\n    const isFocusVisible = !!isFocused || (!!isHovered && isSelectionEnabled);\n    const isActive = (isFocused && focusedItemInfo.isCurrent) || isHovered;\n    const isHighlighted =\n      highlightedIds === undefined || highlightedIds.size === 0 || highlightedIds.has(item.id);\n\n    const isDrillable = item.drilling === 'on' || (item.drilling != 'off' && isDrillEnabled);\n\n    const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n      _seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    const x1 = groupCenter! + offset;\n    const x2 = x1 + barWidth;\n\n    const { baselineCoord, endCoord } = getBaseAndEndCoord(\n      item.value,\n      yScale,\n      isStacked,\n      isLog,\n      itemsGaps,\n      negCumulativeValue,\n      posCumulativeValue\n    );\n\n    negCumulativeValue += item.value < 0 ? item.value : 0;\n    posCumulativeValue += item.value > 0 ? item.value : 0;\n\n    if (isStackLabelRendered) {\n      if (item.value >= 0) {\n        positiveValueItems.push(item);\n      } else {\n        negativeValueItems.push(item);\n      }\n    }\n\n    const barprops = getBarProps(item, series[_seriesIndex], colors?.[_seriesIndex]);\n    const rectParam = getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n    const isSelected = isPointInsideMarquee\n      ? isPointInsideMarquee?.(item.id, {\n          x: rectParam.x + rectParam.width / 2,\n          y: rectParam.y\n        })\n      : selectedIds?.has(item.id!);\n\n    const ariaLabel =\n      supportsMobileScreenReader || isActive\n        ? getItemAriaLabel(\n            translations,\n            series[_seriesIndex].name || series[_seriesIndex].id.toString(),\n            group.name || group.id,\n            isSelectionEnabled,\n            !!isSelected,\n            isDrillable,\n            item.accessibleLabel,\n            item.value\n          )\n        : '';\n\n    items.push(\n      <>\n        <Bar\n          {...rectParam}\n          {...barprops}\n          seriesIndex={_seriesIndex}\n          groupIndex={groupIndex}\n          isFocused={isFocusVisible}\n          activeId={isActive ? activeId : ''}\n          aria-label={ariaLabel}\n          isDimmed={!isHighlighted}\n          isSelected={!!isSelected}\n          isPointerEnabled={isDrillable || isSelectionEnabled}\n          key={`${groupIndex};${_seriesIndex}`}\n        />\n        <BarLabel\n          item={item}\n          isRtl={isRtl}\n          seriesColor={colors[_seriesIndex % 12]}\n          isStacked={isStacked}\n          defaultFontSize={defaultFontSize}\n          barDim={rectParam}\n          isHoriz={isHoriz}\n          getTextDimensions={getTextDimensions}\n        />\n      </>\n    );\n  };\n\n  if (seriesIndex !== undefined) {\n    processSeries(seriesIndex);\n  } else {\n    series.forEach((_, index) => processSeries(index));\n  }\n\n  return (\n    <>\n      {items}\n      {isStackLabelRendered && getTextDimensions && (\n        <StackLabels\n          group={group}\n          isRtl={isRtl}\n          yScale={yScale}\n          getStackLabel={getStackLabel}\n          defaultFontSize={defaultFontSize}\n          getTextDimensions={getTextDimensions}\n          posItemsData={positiveValueItems}\n          negItemsData={negativeValueItems}\n          isHoriz={isHoriz}\n          groupCenter={groupCenter!}\n          labelStyle={stacklabelStyle}\n          posValue={posCumulativeValue}\n          negValue={negCumulativeValue}\n        />\n      )}\n    </>\n  );\n}\n"],"names":["IDEAL_DATA_ITEM_GAP","getBarGapsInfo","seriesIndex","groupWidth","barGapRatio","numOfSeries","dataItemGaps","isStacked","isRtl","numSeries","itemsGaps","barWidth","offset","center","seriesStart","HOVERED_INNER_INSET","SELECTED_INNER_INSET","Bar","props","isSelected","isFocused","_jsx","jsx","InteractiveBar","x","y","groupIndex","role","undefined","id","activeId","style","width","height","fill","stroke","strokeWidth","class","classNames","isPointerEnabled","styles","cursorEnable","isDimmed","dimmed","inset","_jsxs","jsxs","className","children","selectedBorder","contrastBorder","getRectCoord","x1","x2","endCoord","baselineCoord","isHoriz","x_1","x_2","Math","floor","abs","getBaseAndEndCoord","value","yScale","isLog","negCummulativeValue","posCummulativeValue","transform","range","LABEL_OFFSET","getLabelProps","isNegative","barDims","dataLabelPosition","labelDims","valueCoord","getValueCoord","getStackLabelProps","groupCenterCoord","StackLabels","groupCenter","getStackLabel","group","posValue","negValue","posItemsData","negItemsData","defaultFontSize","labelStyle","getTextDimensions","positiveStackLabel","data","stackLabelStyle","fontSize","fontWeight","negativeStackLabel","posProps","negProps","_Fragment","Fragment","BarLabel","item","seriesColor","barDim","label","position","labelPosition","labelString","color","getContrastingTextColor","canFit","labelPos","canFitLabel","dataLabelStyle","xScale","colors","series","hiddenIds","highlightedIds","selectedIds","isPointInsideMarquee","orientation","getDataItem","isSelectionEnabled","focusedItemInfo","hoveredItemInfo","isDrillEnabled","timeAxisType","stacklabelStyle","items","length","posCumulativeValue","domain","negCumulativeValue","positiveValueItems","negativeValueItems","translations","useTranslationBundle","isStackLabelRendered","Date","getTime","processSeries","_seriesIndex","has","getMixedFreqGroupCenter","isFocusVisible","isHovered","isCurrent","isActive","isHighlighted","size","isDrillable","drilling","push","barprops","borderColor","getBarProps","rectParam","ariaLabel","supportsMobileScreenReader","getItemAriaLabel","name","toString","accessibleLabel","_createElement","key","forEach","_","index","negCummValue","posCummValue","startIndex","endIndex","groups","xVal","val","dataWidth"],"mappings":"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"}