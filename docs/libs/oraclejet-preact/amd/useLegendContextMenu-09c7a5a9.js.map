{"version":3,"file":"useLegendContextMenu-09c7a5a9.js","sources":["../../src/UNSAFE_Legend/LegendImageMarker.tsx","../../src/UNSAFE_Legend/LegendSymbol.tsx","../../src/UNSAFE_Legend/LegendText.tsx","../../src/utils/PRIVATE_legendUtils/legendUtils.ts","../../src/PRIVATE_BaseLegend/BaseLegendItem.tsx","../../src/UNSAFE_Legend/useLegendDatatip.ts","../../src/UNSAFE_Legend/useLegendLayout.ts","../../src/PRIVATE_BaseLegend/BaseLegend.tsx","../../src/PRIVATE_BaseLegend/useLegendContextMenu.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from './themes/LegendStyles.css';\n\ntype ImageMarkerProps = {\n  source: string;\n};\n\nexport function ImageMarker(props: ImageMarkerProps) {\n  const { imageMarkerStyle } = styles;\n  return <img class={imageMarkerStyle} src={props.source} />;\n}\n","import { SvgSymbol } from '../PRIVATE_SvgShapes';\nimport { ImageMarker } from './LegendImageMarker';\nimport { Property } from 'csstype';\nimport { styles } from './themes/LegendStyles.css';\nimport { SymbolProps } from '../utils/UNSAFE_visTypes/legend';\n\ntype LegendSymbolProps = {\n  isHidden?: boolean;\n  lineLength?: number;\n  width?: Property.Width;\n  height?: Property.Height;\n  borderColor?: Property.Color;\n} & SymbolProps;\n\nexport const LegendSymbol = ({\n  // The default color is not in the redwood pallete.\n  // TODO: replace default legend color with UX approved pallete color when available.\n  markerColor = '#a6acb1',\n  lineColor = '#a6acb1',\n  markerShape = 'square',\n  isHidden = false,\n  lineStyle = 'none',\n  ...props\n}: LegendSymbolProps) => {\n  const { legendSymbolBaseStyle } = styles;\n  const dimensionsNotSet = props.width == null && props.height == null;\n  const setAspectRatioNone =\n    !dimensionsNotSet && (markerShape === 'rectangle' || markerShape === 'ellipse');\n  const defaultLineWidth = lineStyle != 'none' && markerShape != 'none' ? 2 : 3;\n  return (\n    <div className={legendSymbolBaseStyle} style={{ width: props.width, height: props.height }}>\n      {props.source ? (\n        <ImageMarker source={props.source} />\n      ) : (\n        <SvgSymbol\n          setAspectRatioNone={setAspectRatioNone}\n          markerShape={isHidden ? 'square' : markerShape}\n          lineStyle={isHidden ? 'none' : lineStyle}\n          lineColor={lineColor}\n          lineLength={props.lineLength}\n          lineWidth={props.lineWidth != null ? props.lineWidth : defaultLineWidth}\n          markerColor={isHidden ? 'transparent' : markerColor}\n          borderColor={isHidden ? markerColor || lineColor : props.borderColor}\n          setAbsolutePos={true}\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Text } from '../UNSAFE_Text';\nimport { Property } from 'csstype';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\n\ntype LegendTextProps = {\n  text: string;\n  type: 'label' | 'title';\n  fontStyle?: Property.FontStyle;\n  fontSize?: Property.FontSize;\n  fontWeight?: Property.FontWeight;\n  textDecoration?: Property.TextDecoration;\n  color?: Property.Color;\n  fontFamily?: Property.FontFamily;\n  id?: string;\n  align?: 'start' | 'center' | 'end';\n};\n\n/**\n * Returns the legend text component.\n */\nexport const LegendText = ({\n  text,\n  type = 'label',\n  id,\n  align = 'start',\n  ...props\n}: LegendTextProps) => {\n  const {\n    legendTextBaseStyle,\n    legendTextTitle,\n    legendTitleStartAlign,\n    legendTitleCenterAlign,\n    legendTitleEndAlign\n  } = styles;\n  const isTitle = type === 'title';\n  return (\n    <div\n      class={classNames([\n        legendTextBaseStyle,\n        isTitle ? legendTextTitle : '',\n        isTitle && align === 'start' ? legendTitleStartAlign : '',\n        isTitle && align === 'center' ? legendTitleCenterAlign : '',\n        isTitle && align === 'end' ? legendTitleEndAlign : ''\n      ])}\n      style={{\n        ...props\n      }}>\n      <Text size=\"inherit\" variant=\"inherit\" weight=\"inherit\" truncation={'ellipsis'} id={id}>\n        {text}\n      </Text>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { HTMLAttributesSignalExcluded } from '../UNSAFE_attributeUtils';\nimport { LayoutInfo } from '../../UNSAFE_Legend/useLegendLayout';\nimport { dvtVars } from '../../Common/themes/themeContract.css';\nimport { xUnits } from '../../UNSAFE_Theme/utils';\nimport { Font } from '../../hooks/PRIVATE_useTextDimensions';\nimport { styles } from '../../UNSAFE_Legend/themes/LegendStyles.css';\nimport { ItemInfo, LegendItemData, LegendSectionData } from '../UNSAFE_visTypes/legend';\nimport { cancelEvent } from '../../utils/UNSAFE_visUtils/eventsUtils';\n\n/**\n * Returns the value of the data-oj-item-index attribute for a given element.\n * @param element The HTML element.\n * @returns\n */\nexport const getItemInfo = (element: HTMLElement) => {\n  const item = element.dataset['ojItem'];\n  const section = element.dataset['ojSection'];\n\n  if (item == null || section == null) {\n    return;\n  }\n  return {\n    itemIdx: Number(item),\n    sectionIdx: Number(section)\n  };\n};\n\n/**\n * Checks if the item is highlighted.\n * @param id Id of the item\n * @param highlighted The set of highlighted item\n */\nexport function isItemHighlighted<K>(id: K, highlighted?: K[]) {\n  if (!highlighted) {\n    return;\n  }\n  if (highlighted.length === 0) {\n    return true;\n  }\n  return new Set(highlighted).has(id);\n}\n\n/**\n * Checks if the item is hidden.\n * @param id Id of the item.\n * @param hiddenIds The set of hidden items.\n * @returns\n */\nexport function isItemHidden<K>(id: K, hiddenIds?: K[]) {\n  if (!hiddenIds) {\n    return;\n  }\n  return new Set(hiddenIds).has(id);\n}\n/**\n * Checks if the item is the currentItem and if the focus ring\n * is visible.\n * @param itemInfo ItemInfo\n * @param itemIdx Item index\n * @param sectionIdx Section index\n */\nexport const hasFocusRing = (itemInfo: ItemInfo, itemIdx: number, sectionIdx?: number) => {\n  if (!itemInfo.isFocusVisible) return false;\n  const { itemIdx: item, sectionIdx: section } = itemInfo;\n\n  if (sectionIdx == null) {\n    return item === itemIdx;\n  }\n  return item === itemIdx && section === sectionIdx;\n};\n\n/**\n * Returns the text for the legend datatip.\n * @param items The legend items data.\n * @param itemInfoRef The item currently hovered.\n * @param currentItem The item that is currently keyboard focused.\n */\nexport function getDatatipText<K, D extends LegendItemData<K>>(\n  items: LegendItemData<K>[] | LegendSectionData<K, D>[],\n  getItem: (\n    itemInfo: ItemInfo,\n    items: LegendItemData<K>[] | LegendSectionData<K, D>[]\n  ) => LegendItemData<K> | undefined,\n  focusedItem: ItemInfo,\n  hoveredItem?: ItemInfo\n) {\n  const isPointerActive = hoveredItem?.isCurrent;\n\n  if (isPointerActive && hoveredItem.itemIdx != null) {\n    return getItem(hoveredItem, items)?.datatip;\n  }\n  if (focusedItem && focusedItem.isCurrent) {\n    return getItem(focusedItem, items)?.datatip;\n  }\n  return;\n}\n\n/**\n * Returns the aria properties for the legend.\n * @param isReadOnly { boolean } If the legend is readonly.\n * @param ariaLabel { string } The aria-label set by the app.\n * @returns The aria props.\n */\nexport function getAriaProps<K>(\n  isReadOnly?: boolean,\n  ariaLabel?: string,\n  hiddenIds?: K[],\n  ariaDescribedBy?: string,\n  ariaLabelledBy?: string\n): {\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  'aria-disabled'?: HTMLAttributesSignalExcluded['aria-disabled'];\n  'aria-describedby': HTMLAttributesSignalExcluded['aria-describedby'];\n  'aria-labelledby': HTMLAttributesSignalExcluded['aria-labelledby'];\n  role?: HTMLAttributesSignalExcluded['role'];\n} {\n  const hideAndShow = hiddenIds && !isReadOnly;\n  return {\n    'aria-label': ariaLabel,\n    'aria-disabled': isReadOnly,\n    role: hideAndShow ? 'menu' : 'application',\n    'aria-describedby': ariaDescribedBy,\n    'aria-labelledby': ariaLabelledBy\n  };\n}\n\n/**\n * Returns the item props for BaseLegendItem.\n * @param item The legend item.\n * @param itemIdx The item index of the item.\n * @param sectionIdx The section index of section of the item.\n * @param focusedItem The info of currently focused item.\n * @param isReadOnly Whether the legend is readonly.\n * @param hoveredItem The info of the currently hovered item.\n * @param hiddenIds The hidden ids.\n * @param highlightedIds The highlighted ids.\n */\nexport function getItemProps<K>(\n  item: LegendItemData<K>,\n  itemIdx: number,\n  sectionIdx: number | undefined,\n  focusedItem: ItemInfo,\n  isReadOnly?: boolean,\n  hoveredItem?: ItemInfo,\n  hiddenIds?: K[],\n  highlightedIds?: K[]\n) {\n  let isCurrent = false;\n  if (!isReadOnly) {\n    const isFocusedItem = itemIdx === focusedItem.itemIdx && sectionIdx === focusedItem.sectionIdx;\n    const isHoveredItem =\n      itemIdx === hoveredItem?.itemIdx && sectionIdx === hoveredItem?.sectionIdx;\n    isCurrent = !!(\n      (isFocusedItem && focusedItem.isCurrent) ||\n      (isHoveredItem && hoveredItem?.isCurrent)\n    );\n  }\n\n  return {\n    isCurrent,\n    isHighlighted: isItemHighlighted<K>(item.id, highlightedIds),\n    isHidden: isItemHidden(item.id, hiddenIds),\n    isFocused: hasFocusRing(focusedItem, itemIdx, sectionIdx),\n    key: item.id,\n    ...item\n  };\n}\n\n/**\n * Compares if two ItemInfo are equal\n * @param item1\n * @param item2\n * @returns\n */\nexport const isEqualItem = (item1?: ItemInfo, item2?: ItemInfo) => {\n  return item1?.itemIdx === item2?.itemIdx && item1?.sectionIdx === item2?.sectionIdx;\n};\n\n/**\n * Returns the num of cols and rows for the legend.\n */\nexport const getGridNums = (numItems: number, layoutInfo?: LayoutInfo) => {\n  let itemsPerRow;\n  let itemsPerCol;\n\n  if (layoutInfo?.isWrapped) {\n    itemsPerRow = layoutInfo.itemsPerRow;\n    itemsPerCol = Math.ceil(numItems / itemsPerRow);\n    itemsPerRow = Math.ceil(numItems / itemsPerCol);\n  }\n\n  return { itemsPerRow, itemsPerCol };\n};\n\n/**\n * Returns the grid row and column for given item.\n * @param noOfItems The number of items in the section.\n * @param index The index of the item.\n * @param itemsPerRow The num of items per row in the grid.\n * @param itemsPerCol The num of items per col in the grid.\n * @returns\n */\nexport function getGridCellIndices(\n  noOfItems: number,\n  index: number,\n  itemsPerRow?: number,\n  itemsPerCol?: number\n) {\n  let gridRow;\n  let gridCol;\n\n  if (itemsPerRow && itemsPerCol && noOfItems > itemsPerRow) {\n    gridRow = (index % itemsPerCol) + 1;\n    gridCol = Math.floor(index / itemsPerCol) + 1;\n  }\n  return { gridRow, gridCol };\n}\n\n/**\n * Returns the resolved values for the legend vars.\n */\n\nexport const legendVars = [\n  {\n    tokenVar: xUnits(1),\n    key: 'unit',\n    cssProp: 'padding'\n  },\n  {\n    tokenVar: dvtVars.label.sm.fontSize,\n    key: 'fontSize',\n    cssProp: 'font-size'\n  }\n];\n\n/**\n * Returns the resolved values for the legend vars.\n */\nexport function getLegendTextStyle(props: Font, resolvedVars: Record<string, any>) {\n  return {\n    fontStyle: props.fontStyle,\n    fontSize: (resolvedVars['fontSize'] ?? props.fontSize) as string | undefined,\n    fontWeight: props.fontWeight,\n    fontFamily: props.fontFamily\n  };\n}\n\n/**\n * Returns the style for current legend item.\n */\nexport function getLegendCurrentItemStyle(\n  isCurrent: boolean,\n  isHighlighted: boolean | undefined,\n  hideAndShowBehavior: 'on' | 'off',\n  hoverBehavior: 'dim' | 'none',\n  isHidden: boolean | undefined,\n  actionable: 'inherit' | 'off'\n) {\n  if (isCurrent) {\n    if (isHighlighted == null && isHidden == null && actionable !== 'off')\n      return styles.legendItemIsCurrentWithCursor;\n    else if (isHighlighted == null && hideAndShowBehavior === 'on' && actionable !== 'off')\n      return styles.legendItemIsCurrentWithCursor;\n    else if (isHidden == null && hoverBehavior === 'dim' && actionable !== 'off')\n      return styles.legendItemIsCurrentWithoutCursor;\n  }\n  return '';\n}\n\nexport function getIsLegendItemActionable(\n  legendData: any[],\n  isReadOnly: boolean,\n  isSectional?: boolean\n) {\n  return (itemInfo: ItemInfo) => {\n    let item;\n    if (isSectional && itemInfo.sectionIdx != null) {\n      item = legendData[itemInfo.sectionIdx].items[itemInfo.itemIdx];\n    } else {\n      item = legendData[itemInfo.itemIdx];\n    }\n    return !isReadOnly && item?.actionable !== 'off';\n  };\n}\n/*\n * Returns KeyUp handler for legend.\n * @param triggerOnAction\n * @param updatefocusedItemInfo\n * @param focusedItemInfo\n * @returns\n */\nexport function getKeyUpHandler(\n  triggerOnAction: () => void,\n  updatefocusedItemInfo: (itemInfo: ItemInfo) => void,\n  focusedItemInfo: ItemInfo,\n  isHideShow?: boolean\n) {\n  return (event: KeyboardEvent) => {\n    const key = event.code;\n    switch (key) {\n      case 'Space': {\n        if (isHideShow) {\n          triggerOnAction();\n          cancelEvent(event);\n        }\n        break;\n      }\n      case 'Enter': {\n        triggerOnAction();\n        cancelEvent(event);\n        break;\n      }\n      case 'Home': {\n        updatefocusedItemInfo({\n          itemIdx: 0,\n          sectionIdx: 0,\n          isFocusVisible: true,\n          isCurrent: true\n        });\n        cancelEvent(event);\n        break;\n      }\n      case 'End': {\n        updatefocusedItemInfo({\n          itemIdx: -1,\n          sectionIdx: -1,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        cancelEvent(event);\n        break;\n      }\n      case 'Tab': {\n        updatefocusedItemInfo({\n          ...focusedItemInfo,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        cancelEvent(event);\n        break;\n      }\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { LegendSymbol } from '../UNSAFE_Legend/LegendSymbol';\nimport { LegendText } from '../UNSAFE_Legend/LegendText';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { styles } from '../UNSAFE_Legend/themes/LegendStyles.css';\nimport { getLegendCurrentItemStyle } from '../utils/PRIVATE_legendUtils/legendUtils';\nimport { SymbolProps, TextStylesProps } from '../utils/UNSAFE_visTypes/legend';\n\ntype BaseLegendItemProps = {\n  text: string;\n  itemIdx: number;\n  sectionIdx: number;\n  isCurrent: boolean;\n  isFocused: boolean;\n  isHighlighted?: boolean;\n  isHidden?: boolean;\n  symbolWidth?: number;\n  symbolHeight?: number;\n  id?: string;\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  class?: string;\n  minWidth?: number;\n  gridCol?: number;\n  gridRow?: number;\n  hideAndShowBehavior?: 'on' | 'off';\n  actionable?: 'off' | 'inherit';\n  hoverBehavior?: 'dim' | 'none';\n} & SymbolProps &\n  TextStylesProps;\n\nexport const BaseLegendItem = forwardRef(\n  (\n    {\n      id,\n      text,\n      sectionIdx,\n      itemIdx,\n      isHighlighted,\n      symbolHeight,\n      symbolWidth,\n      isFocused,\n      isCurrent,\n      isHidden,\n      actionable = 'inherit',\n      hoverBehavior = 'none',\n      hideAndShowBehavior = 'off',\n      ...props\n    }: BaseLegendItemProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const textStyles = {\n      fontFamily: props.textFontFamily,\n      fontSize: props.textFontSize,\n      color: props.textColor,\n      fontStyle: props.textFontStyle,\n      fontWeight: props.textFontWeight,\n      textDecoration: props.textTextDecoration\n    };\n\n    const symbolProps = {\n      lineStyle: props.lineStyle,\n      lineWidth: props.lineWidth,\n      markerShape: props.markerShape,\n      markerColor: props.markerColor,\n      source: props.source,\n      borderColor: props.borderColor,\n      lineColor: props.lineColor\n    };\n\n    const isNotDimmed = isHighlighted || isHighlighted == null;\n    const { legendItemBaseStyle, legendItemOpacity, legendItemFocusRing } = styles;\n\n    return (\n      <div\n        class={classNames([\n          legendItemBaseStyle,\n          getLegendCurrentItemStyle(\n            isCurrent,\n            isHighlighted,\n            hideAndShowBehavior,\n            hoverBehavior,\n            isHidden,\n            actionable\n          ),\n          !isNotDimmed ? legendItemOpacity : '',\n          isFocused ? legendItemFocusRing : '',\n          props.class\n        ])}\n        style={{\n          gridRow: props.gridRow,\n          gridColumn: props.gridCol,\n          minWidth: props.minWidth !== undefined ? `${props.minWidth}px` : undefined\n        }}\n        id={id}\n        ref={ref}\n        data-oj-section={sectionIdx}\n        data-oj-item={itemIdx}\n        role={isHidden != null ? 'menuitemcheckbox' : 'img'}\n        aria-checked={isHidden != null ? !isHidden : undefined}\n        aria-label={props['aria-label'] || text}>\n        <LegendSymbol\n          {...symbolProps}\n          isHidden={isHidden}\n          lineLength={symbolWidth}\n          width={symbolWidth != null ? `${symbolWidth}px` : undefined}\n          height={symbolHeight != null ? `${symbolHeight}px` : undefined}\n        />\n        <LegendText {...textStyles} text={text} type=\"label\" />\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MutableRef, Ref, useLayoutEffect, useState } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ItemInfo } from '../utils/UNSAFE_visTypes/legend';\nimport { DATATIP_OFFSET } from '#utils/UNSAFE_visUtils/datatipUtils';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\n\ntype props = {\n  text?: string;\n  rootDimsRef: MutableRef<DOMRect | undefined>;\n  focusedItemRef: Ref<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n  touchResponse: 'touchStart' | 'touchHold';\n};\n\n/**\n * Calculate the datatip offset for datatip when keyboard focus is active.\n * @param focusedItemRef The ref for currentItem node.\n * @param rootRef The ref for root of the legend.\n * @param currentItem The ItemInfo of the current keyboard focused item.\n * @returns\n */\nconst calculateOffset = (\n  focusedItemRef: Ref<HTMLDivElement>,\n  rootDimsRef: MutableRef<DOMRect | undefined>,\n  currentItem: ItemInfo,\n  isRtl: boolean\n) => {\n  let crossAxis = 0;\n  let mainAxisOffset = DATATIP_OFFSET;\n  if (focusedItemRef.current && currentItem.isCurrent && rootDimsRef.current) {\n    const rootDim = rootDimsRef.current;\n    const itemDim = focusedItemRef.current.getBoundingClientRect();\n    crossAxis = itemDim.x + itemDim.width / 2 - (rootDim.x + rootDim.width / 2);\n    crossAxis = isRtl ? -1 * crossAxis : crossAxis;\n    mainAxisOffset += rootDim.y - itemDim.y;\n    mainAxisOffset = Math.min(\n      DATATIP_OFFSET,\n      Math.max(mainAxisOffset, itemDim.height - rootDim.height + DATATIP_OFFSET)\n    );\n  }\n  return { crossAxis, mainAxis: mainAxisOffset };\n};\n\nexport const useLegendDatatip = ({\n  text,\n  rootDimsRef,\n  focusedItemRef,\n  focusedItemInfo,\n  touchResponse\n}: props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const [offset, setOffset] = useState<{ mainAxis?: number; crossAxis?: number }>(\n    calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl)\n  );\n\n  useLayoutEffect(() => {\n    setOffset(calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl));\n  }, [focusedItemInfo, focusedItemRef, isRtl, rootDimsRef]);\n\n  const anchor = focusedItemInfo?.isCurrent ? 'element' : 'pointer';\n\n  return useDatatip({\n    content: text,\n    placement: 'top',\n    anchor,\n    offset,\n    touchResponse\n  });\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { RefObject } from 'preact';\nimport { useMemo, useRef, useLayoutEffect, useState } from 'preact/hooks';\nimport { Font, GetTextDimensionsType, useTextDimensions } from '../hooks/PRIVATE_useTextDimensions';\nimport { LegendItemData, LegendSectionData } from '../utils/UNSAFE_visTypes/legend';\n\ntype Props<K, D extends LegendItemData<K>> = {\n  sections?: LegendSectionData<K, D>[];\n  items?: LegendItemData<K>[];\n  resolvedVars: Record<string, any>;\n  rootRef: RefObject<HTMLDivElement>;\n  rootDimsRef: RefObject<DOMRect | undefined>;\n  orientation?: 'vertical' | 'horizontal';\n  legendFontStylesObj?: Font;\n  symbolWidth?: number;\n};\n\nexport type LayoutInfo = {\n  isWrapped: boolean;\n  maxItemWidth: number;\n  itemsPerRow: number;\n};\n\n/**\n * Returns maximum of the width among the items in a section of legend also return the width of the entire section.\n * @param items Legend items array\n * @param unitLength Base  element\n * @param getTextDimensions Text width measurement function\n * @param legendFontStylesObj Legend text font style properties object\n * @param symbolWidth Width of legend symbol\n * @returns\n */\nconst getMaxWidth = <K>(\n  items: LegendItemData<K>[],\n  unitLength: number,\n  getTextDimensions: GetTextDimensionsType,\n  legendFontStylesObj?: Font,\n  symbolWidth?: number\n) => {\n  let maxItemWidth = 0;\n  let horizontalSectionWidth = 0;\n  let itemSymbolWidth = 0;\n  if (symbolWidth) {\n    itemSymbolWidth = unitLength * 1.5 + symbolWidth;\n  } else {\n    //itemSymbolWidth = marginLeft + marginRight + width below expression is simplified\n    itemSymbolWidth = 4 * unitLength;\n  }\n  items?.forEach((item) => {\n    const legendItem = item as LegendItemData<K>;\n    const { width } = getTextDimensions(legendItem.text, legendFontStylesObj);\n    //itemTextWidth = paddingLeft + paddingRight + width\n    const itemTextWidth = unitLength * 2.5 + width;\n    //horizontalSectionWidth = total width of the section\n    horizontalSectionWidth += itemSymbolWidth + itemTextWidth;\n    maxItemWidth = Math.max(maxItemWidth, Math.ceil(itemSymbolWidth + itemTextWidth));\n  });\n\n  return { maxItemWidth, horizontalSectionWidth };\n};\n\nexport function useLegendLayout<K, D extends LegendItemData<K>>({\n  resolvedVars,\n  sections,\n  items,\n  rootRef,\n  rootDimsRef,\n  orientation,\n  legendFontStylesObj = {},\n  symbolWidth\n}: Props<K, D>) {\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  const orientationRef = useRef(orientation);\n  const hasOrientationChanged = orientationRef.current !== orientation;\n  const [needsRerender, setRerender] = useState(false);\n\n  useLayoutEffect(() => {\n    if (hasOrientationChanged) {\n      //rerender the Legend\n      orientationRef.current = orientation;\n      setRerender(!needsRerender);\n    }\n  }, [hasOrientationChanged, needsRerender, orientation]);\n\n  const layoutInfo = useMemo(() => {\n    if (\n      !rootRef.current ||\n      !Object.keys(resolvedVars).length ||\n      !getTextDimensions ||\n      hasOrientationChanged ||\n      orientation === 'vertical'\n    ) {\n      return;\n    }\n    const unitLength = parseFloat(resolvedVars['unit']);\n    // recalculate rootDims everytime items change.\n    rootDimsRef.current = rootRef?.current?.getBoundingClientRect();\n    let maxWidth = 0;\n    let isWrapped = false;\n    if (sections) {\n      sections.forEach((section) => {\n        const { maxItemWidth, horizontalSectionWidth } = getMaxWidth(\n          section.items,\n          unitLength,\n          getTextDimensions,\n          legendFontStylesObj,\n          symbolWidth\n        );\n\n        if (!isWrapped) {\n          isWrapped = horizontalSectionWidth > Math.ceil(rootDimsRef.current?.width!);\n        }\n        maxWidth = Math.max(maxWidth, maxItemWidth);\n      });\n    }\n    if (items) {\n      const { maxItemWidth, horizontalSectionWidth } = getMaxWidth(\n        items,\n        unitLength,\n        getTextDimensions,\n        legendFontStylesObj,\n        symbolWidth\n      );\n      maxWidth = maxItemWidth;\n      isWrapped = horizontalSectionWidth > Math.ceil(rootDimsRef.current?.width!);\n    }\n    const legendLayoutInfo = {\n      maxItemWidth: Math.min(maxWidth, rootDimsRef.current?.width!),\n      itemsPerRow: Math.max(1, Math.floor(rootDimsRef.current?.width! / maxWidth)),\n      isWrapped\n    };\n    return legendLayoutInfo;\n  }, [\n    sections,\n    items,\n    rootDimsRef,\n    rootRef,\n    legendFontStylesObj,\n    resolvedVars,\n    symbolWidth,\n    getTextDimensions,\n    orientation,\n    hasOrientationChanged\n  ]);\n\n  return {\n    textMeasureContent,\n    layoutInfo\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BaseLegendItem } from './BaseLegendItem';\nimport { getItemProps, getGridCellIndices } from '../utils/PRIVATE_legendUtils/legendUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from '../UNSAFE_Legend/themes/LegendStyles.css';\nimport { BaseLegendProps, LegendItemData } from '../utils/UNSAFE_visTypes/legend';\n\n/**\n * The controlled legend reponsible only for rendering the legend items.\n */\nexport const BaseLegend = <\n  K extends string | number,\n  D extends LegendItemData<K> = LegendItemData<K>\n>({\n  orientation = 'horizontal',\n  highlightedIds,\n  hiddenIds,\n  focusedItemInfo,\n  hoveredItemInfo,\n  sectionIdx,\n  activeId,\n  isReadOnly,\n  items,\n  symbolHeight,\n  symbolWidth,\n  hideAndShowBehavior = 'off',\n  hoverBehavior = 'none',\n  ...props\n}: BaseLegendProps<K, D>) => {\n  const isHoriz = orientation === 'horizontal';\n  const columTemplates = isHoriz ? `repeat(${props.itemsPerRow}, ${props.itemWidth})` : undefined;\n  const {\n    baseLegendStyles,\n    baseLegendHorizontal,\n    baseLegendVertical,\n    baseLegendVerticalItem,\n    baseLegendPaddingBottom,\n    baseLegendPaddingTop,\n    baseLegendPaddingEnd\n  } = styles;\n\n  return (\n    <div\n      className={classNames([\n        baseLegendStyles,\n        isHoriz ? baseLegendHorizontal : baseLegendVertical\n      ])}\n      style={{\n        gridTemplateColumns: columTemplates,\n        // set maxWidth to 100% on second render for text truncation to work.\n        maxWidth: '100%'\n      }}>\n      {items.map((item: LegendItemData<K>, index: number) => {\n        const {\n          markerColor,\n          markerShape,\n          source,\n          borderColor,\n          lineColor,\n          isCurrent,\n          isFocused,\n          isHidden,\n          isHighlighted,\n          key,\n          actionable,\n          text,\n          lineStyle,\n          lineWidth\n        } = getItemProps<K>(\n          item,\n          index,\n          sectionIdx,\n          focusedItemInfo,\n          isReadOnly,\n          hoveredItemInfo,\n          hiddenIds,\n          highlightedIds\n        );\n        const isFocusedItem =\n          focusedItemInfo.sectionIdx === sectionIdx && focusedItemInfo.itemIdx === index;\n        const { gridRow, gridCol } = getGridCellIndices(\n          items.length,\n          index,\n          props.itemsPerRow,\n          props.itemsPerCol\n        );\n        const needsBottomSpace = gridRow != null && gridRow != props.itemsPerCol;\n        const needsTopSpace = gridRow != null && gridRow != 1;\n        return (\n          <BaseLegendItem\n            ref={isFocusedItem ? props.focusedItemRef : undefined}\n            text={text}\n            itemIdx={index}\n            sectionIdx={sectionIdx}\n            symbolHeight={symbolHeight}\n            symbolWidth={symbolWidth}\n            markerColor={markerColor}\n            markerShape={markerShape}\n            lineStyle={lineStyle}\n            lineWidth={lineWidth}\n            source={source}\n            borderColor={borderColor}\n            aria-label={item['aria-label']}\n            lineColor={lineColor}\n            isCurrent={isCurrent}\n            isFocused={isFocused}\n            isHidden={isHidden}\n            isHighlighted={isHighlighted}\n            key={key}\n            gridRow={gridRow}\n            gridCol={gridCol}\n            minWidth={props.itemWidth}\n            id={isCurrent ? activeId : ''}\n            textColor={props.textColor}\n            textFontFamily={props.textFontFamily}\n            textFontSize={props.textFontSize}\n            textFontStyle={props.textFontStyle}\n            textFontWeight={props.textFontWeight}\n            textTextDecoration={props.textTextDecoration}\n            class={classNames([\n              isHoriz ? '' : baseLegendVerticalItem,\n              needsTopSpace ? baseLegendPaddingTop : '',\n              needsBottomSpace ? baseLegendPaddingBottom : '',\n              baseLegendPaddingEnd\n            ])}\n            hideAndShowBehavior={hideAndShowBehavior}\n            hoverBehavior={hoverBehavior}\n            actionable={actionable}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Ref } from 'preact/hooks';\nimport {\n  LegendContextMenuContext,\n  LegendContextMenuConfig,\n  ItemInfo,\n  LegendSectionData\n} from '../utils/UNSAFE_visTypes/legend';\nimport { type gestureTypes, useContextMenu } from '../hooks/PRIVATE_useVisContextMenu';\nimport { getItemInfo } from '../utils/PRIVATE_legendUtils/legendUtils';\n\ntype Props<D, S> = {\n  isReadOnly: boolean;\n  rootRef: Ref<HTMLDivElement>;\n  contextMenuConfig?: LegendContextMenuConfig<D>;\n  focusedItemInfo: ItemInfo;\n  items?: D[];\n  sections?: S[];\n  onContextMenuDismissed?: (gesture: gestureTypes) => void;\n};\n\nexport const useLegendContextMenu = <K, D, S extends LegendSectionData<K, D> | void = void>({\n  rootRef,\n  contextMenuConfig,\n  focusedItemInfo,\n  items,\n  sections,\n  isReadOnly,\n  onContextMenuDismissed\n}: Props<D, S>) => {\n  const { contextMenuProps, contextMenuContent } = useContextMenu<LegendContextMenuContext<D>>({\n    onContextMenuHandler: ({ gesture, target }) => {\n      let elem, itemIdx, sectionIdx;\n      if (gesture === 'keyboard') {\n        itemIdx = focusedItemInfo.itemIdx;\n        sectionIdx = focusedItemInfo.sectionIdx;\n        if (items) {\n          elem = rootRef.current?.querySelector(`[data-oj-item=\"${itemIdx}\"]`);\n        } else if (sections) {\n          elem = rootRef.current?.querySelector( `[data-oj-item=\"${itemIdx}\"][data-oj-section=\"${sectionIdx}\"]`);\n        }\n      } else {\n        //We search for the key using the target of the event\n        itemIdx = getItemInfo(target as HTMLElement)?.itemIdx;\n        if (sections) {\n          sectionIdx = getItemInfo(target as HTMLElement)?.sectionIdx;\n        }\n      }\n      let data;\n      if (items) {\n        data = itemIdx !== undefined ? items[itemIdx] : null;\n      } else if (sections) {\n        data =\n          sectionIdx !== undefined && itemIdx !== undefined\n            ? sections[sectionIdx]?.items[itemIdx]\n            : null;\n      }\n\n      let context: LegendContextMenuContext<D>;\n      if (data) {\n        context = {\n          type: 'item',\n          data: data\n        };\n      } else {\n        context = { type: 'background' };\n      }\n      return {\n        context,\n        elem\n      };\n    },\n    contextMenuOptions: {\n      isDisabled: !contextMenuConfig || isReadOnly //If there is no context menu renderer or if isReadOnly is true, we disable the hook\n    },\n    rootRef,\n    contextMenuConfig,\n    onContextMenuDismissed\n  });\n\n  return { contextMenuContent, contextMenuProps };\n};\n"],"names":["ImageMarker","props","imageMarkerStyle","styles","_jsx","jsx","class","src","source","LegendSymbol","markerColor","lineColor","markerShape","isHidden","lineStyle","legendSymbolBaseStyle","setAspectRatioNone","width","height","defaultLineWidth","className","style","SvgSymbol","lineLength","lineWidth","borderColor","setAbsolutePos","LegendText","text","type","id","align","legendTextBaseStyle","legendTextTitle","legendTitleStartAlign","legendTitleCenterAlign","legendTitleEndAlign","isTitle","classNames","children","Text","size","variant","weight","truncation","getItemInfo","element","item","dataset","section","itemIdx","Number","sectionIdx","isItemHighlighted","highlighted","length","Set","has","isItemHidden","hiddenIds","hasFocusRing","itemInfo","isFocusVisible","legendVars","tokenVar","xUnits","key","cssProp","dvtVars","label","sm","fontSize","getLegendCurrentItemStyle","isCurrent","isHighlighted","hideAndShowBehavior","hoverBehavior","actionable","legendItemIsCurrentWithCursor","legendItemIsCurrentWithoutCursor","BaseLegendItem","forwardRef","symbolHeight","symbolWidth","isFocused","ref","textStyles","fontFamily","textFontFamily","textFontSize","color","textColor","fontStyle","textFontStyle","fontWeight","textFontWeight","textDecoration","textTextDecoration","symbolProps","isNotDimmed","legendItemBaseStyle","legendItemOpacity","legendItemFocusRing","_jsxs","gridRow","gridColumn","gridCol","minWidth","undefined","role","calculateOffset","focusedItemRef","rootDimsRef","currentItem","isRtl","crossAxis","mainAxisOffset","DATATIP_OFFSET","current","rootDim","itemDim","getBoundingClientRect","x","y","Math","min","max","mainAxis","getMaxWidth","items","unitLength","getTextDimensions","legendFontStylesObj","maxItemWidth","horizontalSectionWidth","itemSymbolWidth","forEach","legendItem","itemTextWidth","ceil","orientation","highlightedIds","focusedItemInfo","hoveredItemInfo","activeId","isReadOnly","isHoriz","columTemplates","itemsPerRow","itemWidth","baseLegendStyles","baseLegendHorizontal","baseLegendVertical","baseLegendVerticalItem","baseLegendPaddingBottom","baseLegendPaddingTop","baseLegendPaddingEnd","gridTemplateColumns","maxWidth","map","index","focusedItem","hoveredItem","isFocusedItem","isHoveredItem","getItemProps","noOfItems","itemsPerCol","floor","getGridCellIndices","needsBottomSpace","needsTopSpace","ariaLabel","ariaDescribedBy","ariaLabelledBy","getItem","isPointerActive","datatip","numItems","layoutInfo","isWrapped","legendData","isSectional","triggerOnAction","updatefocusedItemInfo","isHideShow","event","code","cancelEvent","resolvedVars","item1","item2","rootRef","contextMenuConfig","sections","onContextMenuDismissed","contextMenuProps","contextMenuContent","useContextMenu","onContextMenuHandler","gesture","target","elem","data","context","querySelector","contextMenuOptions","isDisabled","touchResponse","direction","useUser","offset","setOffset","useState","useLayoutEffect","anchor","useDatatip","content","placement","textMeasureContent","useTextDimensions","orientationRef","useRef","hasOrientationChanged","needsRerender","setRerender","useMemo","Object","keys","parseFloat"],"mappings":"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"}