{"version":3,"file":"FormLayout-a4a29a2d.js","sources":["../../src/UNSAFE_FormLayout/FormLayout.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormContext, FormContext, FormContextProps } from '../hooks/UNSAFE_useFormContext';\nimport { styles } from './themes/FormLayoutStyles.css';\nimport { layoutLocalVars } from '../utils/UNSAFE_styles/Layout/LayoutStyles.css';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { layoutSpanStyles, LayoutColumns, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype Props = TestIdProps & {\n  /**\n   * Specifies if the FormLayout will dynamically adjust its columns to match the container size based on\n   * defined container breakpoints.\n   */\n  columnBehavior?: 'responsive' | 'fixed';\n\n  /**\n   * The number of columns to display. In a 'responsive' layout, you will have the specified number of\n   * columns or fewer, depending on the defined container breakpoints.\n   */\n  columns?: LayoutColumns;\n\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'.\n   */\n  columnSpan?: LayoutColumnSpan;\n\n  /**\n   * The direction the children should be laid out, row first or column first.\n   */\n  direction?: 'row' | 'column';\n\n  /**\n   * Indicates if the form layout will use 100% of the container's width, and will ignore the theme's max column width.\n   */\n  isFullWidth?: boolean;\n\n  /**\n   * Indicates whether the form layout is readonly.\n   */\n  isReadonly?: FormContextProps['isReadonly'];\n\n  /**\n   * Specifies the label position.\n   */\n  labelEdge?: FormContextProps['labelEdge'];\n\n  /**\n   * Specifies the width of the start aligned label, ignored for top & inside aligned.\n   */\n  labelStartWidth?: FormContextProps['labelStartWidth'];\n\n  /**\n   * Specifies if start or top label text should wrap or truncate.\n   * @deprecated Since 18.0.0. Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value.\n   */\n  labelWrapping?: FormContextProps['labelWrapping'];\n\n  /**\n   * Specifies the density of the user assistance presentation.\n   */\n  userAssistanceDensity?: FormContextProps['userAssistanceDensity'];\n\n  children?: ComponentChildren;\n};\n\nexport const FormLayout = ({\n  columns = 1,\n  columnBehavior = 'responsive',\n  columnSpan = 1,\n  direction = 'row',\n  isFullWidth,\n  isReadonly: propIsReadonly,\n  labelEdge: propLabelEdge,\n  labelStartWidth: propLabelStartWidth,\n  labelWrapping: propLabelWrapping,\n  userAssistanceDensity: propUserAssistanceDensity,\n  children,\n  testId\n}: Props) => {\n  const {\n    isDisabled,\n    isFormLayout: formIsFormLayout,\n    isReadonly: isFormReadonly,\n    labelEdge: formLabelEdge,\n    labelStartWidth: formLabelStartWidth,\n    labelWrapping: formLabelWrapping,\n    textAlign,\n    userAssistanceDensity: formUserAssistanceDensity\n  } = useFormContext();\n  const testIdProps = useTestId(testId);\n  const layoutElementTestIdProps = useTestId(`${testId}_layout`);\n  const isReadonly = propIsReadonly ?? isFormReadonly;\n  const labelEdge = propLabelEdge ?? formLabelEdge;\n  const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n  const labelWrapping = propLabelWrapping ?? formLabelWrapping;\n  // If we have the prop, pass it on, or if we are in a form layout, use the context value, otherwise default to 'efficient'\n  const userAssistanceDensity =\n    propUserAssistanceDensity ?? (formIsFormLayout ? formUserAssistanceDensity : 'efficient');\n\n  // We need to set the localVars.minColumnCount and localVars.maxColumnCount so that we can correctly set the max width to the current column count\n  const assignVarStyles = assignInlineVars({\n    [layoutLocalVars.maxColumnCount]: `${columns}`,\n    [layoutLocalVars.minColumnCount]: `${columnBehavior === 'responsive' ? 1 : columns}`\n  });\n  const { baseTheme, classes } = useComponentTheme(FormLayoutRedwoodTheme, {\n    columnBehavior,\n    direction\n  });\n\n  return (\n    <FormContext.Provider\n      value={{\n        isDisabled,\n        isFormLayout: true,\n        isReadonly,\n        labelEdge,\n        labelStartWidth,\n        labelWrapping,\n        textAlign,\n        userAssistanceDensity\n      }}>\n      <div\n        class={classNames([\n          baseTheme,\n          styles.rootWrapperStyle,\n          isFullWidth && styles.rootWrapperFullWidthStyle,\n          layoutSpanStyles.layoutSpanColumn[columnSpan]\n        ])}\n        {...testIdProps}\n        style={assignVarStyles}>\n        <div class={classes} {...layoutElementTestIdProps}>\n          {children}\n        </div>\n      </div>\n    </FormContext.Provider>\n  );\n};\n"],"names":["columns","columnBehavior","columnSpan","direction","isFullWidth","isReadonly","propIsReadonly","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","labelWrapping","propLabelWrapping","userAssistanceDensity","propUserAssistanceDensity","children","testId","isDisabled","isFormLayout","formIsFormLayout","isFormReadonly","formLabelEdge","formLabelStartWidth","formLabelWrapping","textAlign","formUserAssistanceDensity","useFormContext","testIdProps","useTestId","layoutElementTestIdProps","assignVarStyles","assignInlineVars","layoutLocalVars","maxColumnCount","minColumnCount","baseTheme","classes","useComponentTheme","FormLayoutRedwoodTheme","_jsx","FormContext","Provider","value","jsx","class","classNames","styles","rootWrapperStyle","rootWrapperFullWidthStyle","layoutSpanStyles","layoutSpanColumn","style"],"mappings":"oZA2E0B,EACxBA,UAAU,EACVC,iBAAiB,aACjBC,aAAa,EACbC,YAAY,MACZC,cACAC,WAAYC,EACZC,UAAWC,EACXC,gBAAiBC,EACjBC,cAAeC,EACfC,sBAAuBC,EACvBC,WACAC,aAEA,MAAMC,WACJA,EACAC,aAAcC,EACdd,WAAYe,EACZb,UAAWc,EACXZ,gBAAiBa,EACjBX,cAAeY,EAAiBC,UAChCA,EACAX,sBAAuBY,GACrBC,EAAAA,iBACEC,EAAcC,YAAUZ,GACxBa,EAA2BD,EAAAA,UAAU,GAAGZ,YACxCX,EAAaC,GAAkBc,EAC/Bb,EAAYC,GAAiBa,EAC7BZ,EAAkBC,GAAuBY,EACzCX,EAAgBC,GAAqBW,EAErCV,EACJC,IAA8BK,EAAmBM,EAA4B,aAGzEK,EAAkBC,EAAAA,iBAAiB,CACvC,CAACC,kBAAgBC,gBAAiB,GAAGjC,IACrC,CAACgC,EAAAA,gBAAgBE,gBAAiB,GAAsB,eAAnBjC,EAAkC,EAAID,OAEvEmC,UAAEA,EAASC,QAAEA,GAAYC,EAAAA,kBAAkBC,EAAAA,uBAAwB,CACvErC,iBACAE,cAGF,OACEoC,MAACC,EAAAA,YAAYC,SAAQ,CACnBC,MAAO,CACLzB,aACAC,cAAc,EACdb,aACAE,YACAE,kBACAE,gBACAa,YACAX,yBACDE,SACDwB,EACEI,IAAA,MAAA,CAAAC,MAAOC,EAAAA,WAAW,CAChBV,EACAW,EAAAA,OAAOC,iBACP3C,GAAe0C,EAAMA,OAACE,0BACtBC,EAAgBA,iBAACC,iBAAiBhD,QAEhCyB,EACJwB,MAAOrB,WACPS,EAAKI,IAAA,MAAA,CAAAC,MAAOR,KAAaP,EACtBd,SAAAA,OAIP"}