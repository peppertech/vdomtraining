{"version":3,"file":"UNSAFE_InputSensitiveText.js","sources":["../../src/UNSAFE_InputSensitiveText/InputSensitiveText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useImperativeHandle, useRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useHover } from '#hooks/UNSAFE_useHover';\nimport { CountUnit, useLengthFilter } from '#hooks/UNSAFE_useLengthFilter';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  MaxLengthLiveRegion,\n  ObfuscatedTextFieldInput,\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from '#PRIVATE_RevealToggleIcon';\nimport { useClearIcon } from '#hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '#utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '#PRIVATE_ClearIcon/ClearIcon';\nimport { Size } from '#utils/UNSAFE_size';\nimport { useToggle } from '#hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '#hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n  /**\n   * Specifies whether the reveal toggle should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The reveal toggle is always visible and the user can click on it to reveal the password in plain text.\n   * When the user leaves the field, the password is automatically masked.</li>\n   * <li><code>'never'</code>: The reveal toggle is never visible and the user can never reveal the password in plain text.</li>\n   * </ul>\n   */\n  hasRevealToggle?: 'always' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field. If the labelEdge is 'none',\n   * the labelHint is hidden from the user but is still accessible.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Specifies how the input text characters are to be counted when `maxLength` is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * A label that describes what type of data is hidden.\n   * This label becomes the aria-label of the reveal toggle icon button to make the button accessible.\n   * Example: \"Credit Card Number hidden\"\n   */\n  revealToggleLabel?: string;\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n} & TestIdProps;\n\ntype FocusSelectHandle = FocusableHandle & SelectableHandle;\n\n/**\n * An InputSensitiveText allows you to enter/edit sensitive data, obfuscating the input as the user types.\n * The obfuscation can be toggled off and on via a reveal toggle button.\n * Examples: Credit Card Number, Social Security Number, etc.\n */\nexport const InputSensitiveText = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoFocus = false,\n      columnSpan,\n      hasClearIcon = 'never',\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      messages,\n      placeholder,\n      revealToggleLabel,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const maxLengthDescribedByIdRef = useRef<string>(useId());\n    // The enabledAriaDescribedBy includes the maxLengthDescribedById in addition to what was passed in to aria-describedby.\n    // We don't need to announce the max length message for readonly, as it only applies when editing the value.\n    const enabledAriaDescribedBy = ariaDescribedBy\n      ? `${ariaDescribedBy} ${maxLengthDescribedByIdRef.current}`\n      : maxLengthDescribedByIdRef.current;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const enabledElementRef = useRef<HTMLInputElement>(null);\n    const readonlyElementRef = useRef<HTMLInputElement>(null);\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLInputElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      onBlurWithin: setRevealedFalse\n    });\n\n    const { methods: selectMethods } = useSelectableTextField<HTMLInputElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy: isReadonly || isDisabled ? ariaDescribedBy : enabledAriaDescribedBy,\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal button,\n    // toggle revealing/masking password\n    const onRevealIconToggle = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed, setRevealedFalse, setRevealedTrue]);\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    // I'm using || and not ?? here because if they provide an empty string for the label, we want\n    // to use our translated string, as an empty string would be an accessibility violation.\n    const revealToggleAriaLabel = revealToggleLabel || translations.inputSensitiveText_hidden();\n\n    // When hasRevealToggle === 'always', we still don't render the revealToggleButton when:\n    // - isDisabled is true\n    // - isReadonly is true and the value is empty or undefined.\n    const revealToggleIcon =\n      !isDisabled && (!isReadonly || !!value) && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon\n          onToggle={onRevealIconToggle}\n          isRevealed={isRevealed}\n          accessibleLabel={revealToggleAriaLabel}\n        />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} testId={`${testId}_clearicon`} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const obfuscationChar = '•';\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"input\"\n          autoFocus={autoFocus}\n          elementRef={readonlyElementRef}\n          textAlign={textAlign}\n          type={'text'}\n          value={isRevealed ? value : obfuscationChar.repeat(value ? value.length : 0)}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            endContent={revealToggleIcon}\n            mainContent={mainContent}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={anchorRef}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n    const hasMaxLength = maxLength !== undefined;\n    const mainContent = (\n      <>\n        <ObfuscatedTextFieldInput\n          aria-label={ariaLabel}\n          autoFocus={autoFocus}\n          character={obfuscationChar}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          onInput={onFilteredInput}\n          onCommit={onCommitAndDispatch}\n          placeholder={placeholder}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={value}\n          isRevealed={isRevealed}\n          hasEndContent={!!(maybeClearIcon || revealToggleIcon)}\n          {...inputProps}\n        />\n        {hasMaxLength && (\n          <HiddenAccessible id={maxLengthDescribedByIdRef.current}>\n            {translations.formControl_maxLength({\n              MAX_LENGTH: `${maxLength}`\n            })}\n          </HiddenAccessible>\n        )}\n        {hasMaxLength && isFocused && (\n          <MaxLengthLiveRegion\n            maxLength={maxLength}\n            valueLength={valueLength}\n            testId={testId + '_remainingChars'}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          columnSpan={columnSpan}\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          compactUserAssistance={compactUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onFocusOut}\n          onFocus={focusProps.onFocusIn}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["InputSensitiveText","forwardRef","ariaDescribedBy","assistiveText","autoFocus","columnSpan","hasClearIcon","hasRevealToggle","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","revealToggleLabel","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","virtualKeyboard","onInput","onCommit","testId","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","maxLengthDescribedByIdRef","useRef","useId","enabledAriaDescribedBy","current","bool","isRevealed","setFalse","setRevealedFalse","setTrue","setRevealedTrue","useToggle","enabledElementRef","readonlyElementRef","focusProps","isFocused","methods","focusMethods","useFocusableTextField","onBlurWithin","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onRevealIconToggle","translations","useTranslationBundle","revealToggleAriaLabel","inputSensitiveText_hidden","revealToggleIcon","_jsx","RevealToggleIcon","onToggle","accessibleLabel","onClickClearIcon","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","jsx","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","valueLength","onFilteredInput","useLengthFilter","labelComp","Label","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","anchorRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","id","as","elementRef","repeat","length","hasEmptyLabel","hasInsideLabel","FormFieldContext","Provider","children","ReadonlyTextField","role","endContent","onBlur","onFocusOut","onFocus","onFocusIn","hasMaxLength","_jsxs","_Fragment","ObfuscatedTextFieldInput","character","inputRef","isMobile","hasEndContent","HiddenAccessible","formControl_maxLength","MAX_LENGTH","MaxLengthLiveRegion","TextField","mainFieldRef","deviceType","getClientHints"],"mappings":"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"}