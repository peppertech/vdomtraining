{"version":3,"file":"BarChart-077c5f02.js","sources":["../../src/UNSAFE_BarChart/utils/barNavUtils.ts","../../src/UNSAFE_BarChart/OverviewBarChart.tsx","../../src/UNSAFE_BarChart/BarChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Info, ItemInfo } from '#utils/UNSAFE_visTypes/chart';\nimport {\n  getNextItemInGroup,\n  getNextItemInSeries,\n  getPrevItemInGroup,\n  getPrevItemInSeries\n} from '#utils/PRIVATE_chartUtils/navUtils';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\n\ntype isItemNavigableType = (seriesIndex: number, groupIndex: number) => boolean;\n\n/**\n * Get next item in unstacked bar chart.\n * @param info\n * @param viewportEndIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getNextItem(\n  info: ItemInfo,\n  viewportEndIndex: number,\n  numSeries: number,\n  isNavigable: isItemNavigableType\n): ItemInfo {\n  const nextItemInGroup = getNextItemInGroup(info, numSeries, isNavigable);\n  if (nextItemInGroup) return nextItemInGroup;\n\n  if (info.groupIndex < viewportEndIndex) {\n    let nextItem = { seriesIndex: 0, groupIndex: info.groupIndex + 1 };\n    if (isNavigable(nextItem.seriesIndex, nextItem.groupIndex)) return nextItem;\n    nextItem = getNextItem(nextItem, viewportEndIndex, numSeries, isNavigable);\n    if (nextItem) return nextItem;\n  }\n  return info;\n}\n\n/**\n * Get prev item in unstacked bar chart.\n * @param info\n * @param viewportStartIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getPreviousItem(\n  info: ItemInfo,\n  viewportStartIndex: number,\n  numSeries: number,\n  isNavigable: (seriesIndex: number, groupIndex: number) => boolean\n) {\n  const prevItemInGroup = getPrevItemInGroup(info, isNavigable);\n  if (prevItemInGroup) return prevItemInGroup;\n\n  if (info.groupIndex > viewportStartIndex) {\n    let prevItem = { groupIndex: info.groupIndex - 1, seriesIndex: numSeries - 1 };\n    if (isNavigable(prevItem.seriesIndex, prevItem.groupIndex)) return prevItem;\n    prevItem = getPreviousItem(prevItem, viewportStartIndex, numSeries, isNavigable);\n    if (prevItem) return prevItem;\n  }\n  return info;\n}\n\nexport function getBarChartNavUtil<K, D extends BarItemData<K>>(\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  numSeries: number,\n  viewportStartIndex: number,\n  viewportEndIndex: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const isItemNavigable = (seriesIndex: number, groupIndex: number) => {\n    const barItem = getDataItem(seriesIndex, groupIndex);\n    return Boolean(barItem);\n  };\n\n  const getNextChartItem = (\n    itemInfo: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ): Info => {\n    if (!isStacked && (arrow === 'ArrowDown' || arrow === 'ArrowUp')) {\n      return itemInfo;\n    }\n    let newInfo: Info | undefined;\n    // TODO: this is just to keep typescript happy.\n    // figure out consistent typing while doing type cleanup.\n    const info = {\n      groupIndex: itemInfo.groupIndex!,\n      seriesIndex: itemInfo.seriesIndex!\n    };\n\n    if (info.groupIndex! < viewportStartIndex) {\n      info.groupIndex = viewportStartIndex;\n      return info;\n    } else if (info.groupIndex! > viewportEndIndex) {\n      info.groupIndex = viewportEndIndex;\n      return info;\n    }\n\n    if (isStacked) {\n      if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItemInSeries(info, viewportEndIndex, isItemNavigable)\n          : getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPrevItemInSeries(info, viewportStartIndex, isItemNavigable)\n          : getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else if (arrow === 'ArrowDown') {\n        newInfo = getPrevItemInGroup(info, isItemNavigable);\n      } else {\n        newInfo = getNextItemInGroup(info, numSeries, isItemNavigable);\n      }\n    } else {\n      if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable)\n          : getNextItem(info, viewportEndIndex, numSeries, isItemNavigable);\n      } else if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItem(info, viewportEndIndex, numSeries, isItemNavigable)\n          : getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable);\n      }\n    }\n    return newInfo || info;\n  };\n\n  return getNextChartItem;\n}\n","import { BarChart } from './BarChart';\nimport { BarChartProps, BarItemData } from './barChart.types';\n\nexport function OverviewBarChart<K extends string | number, D extends BarItemData<K>>(\n  props: BarChartProps<K, D>\n) {\n  return (\n    <BarChart\n      datatip={() => ({ content: '' })}\n      zoomAndScroll=\"off\"\n      plotArea={{\n        yMajorTick: {\n          isRendered: false\n        },\n        xMajorTick: {\n          \n        }\n      }}\n      xAxis={{\n        tickLabel: {\n          autoRotate: false,\n          // @ts-ignore\n          isRendered: props.xAxis?.timeAxisType ? true : false\n        }\n      }}\n      series={props.series}\n      groups={props.groups}\n      getDataItem={props.getDataItem}\n      yAxis={{\n        tickLabel: {\n          isRendered: false\n        }\n      }}\n      overview=\"off\"\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getBarGapRatio } from './utils/barSeriesUtils';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { BarGroup } from './BarGroup';\nimport { findNearestDataPoint } from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport {\n  getBarCenterCoordinate,\n  getBarPosition,\n  getSeriesOffsetAndWidth\n} from './utils/barLayoutUtils';\nimport { getBarChartNavUtil } from './utils/barNavUtils';\nimport { Chart } from '#PRIVATE_Chart';\nimport { TimeAxisProps, Scale } from '#utils/UNSAFE_visTypes/chart';\nimport { getItemColor } from '#utils/PRIVATE_chartUtils/dataStyleUtils';\nimport { OverviewBarChart } from './OverviewBarChart';\n\n/* bar chart start and end axis offset */\nconst AXIS_OFFSET = 0.5;\n\n/**\n * A Bar chart displays information graphically using rectangular bars with heights or lengths proportional to the values that they represent,\n * making relationships among the data easier to understand.\n */\nexport function BarChart<K extends string | number, D extends BarItemData<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataItemGaps = 0.5,\n  ...props\n}: BarChartProps<K, D>) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const hiddenSet = new Set(hiddenIds);\n  const isHoriz = orientation === 'horizontal';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const getGapRatio = (startIndex: number, endIndex: number) => {\n    return getBarGapRatio(isStacked, startIndex, endIndex);\n  };\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    return getBarChartNavUtil(getDataItem, series.length, startIndex, endIndex, isStacked, isRtl);\n  };\n  const getDataItemPos = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    return getBarPosition(\n      series,\n      groups,\n      getDataItem,\n      xScale,\n      yScale,\n      hiddenSet,\n      dataItemGaps,\n      groupWidth,\n      gapRatio,\n      yAxis?.scale === 'log',\n      isStacked,\n      isRtl,\n      isHoriz,\n      timeAxisType\n    );\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    const getSeriesDataInfo = getSeriesOffsetAndWidth(\n      groupWidth,\n      gapRatio,\n      series.length,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    return findNearestDataPoint(\n      series,\n      groups,\n      xScale,\n      yScale,\n      getDataItem,\n      isStacked,\n      getSeriesDataInfo,\n      getBarCenterCoordinate,\n      yAxis?.scale === 'log',\n      dataItemGaps,\n      hiddenSet,\n      timeAxisType\n    );\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    return {\n      color: getItemColor(seriesIndex, groupIndex, series, getDataItem),\n      type: 'circle' as const\n    };\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      isStacked={isStacked}\n      getDataItem={getDataItem}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      renderGridLinesInFront={false}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      getMarkerInfo={getMarkerColorAndType}\n      isRtl={isRtl}\n      offset={AXIS_OFFSET}\n      defaultOverviewContentRenderer={() => {\n        return <OverviewBarChart series={series} groups={groups} getDataItem={getDataItem} />;\n      }}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        gapRatio,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        groupWidth,\n        isPointInsideMarquee,\n        getTextDimensions,\n        defaultFontSize,\n        colors\n      }) => {\n        return (\n          <>\n            {groups.slice(xStartIndex, xEndIndex + 1).map((_, index) => (\n              <BarGroup\n                yScale={yScale}\n                xScale={xScale}\n                groupIndex={index + xStartIndex}\n                selectedIds={selectedSet}\n                hiddenIds={hiddenSet}\n                highlightedIds={highlightedIds ? highlightedSet : highlightedIds}\n                isDrillEnabled={drilling === 'on'}\n                series={series}\n                barGapRatio={gapRatio}\n                dataItemGaps={dataItemGaps}\n                isPointInsideMarquee={isPointInsideMarquee}\n                isStacked={isStacked}\n                groupWidth={groupWidth}\n                group={groups[index]}\n                timeAxisType={(props.xAxis as TimeAxisProps)?.timeAxisType}\n                colors={colors}\n                activeId={activeId}\n                isLog={yAxis?.scale === 'log'}\n                orientation={orientation}\n                getDataItem={getDataItem}\n                isSelectionEnabled={selectionMode != 'none'}\n                isRtl={isRtl}\n                focusedItemInfo={focusedItemInfo}\n                hoveredItemInfo={hoveredItemInfo}\n                getTextDimensions={getTextDimensions}\n                defaultFontSize={defaultFontSize}\n                getStackLabel={props.getStackLabel}\n              />\n            ))}\n          </>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["getNextItem","info","viewportEndIndex","numSeries","isNavigable","nextItemInGroup","getNextItemInGroup","groupIndex","nextItem","seriesIndex","getPreviousItem","viewportStartIndex","prevItemInGroup","getPrevItemInGroup","prevItem","OverviewBarChart","props","_jsx","BarChart","datatip","content","zoomAndScroll","plotArea","yMajorTick","isRendered","xMajorTick","xAxis","tickLabel","autoRotate","timeAxisType","series","groups","getDataItem","yAxis","overview","AXIS_OFFSET","width","height","selectedIds","hiddenIds","highlightedIds","hideAndShowBehavior","orientation","isStacked","selectionMode","drilling","dataItemGaps","direction","useUser","isRtl","hiddenSet","Set","isHoriz","selectedSet","highlightedSet","Chart","renderGridLinesInFront","findNearest","xScale","yScale","groupWidth","gapRatio","getSeriesDataInfo","getSeriesOffsetAndWidth","length","findNearestDataPoint","getBarCenterCoordinate","scale","getDataItemPos","getBarPosition","getNavUtil","startIndex","endIndex","isItemNavigable","barItem","Boolean","itemInfo","arrow","newInfo","getNextItemInSeries","getPrevItemInSeries","getBarChartNavUtil","getGapRatio","getBarGapRatio","getMarkerInfo","color","getItemColor","type","offset","defaultOverviewContentRenderer","jsx","children","xStartIndex","xEndIndex","activeId","focusedItemInfo","hoveredItemInfo","isPointInsideMarquee","getTextDimensions","defaultFontSize","colors","_Fragment","Fragment","slice","map","_","index","BarGroup","isDrillEnabled","barGapRatio","group","isLog","isSelectionEnabled","getStackLabel"],"mappings":"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"}