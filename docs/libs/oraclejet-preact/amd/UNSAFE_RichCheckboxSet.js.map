{"version":3,"file":"UNSAFE_RichCheckboxSet.js","sources":["../../src/UNSAFE_RichCheckboxSet/RichCheckboxSet.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { useCallback, useMemo } from 'preact/hooks';\nimport { forwardRef } from 'preact/compat';\n\nimport { BaseRichSelection } from '#PRIVATE_RichSelectionCommon';\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { CheckboxSetContext } from '#UNSAFE_CheckboxSet';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\nimport type { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\n// Typing should stay in sync with BaseRichSelection. They cannot be imported directly\n// because BaseRichSelection is in a PRIVATE directory and will be removed in the production build.\ntype Props = TestIdProps &\n  Pick<AriaAttributesSignalExcluded, 'aria-describedby'> & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * Set of RichSelectionItems\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the set is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the set is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the set requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the set.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field. Maps to \"top\" in forms using \"start\".\n     */\n    labelEdge?: 'none' | 'top' | 'inside';\n    /**\n     * Specifies the layout of the cards and media\n     */\n    layout: 'xl' | 'md' | 'sm';\n    /**\n     * Specifies the maximum number of selectable options. If both \"maxSelected\" and \"minSelected\" are defined,\n     * \"maxSelected\" must be greater than or equal to \"minSelected\" and at least 2.  To require an exact number\n     * of options to be selected, set \"maxSelected\" and \"minSelected\" to the same value.\n     */\n    maxSelected?: number;\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n    /**\n     * Specifies the minimum number of selectable options. If both \"minSelected\" and \"maxSelected\" are defined,\n     * \"minSelected\" must be less than or equal to \"maxSelected\" and at least 2. To require an exact number\n     * of options to be selected, set \"minSelected\" and \"maxSelected\" to the same value. To require at least one\n     * item to be selected, use \"isRequired\". To require exactly one item to be selected, use \"RichRadioSet\".\n     */\n    minSelected?: number;\n    /**\n     * Callback invoked each time the user changes selected option.\n     */\n    onCommit: (detail: ValueUpdateDetail<Set<string | number>>) => void;\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n    /**\n     * Value of the checkbox option.\n     */\n    value?: Set<string | number>;\n  };\n\n/**\n * A rich checkbox set allows the user to select options from a set of options.\n */\nexport const RichCheckboxSet = forwardRef(\n  (\n    { children, maxSelected, minSelected, onCommit: propOnCommit, value, ...otherProps }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const baseId = useId();\n    const hasMin = minSelected != null;\n    const hasMax = maxSelected != null;\n\n    const onCommit = useCallback(\n      (detail: ValueUpdateDetail<Set<string | number>>) => {\n        const { value: updateValue } = detail;\n        const hasValue = updateValue !== undefined && updateValue.size > 0;\n        const hasExceededLimit = hasValue && hasMax && updateValue.size > maxSelected;\n\n        // attempting to add a new value if hasExceededLimit will prevent propOnCommit from being called\n        !hasExceededLimit && propOnCommit?.(detail);\n      },\n      [maxSelected, hasMax, propOnCommit]\n    );\n\n    const checkboxSetContext = useMemo(\n      () => ({\n        name: baseId,\n        value,\n        onCommit\n      }),\n      [baseId, onCommit, value]\n    );\n\n    // Runtime error checking\n    if (hasMin && minSelected < 2) {\n      throw new Error('RichCheckboxSet: minSelected should be equal to or greater than 2.');\n    }\n    if (hasMax && maxSelected < 2) {\n      throw new Error('RichCheckboxSet: maxSelected should be equal to or greater than 2.');\n    }\n    if (hasMin && hasMax && minSelected > maxSelected) {\n      throw new Error('RichCheckboxSet: minSelected should not be greater than maxSelected.');\n    }\n\n    return (\n      <CheckboxSetContext.Provider value={checkboxSetContext}>\n        <BaseRichSelection\n          {...otherProps}\n          baseId={baseId}\n          ref={ref}\n          selection=\"multiple\"\n          value={value}>\n          {children}\n        </BaseRichSelection>\n      </CheckboxSetContext.Provider>\n    );\n  }\n);\n"],"names":["RichCheckboxSet","forwardRef","children","maxSelected","minSelected","onCommit","propOnCommit","value","otherProps","ref","baseId","useId","hasMin","hasMax","useCallback","detail","updateValue","undefined","size","checkboxSetContext","useMemo","name","Error","_jsx","CheckboxSetContext","Provider","jsx","BaseRichSelection","selection"],"mappings":"6gTAiHa,MAAAA,GAAkBC,EAAUA,YACvC,EACIC,WAAUC,cAAaC,cAAaC,SAAUC,EAAcC,WAAUC,GACxEC,KAEA,MAAMC,EAASC,EAAAA,QACTC,EAAwB,MAAfR,EACTS,EAAwB,MAAfV,EAETE,EAAWS,eACdC,IACC,MAAQR,MAAOS,GAAgBD,SACEE,IAAhBD,GAA6BA,EAAYE,KAAO,GAC5BL,GAAUG,EAAYE,KAAOf,IAG7CG,IAAeS,EAAO,GAE7C,CAACZ,EAAaU,EAAQP,IAGlBa,EAAqBC,EAAAA,SACzB,KAAO,CACLC,KAAMX,EACNH,QACAF,cAEF,CAACK,EAAQL,EAAUE,IAIrB,GAAIK,GAAUR,EAAc,EAC1B,MAAM,IAAIkB,MAAM,sEAElB,GAAIT,GAAUV,EAAc,EAC1B,MAAM,IAAImB,MAAM,sEAElB,GAAIV,GAAUC,GAAUT,EAAcD,EACpC,MAAM,IAAImB,MAAM,wEAGlB,OACEC,MAACC,EAAAA,mBAAmBC,SAAS,CAAAlB,MAAOY,WAClCI,EAACG,IAAAC,oBACK,IAAAnB,EACJE,OAAQA,EACRD,IAAKA,EACLmB,UAAU,WACVrB,MAAOA,EACNL,SAAAA,KAGL"}