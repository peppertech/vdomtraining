{"version":3,"file":"IconSwitchButton-22f907e7.js","sources":["../../src/PRIVATE_IconSwitchButton/IconSwitchButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useImperativeHandle } from 'preact/hooks';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport { useToggleAction, ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '#utils/UNSAFE_interpolations/dimensions';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\nimport { toggleStyling } from '#utils/UNSAFE_buttonUtils';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport type { ToggleButtonLabelProps } from '#UNSAFE_ToggleButtonLabel/ToggleButtonLabel';\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type IconSwitchButtonProps = WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * icon - the icon for the button\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * The size indicates how large the button is rendered: \"xs\", \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n  };\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * A IconSwitchButton is an icon button that allows users to switch\n * between states when pressed.  It differs from a toggle button in not\n * providing any visual indication of the state; instead, switch the\n * icon to provide the state indication.\n */\nexport const IconSwitchButton = forwardRef(\n  (\n    {\n      children,\n      tooltip,\n      size = 'md',\n      isDisabled = false,\n      accessibleLabel,\n      isSelected = false,\n      onToggle,\n      testId,\n      width,\n      'aria-describedby': ariaDescribedBy\n    }: IconSwitchButtonProps & VariationAccessibleLabelProps & TestIdProps,\n    ref?: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref!, () => buttonRef.current!, [buttonRef]);\n\n    const { triggerProps } = useToggleAction({\n      isDisabled: isDisabled,\n      onToggle: onToggle\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ?? accessibleLabel,\n      isDisabled: isDisabled\n    });\n\n    const styling = toggleStyling(\n      'auto',\n      isSelected,\n      true,\n      false,\n      false,\n      undefined,\n      undefined,\n      true\n    );\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, triggerProps, ariaProps)}\n          elementDetails={{ type: 'button', isSwitch: true }}\n          aria-checked={isSelected}\n          variant=\"ghost\"\n          size={size}\n          isDisabled={isDisabled}\n          styling={styling}\n          width={width}\n          ref={buttonRef}\n          aria-label={accessibleLabel ?? tooltip}\n          testId={testId}>\n          <ToggleButtonLabel\n            isDisabled={isDisabled}\n            label={accessibleLabel ?? tooltip}\n            isToggle={true}\n            inputName={useId()}\n            inputType={'switch'}\n            onAction={() => onToggle?.({ value: isSelected })}\n            isSelected={isSelected}\n            display={'icons'}\n            startIcon={children}\n            size={size as ToggleButtonLabelProps['size']}\n          />\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconSwitchButton.displayName = 'IconSwitchButton';\n"],"names":["IconSwitchButton","forwardRef","children","tooltip","size","isDisabled","accessibleLabel","isSelected","onToggle","testId","width","ariaDescribedBy","ref","buttonRef","useRef","useImperativeHandle","current","triggerProps","useToggleAction","tooltipContent","tooltipProps","useTooltip","text","styling","toggleStyling","undefined","ariaProps","_jsxs","Fragment","_jsx","jsx","BaseButton","mergeProps","elementDetails","type","isSwitch","variant","ToggleButtonLabel","label","isToggle","inputName","useId","inputType","onAction","value","display","startIcon","displayName"],"mappings":"+jBAsFa,MAAAA,EAAmBC,EAAAA,YAC9B,EAEIC,WACAC,UACAC,OAAO,KACPC,cAAa,EACbC,kBACAC,cAAa,EACbC,WACAC,SACAC,QACA,mBAAoBC,GAEtBC,KAEA,MAAMC,EAAYC,SAA0B,MAC5CC,EAAmBA,oBAACH,GAAM,IAAMC,EAAUG,SAAU,CAACH,IAErD,MAAMI,aAAEA,GAAiBC,kBAAgB,CACvCb,WAAYA,EACZG,SAAUA,KAGNW,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMnB,GAAWG,EACjBD,WAAYA,IAGRkB,EAAUC,EAAAA,cACd,OACAjB,GACA,GACA,GACA,OACAkB,OACAA,GACA,GAGIC,EAAY,CAAE,mBAAoBf,GAExC,OACEgB,EAAAA,KAACC,EAAAA,SAAQ,CAAA1B,SAAA,CACP2B,EAACC,IAAAC,EAAUA,WACL,IAAAC,EAAAA,WAAWZ,EAAcH,EAAcS,GAC3CO,eAAgB,CAAEC,KAAM,SAAUC,UAAU,GAAM,eACpC5B,EACd6B,QAAQ,QACRhC,KAAMA,EACNC,WAAYA,EACZkB,QAASA,EACTb,MAAOA,EACPE,IAAKC,EAAS,aACFP,GAAmBH,EAC/BM,OAAQA,EAAMP,SACd2B,MAACQ,EAAAA,kBACC,CAAAhC,WAAYA,EACZiC,MAAOhC,GAAmBH,EAC1BoC,UAAU,EACVC,UAAWC,EAAKA,QAChBC,UAAW,SACXC,SAAU,IAAMnC,IAAW,CAAEoC,MAAOrC,IACpCA,WAAYA,EACZsC,QAAS,QACTC,UAAW5C,EACXE,KAAMA,MAGTe,IAEH,IAINnB,EAAiB+C,YAAc"}