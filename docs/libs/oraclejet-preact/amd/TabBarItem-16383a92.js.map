{"version":3,"file":"TabBarItem-16383a92.js","sources":["../../src/UNSAFE_TabBarCommon/useTabBarItemTooltip.ts","../../src/UNSAFE_TabBarCommon/BaseTabBarItem.tsx","../../src/UNSAFE_TabBarCommon/TabBarItem.tsx"],"sourcesContent":["import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  label: string;\n  isDisabled: boolean;\n};\n\nexport const useTabBarItemTooltip = ({\n  label,\n  isDisabled\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipEventHandlerProps: Record<string, any>;\n  onLogicalFocus: (elem: HTMLElement) => void;\n  onLogicalBlur: () => void;\n} => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const { tooltipProps, tooltipContent } = useTooltipControlled({\n    isOpen: isOpen,\n    isDisabled,\n    focusStrategy: 'logical',\n    text: label,\n    onToggle: ({ value }) => {\n      setOpen(value);\n    }\n  });\n  const { onLogicalFocus, onLogicalBlur, ...tooltipEventHandlerProps } = tooltipProps;\n\n  return { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur };\n};\n","import { ComponentChildren, ComponentChild } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Text } from '../UNSAFE_Text';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTabBarContext } from './useTabBarContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { BoxAlignmentProps } from '../utils/UNSAFE_interpolations/boxalignment';\nimport { boxAlignmentInterpolations } from '../utils/UNSAFE_interpolations/boxalignment';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\nimport { Badge } from '../UNSAFE_Badge';\nimport { useConveyorBeltItem } from '../UNSAFE_ConveyorBelt/useConveyorBeltItem';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabBarItemTooltip } from './useTabBarItemTooltip';\nimport { tabBarItemVars } from './themes/TabBarItemContract.css';\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\n\ntype AriaProps = {\n  /**\n   * Accepts the tabpanel element's ID associated with the tab item\n   **/\n  'aria-controls'?: string;\n  /**\n   * Used by an item that renders an interactive popup\n   */\n  'aria-haspopup'?: boolean;\n};\n\nexport type BaseTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  itemKey: K;\n  /**\n   * Label of the TabBarItem. For icon only display this label is the content\n   * for aria-label and tooltip text of the Tab.\n   */\n  label: string;\n  /**\n   * The icon before the label in non-stack case, icon above the label in\n   * stacked case or the stand alone icon when no label is specified.\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata,\n   * that appears after the label in non stack case only.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label in non stack case only.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n  /**\n   * The control for enabling and disabling focusRing\n   */\n  showFocusRingOverride?: boolean;\n  /**\n   * The control for enabling and disabling selection indicator\n   */\n  selectionOverride?: boolean;\n  /**\n   * The control for overriding display value.\n   */\n  displayOverride?: string;\n} & AriaProps;\n\nexport function BaseTabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon,\n  showFocusRingOverride,\n  selectionOverride,\n  displayOverride,\n  'aria-controls': ariaControls,\n  'aria-haspopup': ariaHasPopup\n}: BaseTabBarItemProps<K>) {\n  const {\n    onSelect,\n    selection,\n    currentKey,\n    showFocusRing,\n    hideTooltip,\n    layout,\n    display,\n    size,\n    isEdgeBottom,\n    tabItemPrefix\n  } = useTabBarContext();\n\n  const isCurrent = currentKey === itemKey;\n\n  const { ref, ...conveyorBeltProps } = useConveyorBeltItem({ isCurrent });\n\n  //Selection\n  //Dependency on currentKey because upon removal selectionChange does not change hence no re render\n  //and it is still holding the deleted key as selection\n  const handlePress = useCallback(() => {\n    onSelect?.({ value: itemKey as K });\n  }, [itemKey, onSelect]);\n\n  const { pressProps } = usePress(handlePress);\n\n  const isSelected = selection === itemKey;\n\n  const isStacked = display === 'stacked' ? true : false;\n  const isIconOnly =\n    display === 'icons' || (displayOverride && displayOverride === 'icons') ? true : false;\n  const isTall = size === 'lg' ? true : false;\n  const labelRequirement = label && !(label === ' ' || label === undefined);\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        return <ErrorS color=\"danger\" />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const showTooltip = isIconOnly;\n  const { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur } =\n    useTabBarItemTooltip({ label, isDisabled: !showTooltip });\n  if (showTooltip) {\n    if (isCurrent && showFocusRing && !hideTooltip) {\n      onLogicalFocus(ref.current as HTMLElement);\n    } else if (!isCurrent || (isCurrent && !showFocusRing) || hideTooltip) {\n      onLogicalBlur();\n    }\n  }\n\n  const { direction } = useUser();\n  const makeFocusRingVisible =\n    showFocusRingOverride !== undefined ? showFocusRingOverride : showFocusRing;\n  const makeSelectionVisible = selectionOverride !== undefined ? selectionOverride : isSelected;\n  const {\n    classes,\n    styles: {\n      tabBarItemIcon,\n      tabBarItemIconStacked,\n      tabBarItemMetadata,\n      tabBarItemStackedBadge,\n      tabBarItemStackedBadgeRtl,\n      tabBarItemRemoveIcon\n    }\n  } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: makeSelectionVisible ? 'isSelected' : 'notSelected',\n    current: isCurrent ? 'isCurrent' : 'notCurrent',\n    focusRing: makeFocusRingVisible ? 'showFocusRing' : 'noFocusRing',\n    edgeBottom: isEdgeBottom ? 'isBottom' : 'notBottom'\n  });\n\n  const tabBarItem = classNames([classes]);\n  const tabBarItemIconClasses = classNames([\n    tabBarItemIcon,\n    (isStacked || isIconOnly || !labelRequirement) && tabBarItemIconStacked\n  ]);\n  const tabBarItemMetadataClasses = classNames([tabBarItemMetadata]);\n  const tabBarItemStackedBadgeClasses = classNames([\n    tabBarItemStackedBadge,\n    direction === 'rtl' && tabBarItemStackedBadgeRtl\n  ]);\n  const removeClass = classNames([tabBarItemRemoveIcon]);\n\n  const styleInterpolations = mergeInterpolations<\n    FlexitemProps & DimensionProps & BoxAlignmentProps\n  >([\n    ...Object.values(flexitemInterpolations),\n    ...Object.values(dimensionInterpolations),\n    ...Object.values(boxAlignmentInterpolations)\n  ]);\n\n  //This is for simple item where height and width need to be specified on the main div.\n  const tabDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto',\n    minWidth: '10.5x',\n    height: isTall ? tabBarItemVars.lgHeight : tabBarItemVars.mdHeight,\n    //This is needed for gap between icon/ label and remove icon in labelIconRenderer\n    gap: '2x'\n  });\n\n  //This is for complex item, where only flex dimensions needs to be applied as height and width comes from child Flex component.\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  const labelIconRenderer = () => {\n    return (\n      <div\n        data-oj-key={itemKey}\n        data-oj-removable={removeIcon ? 'true' : undefined}\n        id={tabItemPrefix + itemKey}\n        class={tabBarItem}\n        role=\"tab\"\n        aria-controls={ariaControls}\n        aria-selected={isSelected}\n        aria-haspopup={ariaHasPopup}\n        {...mergeProps(pressProps, tooltipEventHandlerProps, conveyorBeltProps)}\n        ref={ref}\n        style={tabDimensions}>\n        <Flex align=\"center\" justify=\"center\" flex=\"1 1 auto\" gap=\"2x\">\n          {!isIconOnly && !isStacked && icon && labelRequirement && (\n            <span class={tabBarItemIconClasses}>{icon}</span>\n          )}\n          {!isIconOnly && labelRequirement && (\n            <Text size=\"md\" weight=\"semiBold\">\n              {label}\n            </Text>\n          )}\n        </Flex>\n        {removeIcon && <span class={removeClass}>{removeIcon}</span>}\n      </div>\n    );\n  };\n\n  const complexItemRenderer = () => {\n    return (\n      <div\n        data-oj-key={itemKey}\n        data-oj-removable={removeIcon ? 'true' : undefined}\n        id={tabItemPrefix + itemKey}\n        class={tabBarItem}\n        role=\"tab\"\n        aria-controls={ariaControls}\n        aria-selected={isSelected}\n        aria-haspopup={ariaHasPopup}\n        {...mergeProps(pressProps, tooltipEventHandlerProps, conveyorBeltProps)}\n        ref={ref}\n        style={flexDimensions}>\n        <Flex flex=\"1 1 auto\">\n          <Flex\n            minWidth=\"10.5x\"\n            minHeight={isTall ? tabBarItemVars.lgHeight : '100%'}\n            height={\n              isStacked && labelRequirement ? tabBarItemVars.stackedHeight : tabBarItemVars.mdHeight\n            }\n            direction={isStacked && labelRequirement ? 'column' : 'row'}\n            gap=\"2x\"\n            align=\"center\"\n            justify=\"center\"\n            alignSelf=\"center\"\n            flex=\"1 1 auto\">\n            {(isStacked || isIconOnly || (!labelRequirement && icon)) && (\n              <div class={tabBarItemIconClasses}>\n                {icon}\n                <span class={tabBarItemStackedBadgeClasses}>\n                  {badge ? (\n                    <Badge size=\"xs\" variant=\"neutral\">\n                      {badge}\n                    </Badge>\n                  ) : null}\n                </span>\n              </div>\n            )}\n            {!isIconOnly && !isStacked && icon && labelRequirement && (\n              <span class={tabBarItemIconClasses}>{icon}</span>\n            )}\n            {!isIconOnly && labelRequirement && (\n              <Text size=\"md\" weight=\"semiBold\">\n                {label}\n              </Text>\n            )}\n            {!isStacked && !isIconOnly && badge && labelRequirement && (\n              <Badge size=\"md\" variant=\"neutralSubtle\">\n                {badge}\n              </Badge>\n            )}\n            {metadata && (\n              <span class={tabBarItemMetadataClasses}>\n                <Text>{'( ' + metadata + ' )'}</Text>\n              </span>\n            )}\n            {severityRequirement && (\n              <span class={tabBarItemIconClasses}>{IconComponent(severity)}</span>\n            )}\n          </Flex>\n          {removeIcon && <span class={removeClass}>{removeIcon}</span>}\n        </Flex>\n        {tooltipContent}\n      </div>\n    );\n  };\n\n  return badge || metadata || severity !== 'none' || isStacked || isIconOnly\n    ? complexItemRenderer()\n    : labelIconRenderer();\n}\n","import { BaseTabBarItem, BaseTabBarItemProps } from './BaseTabBarItem';\n\nexport type TabBarItemProps<K extends string | number> = Pick<\n  BaseTabBarItemProps<K>,\n  'itemKey' | 'label' | 'icon' | 'badge' | 'metadata' | 'severity' | 'aria-controls'\n>;\n/**\n * TabBarItem content can be created by using labels or icons or both.\n */\nexport function TabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity,\n  'aria-controls': ariaControls\n}: TabBarItemProps<K>) {\n  return (\n    <BaseTabBarItem\n      aria-controls={ariaControls}\n      itemKey={itemKey}\n      label={label}\n      icon={icon}\n      badge={badge}\n      metadata={metadata}\n      severity={severity}\n    />\n  );\n}\n"],"names":["useTabBarItemTooltip","label","isDisabled","isOpen","setOpen","useState","tooltipProps","tooltipContent","useTooltipControlled","focusStrategy","text","onToggle","value","onLogicalFocus","onLogicalBlur","tooltipEventHandlerProps","BaseTabBarItem","itemKey","icon","badge","metadata","severity","removeIcon","showFocusRingOverride","selectionOverride","displayOverride","ariaControls","ariaHasPopup","onSelect","selection","currentKey","showFocusRing","hideTooltip","layout","display","size","isEdgeBottom","tabItemPrefix","useTabBarContext","isCurrent","ref","conveyorBeltProps","useConveyorBeltItem","handlePress","useCallback","pressProps","usePress","isSelected","isStacked","isIconOnly","isTall","labelRequirement","undefined","severityRequirement","IconComponent","severityValue","_jsx","ErrorS","SvgErrorS","color","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","showTooltip","current","direction","useUser","makeFocusRingVisible","makeSelectionVisible","classes","styles","tabBarItemIcon","tabBarItemIconStacked","tabBarItemMetadata","tabBarItemStackedBadge","tabBarItemStackedBadgeRtl","tabBarItemRemoveIcon","useComponentTheme","TabBarItemRedwoodTheme","focusRing","edgeBottom","tabBarItem","classNames","tabBarItemIconClasses","tabBarItemMetadataClasses","tabBarItemStackedBadgeClasses","removeClass","styleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","dimensionInterpolations","boxAlignmentInterpolations","tabDimensions","flex","minWidth","height","tabBarItemVars","lgHeight","mdHeight","gap","flexDimensions","_jsxs","jsxs","id","class","role","mergeProps","style","children","Flex","minHeight","stackedHeight","align","justify","alignSelf","Badge","variant","jsx","Text","weight"],"mappings":"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"}