{"version":3,"file":"Modal-7bece8d5.js","sources":["../../src/UNSAFE_Modal/ModalBackdrop.tsx","../../src/UNSAFE_Modal/ModalManager.ts","../../src/UNSAFE_Modal/Modal.tsx"],"sourcesContent":["import { forwardRef, ForwardedRef } from 'preact/compat';\nimport { multiVariantStyles } from './themes/ModalStyles.css';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype Props = IntrinsicProps & {\n  /**\n   * Specifies the backdrop is visible or transparent. Default is 'scrim' (visible).\n   */\n  variant?: 'scrim' | 'transparent';\n};\n\nconst ModalBackdrop = forwardRef<HTMLDivElement, Props>(\n  ({ variant = 'scrim' }, ref: ForwardedRef<HTMLDivElement | null>) => {\n    const variantClasses = multiVariantStyles({\n      backdrop: variant === 'transparent' ? 'transparent' : 'scrim'\n    });\n\n    return <div ref={ref} class={variantClasses} />;\n  }\n);\n\nexport default ModalBackdrop;\n","import { focusWithin, allTabbableElements } from '../utils/PRIVATE_tabbableUtils';\n\ninterface Modal {\n  modalRef?: HTMLDivElement | null;\n}\n\n/**\n * CSS property backup type.\n */\ntype StyleBackup = Array<{\n  property: string;\n  value: string;\n}>;\n\n/**\n * ModalDescriptor. Associates an open Modal with overlayed aria-hidden children.\n */\ntype ModalDescriptor = {\n  modal: Modal;\n  ariaHiddenChildren: Element[];\n};\n\n/**\n * Returns an array of element's siblings.\n *\n * @param elem\n * @returns\n */\nfunction getSiblings(elem: Element): Element[] {\n  const siblings: Element[] = [];\n  let sibling = elem.previousSibling;\n  while (sibling != null) {\n    if (sibling.nodeType === 1) {\n      siblings.push(sibling as Element);\n    }\n    sibling = sibling.previousSibling;\n  }\n  sibling = elem.nextSibling;\n  while (sibling != null) {\n    if (sibling.nodeType === 1) {\n      siblings.push(sibling as Element);\n    }\n    sibling = sibling.nextSibling;\n  }\n  return siblings;\n}\n\n/**\n * Sets aria-hidden=true on Modal ancestors and siblings.\n *\n * @param modal\n * @returns An array of modified elements.\n */\nfunction setAriaHiddenOnBackgroundElements(modal: Modal) {\n  if (!modal.modalRef) {\n    return [];\n  }\n  const ariaHiddenElements: Element[] = [];\n  let node: Element | null = modal.modalRef.parentElement as Element;\n\n  do {\n    if (!node) {\n      break;\n    }\n    const siblings = getSiblings(node);\n    siblings.forEach((elem: Element) => {\n      if (elem.tagName.toLowerCase() !== 'script' && elem.getAttribute('aria-hidden') !== 'true') {\n        ariaHiddenElements.push(elem);\n        elem.setAttribute('aria-hidden', 'true');\n      }\n    });\n    node = node.parentElement;\n  } while (node && node.tagName.toLowerCase() !== 'body');\n\n  return ariaHiddenElements;\n}\n\n/**\n * Resets the aria-hidden state on previously aria-hidden elements.\n *\n * @param elements\n */\nfunction resetAriaHiddenOnBackgroundElements(elements: Element[]) {\n  elements.forEach((elem) => {\n    elem.removeAttribute('aria-hidden');\n  });\n}\n\nexport default class ModalManager {\n  /**\n   * Array of ModalDescriptors managed by ModalManager\n   */\n  private modals: ModalDescriptor[];\n  /**\n   * Backup of the main container's (body) CSS props potentially altered by Modal.\n   */\n  private styleBackup: StyleBackup;\n  /**\n   * A flag indicating that the ModalManager's focus handler is installed\n   */\n  private isFocusHandlerActive = false;\n\n  constructor() {\n    this.modals = [];\n    this.styleBackup = [];\n  }\n\n  /**\n   * A focus handler to keep focus in the top-most modal.\n   */\n  private focusHandler = (event: FocusEvent) => {\n    const topModal = this.getTopModal();\n    const target = event.target as HTMLElement;\n\n    // if there is an open modal and valid focus event target...\n    if (topModal && target) {\n      const modalElement = topModal.modalRef;\n      if (modalElement && !modalElement.contains(target)) {\n        // Focus is outside of the top modal container, let's try to fix it\n        const tabbableElements = allTabbableElements(modalElement);\n        if (tabbableElements.length > 0) {\n          // re-directing focus to the element inside top modal\n          focusWithin(modalElement);\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    }\n  };\n\n  /**\n   * Registers a modal with ModalManager\n   *\n   * @param modal\n   * @returns\n   */\n  push(modal: Modal) {\n    const modalIndex = this._findModalIndex(modal);\n\n    if (modalIndex !== -1) {\n      // Do not try to register the same modal multiple times\n      return;\n    }\n\n    this.modals.push({\n      modal: modal,\n      ariaHiddenChildren: setAriaHiddenOnBackgroundElements(modal)\n    });\n\n    // if this is the first modal in the container, block container scrolling\n    if (this.modals.length === 1) {\n      const ownerDocument = this._getOwnerDocument(modal.modalRef);\n      const scrollContainer = ownerDocument.body;\n\n      const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;\n      if (scrollBarWidth > 1) {\n        // in RTL, scrollbar is on the left\n        const scrollBarLeft =\n          Math.round(document.documentElement.getBoundingClientRect().left) +\n          document.documentElement.scrollLeft;\n\n        if (scrollBarLeft) {\n          this.styleBackup.push({\n            property: 'padding-left',\n            value: scrollContainer.style.paddingLeft\n          });\n          scrollContainer.style.paddingLeft = `${scrollBarWidth}px`;\n        } else {\n          this.styleBackup.push({\n            property: 'padding-right',\n            value: scrollContainer.style.paddingRight\n          });\n          scrollContainer.style.paddingRight = `${scrollBarWidth}px`;\n        }\n      }\n\n      this.styleBackup.push({ property: 'overflow', value: scrollContainer.style.overflow });\n      this.styleBackup.push({ property: 'overflow-x', value: scrollContainer.style.overflowX });\n      this.styleBackup.push({ property: 'overflow-y', value: scrollContainer.style.overflowY });\n\n      scrollContainer.style.overflow = 'hidden';\n    }\n\n    // also install the focus handler when the first modal becomes active\n    if (this.modals.length === 1 && !this.islegacyLayerSupportAvailable()) {\n      document.addEventListener('focus', this.focusHandler, true);\n      this.isFocusHandlerActive = true;\n    }\n  }\n\n  /**\n   * Unegisters a modal from ModalManager\n   *\n   * @param modal\n   * @returns\n   */\n  pop(modal: Modal) {\n    const modalIndex = this._findModalIndex(modal);\n\n    if (modalIndex === -1) {\n      // modal to be removed not found!'\n      return;\n    }\n\n    if (modalIndex !== this.modals.length - 1) {\n      // trying to remove modal out of order!\n      return;\n    }\n\n    // remove the focus handler when the last modal is about to be removed\n    if (this.isFocusHandlerActive && this.modals.length === 1) {\n      document.removeEventListener('focus', this.focusHandler, true);\n    }\n\n    const modalDescriptor = this.modals.pop();\n\n    if (modalDescriptor) {\n      resetAriaHiddenOnBackgroundElements(modalDescriptor?.ariaHiddenChildren);\n    }\n\n    // if this was the last modal in the container, restore its overflow props\n    if (this.modals.length === 0) {\n      const ownerDocument = this._getOwnerDocument(modal.modalRef);\n      const scrollContainer = ownerDocument.body;\n\n      this.styleBackup.forEach(({ property, value }) => {\n        scrollContainer.style.setProperty(property, value);\n      });\n    }\n  }\n\n  isTopModal(modal: Modal): boolean {\n    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;\n  }\n\n  getTopModal = (): Modal | null => {\n    return this.modals.length > 0 ? this.modals[this.modals.length - 1].modal : null;\n  };\n\n  private _findModalIndex(modal: Modal): number {\n    let index = -1;\n    this.modals.forEach((elem, idx) => {\n      if (elem.modal === modal) {\n        index = idx;\n        return;\n      }\n    });\n    return index;\n  }\n\n  private _getOwnerDocument(node: Node | null | undefined): Document {\n    return (node && node.ownerDocument) || document;\n  }\n\n  // TODO: replace with a proper API\n  /**\n   * Checks if the legacy popup service is available\n   */\n  private islegacyLayerSupportAvailable = () => {\n    return document.getElementById('__oj_zorder_container') !== null;\n  };\n}\n","import { useEffect, useRef } from 'preact/compat';\nimport { useModal } from './hooks/useModal';\nimport { Layer } from '../UNSAFE_Layer';\nimport ModalBackdrop from './ModalBackdrop';\nimport ModalManager from './ModalManager';\nimport { baseStyle } from './themes/ModalStyles.css';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\n// Global ModalManager singleton instance\nconst globalModalManager = new ModalManager();\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\ntype UseModalProps = Parameters<typeof useModal>[0];\ntype Props = UseModalProps &\n  IntrinsicProps & {\n    /**\n     * Determines if the modal is active.\n     */\n    isOpen: boolean;\n    /**\n     * Specifies if modal backdrop is visible or transparent. Default is 'scrim' (visible).\n     */\n    backdropVariant?: 'scrim' | 'transparent';\n    /**\n     * A callback to be invoked when a click on the modal backdrop occurs.\n     */\n    onBackdropClick?: (event: MouseEvent) => void;\n  };\n\n/**\n * Modal is a low-level component that provides the 'modality' feature with built-in overlay (scrim).\n * It is typically used for building higher-level components (such as 'Dialog' or 'Popup') that need\n * to support modal behavior preventing interaction with the rest of the page while the modal is open.\n */\nconst Modal = ({ children, isOpen, onBackdropClick, backdropVariant }: Props) => {\n  // get the global ModalContext instance\n  const modalManager = globalModalManager;\n\n  const { backdropRef } = useModal({ isOpen, onBackdropClick });\n  // main modal element ref\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  // modal ref cache, required to lookup the item in modal manager when the actual ref is unmounted\n  const modal = useRef<{\n    modalRef?: typeof modalRef.current;\n  }>({});\n\n  // populates and returns the modal ref cache\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    return modal.current;\n  };\n\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      modalManager?.push(getModal());\n    } else {\n      if (modal.current.modalRef) {\n        modalManager?.pop(getModal());\n      }\n    }\n  }, [isOpen, modalManager]);\n\n  useEffect(() => {\n    const modalRef = modal.current.modalRef;\n    return () => {\n      if (modalRef) {\n        modalManager?.pop(getModal());\n      }\n    };\n  }, [modalManager]);\n\n  return isOpen ? (\n    <Layer isModal={true}>\n      <div ref={modalRef} class={baseStyle}>\n        <ModalBackdrop ref={backdropRef} variant={backdropVariant} />\n        {children}\n      </div>\n    </Layer>\n  ) : null;\n};\n\nexport default Modal;\n"],"names":["ModalBackdrop","forwardRef","variant","ref","variantClasses","multiVariantStyles","backdrop","_jsx","class","getSiblings","elem","siblings","sibling","previousSibling","nodeType","push","nextSibling","setAriaHiddenOnBackgroundElements","modal","modalRef","ariaHiddenElements","node","parentElement","forEach","tagName","toLowerCase","getAttribute","setAttribute","globalModalManager","constructor","this","isFocusHandlerActive","focusHandler","event","topModal","getTopModal","target","modalElement","contains","allTabbableElements","length","focusWithin","preventDefault","stopPropagation","modals","islegacyLayerSupportAvailable","document","getElementById","styleBackup","_findModalIndex","ariaHiddenChildren","scrollContainer","_getOwnerDocument","body","scrollBarWidth","window","innerWidth","documentElement","clientWidth","Math","round","getBoundingClientRect","left","scrollLeft","property","value","style","paddingLeft","paddingRight","overflow","overflowX","overflowY","addEventListener","pop","modalIndex","removeEventListener","modalDescriptor","elements","removeAttribute","setProperty","isTopModal","index","idx","ownerDocument","children","isOpen","onBackdropClick","backdropVariant","modalManager","backdropRef","useModal","useRef","getModal","current","useEffect","jsx","Layer","isModal","_jsxs","baseStyle"],"mappings":"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"}