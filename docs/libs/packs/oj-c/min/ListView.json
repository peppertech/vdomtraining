[
  {
    "pack": "oj-c",
    "id": "oj-c.ListView",
    "name": "ListView",
    "memberof": "oj-c",
    "longname": "oj-c.ListView",
    "kind": "class",
    "classdesc": "<h3 id=\"listViewOverview-section\">\n  JET ListView Component\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#listViewOverview-section\"></a>\n</h3>\n\n<p>Description: The JET ListView enhances a HTML list element into a themable, WAI-ARIA compliant, mobile friendly component with advance interactive features.\nThe child content can be configured via a DataProvider which should be used for mutable data.</p>\n\n<p>For migration information from <code>oj-list-view</code> refer to the <a href=\"https://jet.oraclecorp.com/trunk/jsdocs/oj.ojListView.html#styling-section\">migration section</a> in the API docs.\n\n<h3 id=\"data-section\">\n  Data\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#data-section\"></a>\n</h3>\n<p>The JET ListView gets its data from a DataProvider.</p>\n\n<p><b>ArrayDataProvider</b> - Use this when the underlying data is an array object or an observableArray.  In the observableArray case, ListView will automatically react\nwhen items are added or removed from the array.  See the documentation for ArrayDataProvider for more details on the available options.</p>\n\n<p>Example of data provider content</p>\n<pre class=\"prettyprint\"><code>\n  &lt;oj-c-list-view aria-label=\"Accessible Summary\" data=\"[[dataProvider]]\">\n  &lt;/oj-c-list-view>\n</code></pre>\n\n<p>Check out the Listview Basic demo</a>\n\n<h3 id=\"keyboard-section\">\n  Coming Features\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#coming-features-section\"></a>\n</h3>\n\n<p>These features will be the domain of new, specialized components</p>\n<ul>\n   <li>Cards in grid layout</li>\n   <li>Cards in waterfall layout</li>\n   <li>Grouped list</li>\n   <li>Expandable list</li>\n</ul>\n\n<p>These features will be available in forthcoming versions</p>\n<ul>\n   <li>Drag and drop between components</li>\n   <li>Managing scroll position</li>\n</ul>\n\n<h3 id=\"keyboard-section\">\n  Keyboard End User Information\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#keyboard-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan = \"20\" nowrap>List Item</td>\n      <td><kbd>F2</kbd></td>\n      <td>Enters tabbable mode.  This enables keyboard action on elements inside the item, including navigate between focusable elements inside the item.  It can also be used to exit tabbable mode if already in tabbable mode.</td>\n    </tr>\n    <tr>\n      <td><kbd>Esc</kbd></td>\n      <td>Exits tabbable mode.</td>\n    </tr>\n    <tr>\n      <td><kbd>Tab</kbd></td>\n      <td>When in tabbable mode, navigates to next focusable element within the item.  If the last focusable element is reached, shift focus back to the first focusable element.\n          When not in tabbable mode, navigates to next focusable element on page (outside ListView).</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>When in tabbable mode, navigates to previous focusable element within the item.  If the first focusable element is reached, shift focus back to the last focusable element.\n          When not in tabbable mode, navigates to previous focusable element on page (outside ListView).</td>\n    </tr>\n    <tr>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Move focus to the item below.</td>\n    </tr>\n    <tr>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Move focus to the item above.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+DownArrow</kbd></td>\n      <td>Extend the selection to the item below.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+UpArrow</kbd></td>\n      <td>Extend the selection to the item above.</td>\n    </tr>\n    <tr>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles to select and deselect the current item.  If previous items have been selected, deselects them and selects the current item.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Space</kbd></td>\n      <td>Selects contiguous items from the last selected item to the current item.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Cmd/Ctrl+UpArrow</kbd></td>\n      <td>Reorder the current item up.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Cmd/Ctrl+DownArrow</kbd></td>\n      <td>Reorder the current item down.</td>\n    </tr>\n    <tr>\n      <td><kbd>Ctrl+Space</kbd></td>\n      <td>Toggles to select and deselect the current item while maintaining previous selected items.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"a11y-section\">\n  Accessibility\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#a11y-section\"></a>\n</h3>\n\n<p>Application should specify a value for the aria-label attribute with a meaningful description of the purpose of this list.</p>\n<p>Note that ListView uses the grid role and follows the <a href=\"https://www.w3.org/TR/wai-aria-practices/examples/grid/LayoutGrids.html\">Layout Grid</a> design as outlined in the <a href=\"https://www.w3.org/TR/wai-aria-practices/#grid\">grid design pattern</a></p>\n<p>Nesting collection components such as ListView, Table, TreeView, and ListView inside of ListView is not supported.</p>\n<p>When reorder feature is enabled, application should specify a live region which contains an announcement to notify assistive technologies that the item reordering happens.</p>\n\n<h4>Custom Colours</h4>\n<p>Using colors, including background and text colors, is not accessible if it is the only way information is conveyed.\nLow vision users may not be able to see the different colors, and in high contrast mode the colors are removed.\nThe Redwood approved way to show status is to use badge.</p>\n\n<h3 id=\"context-section\">\n  Item Context\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#context-section\"></a>\n</h3>\n\n<p>For all item options, developers can specify a function as the return value.  The function takes a single argument, which is an object that contains contextual information about the particular item.  This gives developers the flexibility to return different value depending on the context.</p>\n\n<p>The context parameter contains the following keys:</p>\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><kbd>data</kbd></td>\n      <td>The data of the item.  Note this is made available primarily to ease migration.\n          Applications should get the data from the item property instead.</td>\n    </tr>\n    <tr>\n      <td><kbd>item</kbd></td>\n      <td>An object that contains the data and metadata for the item.</td>\n    </tr>\n    <tr>\n      <td><kbd>isTabbable</kbd></td>\n      <td>A boolean indicating whether the item is in tabbable mode or not.\n         This should be used to implement conditional behavior for all tabbable elements, this avoids creating a keyboard trap when tabbing through a List.<br/>\n         This can be implemented as a conditional tabindex, for example <code>tabindex=\"[[!item.isTabbable && '-1']]\"</code>.<br/>\n         When composing with core pack components, this is not needed, as they are tabbable mode aware.\n        </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>The following keys are not currently supported:</p>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><kbd>componentElement</kbd></td>\n      <td>A reference to the root element of ListView.</td>\n    </tr>\n    <tr>\n      <td><kbd>datasource</kbd></td>\n      <td>A reference to the data source object.</td>\n    </tr>\n    <tr>\n      <td><kbd>index</kbd></td>\n      <td>The index of the item, where 0 is the index of the first item.  In the hierarchical case the index is relative to its parent.</td>\n    </tr>\n    <tr>\n      <td><kbd>key</kbd></td>\n      <td>The key of the item (this duplicates item.metadata.key and has been deprecated)</td>\n    </tr>\n    <tr>\n      <td><kbd>metadata</kbd></td>\n      <td>The metadata of the item (this is instead available in item)</td>\n    </tr>\n    <tr>\n      <td><kbd>parentElement</kbd></td>\n      <td>This will be supported by the Hierarchical list component and no longer applies to list view..</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"data-attributes-section\">\n  Custom Data Attributes\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#data-attributes-section\"></a>\n</h3>\n\n<p>ListView supports the following custom data attributes.\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Description</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><kbd>data-oj-as</kbd></td>\n      <td>Provides an alias for a specific template instance and has the same subproperties as the $current variable.</td>\n      <td>\n        <pre class=\"prettyprint\"><code>&lt;oj-c-list-view id=\"listView\">\n  &lt;template slot=\"itemTemplate\" data-oj-as=\"item\">\n  &lt;/template>\n&lt;/oj-c-list-view></code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td><kbd>data-oj-clickthrough</kbd></td>\n      <td><p>Specify on any element inside an item where you want to control whether ListView should perform actions triggered by\n          a click event originating from the element or one of its descendants.</p>\n          <p>For example, if you specify this attribute with a value of \"disabled\" on a link inside an item, then ListView\n          will not select or trigger itemAction event to be fired when user clicks on the link.</p>\n          <p>Note that the currentItem will still be updated to the item that the user clicked on.</p>\n          <p>Also note you do not need to set this attribute on core pack components such as oj-c-button, as it natively supports\n             disabling clickthrough.</p>\n      </td>\n      <td>\n        <pre class=\"prettyprint\"><code>&lt;oj-c-list-view id=\"listView\">\n  &lt;template slot=\"itemTemplate\">\n    &lt;a href=\"#\" data-oj-clickthrough=\"disabled\">&lt;/a>\n  &lt;/template>\n&lt;/oj-c-list-view></code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td><kbd>data-oj-manage-tabs</kbd></td>\n      <td><p>ListView does not manipulate the tabindex of the item content.  Applications should set the tabIndex of any focusable\n         element based on the isTabbableMode property from the context pass to the itemTemplate.</p>\n         <p>However, there will be cases where you can't control the tabindex of the content, for example, if you are using components from another team.</p>\n         <p>In that case, applications can specify this attribute on the element or one of its ancestors so that when the itemTemplate is processed,\n         it will scan and manipulate the tabindex of any focusable elements.</p>\n      </td>\n      <td>\n        <pre class=\"prettyprint\"><code>&lt;oj-c-list-view id=\"listView\">\n  &lt;template slot=\"itemTemplate\">\n    &lt;some-component-with-focusable-elements data-oj-manage-tabs>&lt;/some-component-with-focusable-elements>\n  &lt;/template>\n&lt;/oj-c-list-view></code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"suggestion-items-section\">\n  Suggestion Items\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#suggestion-items-section\"></a>\n</h3>\n\n<p>If <a href=\"ItemMetadata.html\">ItemMetadata</a> returned by the DataProvider contains suggestion field, ListView will apply special visual to those\n   items. The DataProvider must ensure the suggestion items are the first items returned by the initial fetchFirst call.</p>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-list-view",
    "tagWithBrackets": "<oj-c-list-view>",
    "domInterface": "CListViewElement",
    "ojPageTitle": "&lt;oj-c-list-view>",
    "ojcomponent": true,
    "isvcomponent": true,
    "camelCaseName": "ListView",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CListViewElement<K extends string | number,D> extends JetElement<ListViewElementSettableProperties<K,D>>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CListViewElement<K extends string | number,D> extends JetElement<ListViewElementSettableProperties<K,D>>"
      }
    ],
    "since": "15.0.0",
    "tsdeprecated": [
      {
        "type": "candidate",
        "since": "17.0.0"
      }
    ],
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "ojmodule": "list-view"
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#currentItem",
    "name": "currentItem",
    "kind": "member",
    "longname": "oj-c.ListView#currentItem",
    "optional": true,
    "scope": "instance",
    "ojwriteback": true,
    "readonly": true,
    "description": "The key of the item that currently has keyboard focus",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "string|number"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "K",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#currentItemOverride",
    "name": "currentItemOverride",
    "kind": "member",
    "longname": "oj-c.ListView#currentItemOverride",
    "optional": true,
    "scope": "instance",
    "description": "The key of the item that will have keyboard focus",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "{ rowKey: K }",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#currentItemOverride.rowKey",
    "name": "currentItemOverride.rowKey",
    "kind": "member",
    "longname": "oj-c.ListView#currentItemOverride.rowKey",
    "optional": false,
    "scope": "instance",
    "description": "",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "string|number"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "K",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#data",
    "name": "data",
    "kind": "member",
    "longname": "oj-c.ListView#data",
    "optional": true,
    "scope": "instance",
    "description": "The data source for ListView. Must be of type DataProvider.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "DataProvider|null"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "DataProvider<K, D>|null",
        "jsdocOverride": true,
        "module": {
          "DataProvider": "ojdataprovider"
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#gridlines",
    "name": "gridlines",
    "kind": "member",
    "longname": "oj-c.ListView#gridlines",
    "optional": true,
    "scope": "instance",
    "description": "Specifies whether the horizontal grid lines should be visible.  By default gridlines\nare hidden.\n\nIt takes the keys `item`, `top` and `bottom`,\neach of which are optional and take a value of \"hidden\" or \"visible\". `item`\ntoggles the presence of bottom gridlines except the last item,\nand `top` and `bottom` toggle the initial and trailing gridlines.\nBy default all gridlines are hidden.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.ListView.Gridlines",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#scrollPolicyOptions",
    "name": "scrollPolicyOptions",
    "kind": "member",
    "longname": "oj-c.ListView#scrollPolicyOptions",
    "optional": true,
    "scope": "instance",
    "description": "scrollPolicy options.\n<p>\nThe following options are supported:\n<ul>\n  <li>fetchSize: The number of items fetched each time when scroll to the end.</li>\n  <li>scroller: The css selector that locates the element in which listview uses to determine the scroll position as well as the maximum scroll position where scroll to the end will trigger a fetch.  If not specified then the root element of listview is used.</li>\n</ul>\nBy default, the next block of rows is fetched when the user scrolls to the end of the list/scroller. The fetchSize option determines how many rows are fetched in each block.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "{ fetchSize?: number; scroller?: string }",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#scrollPolicyOptions.fetchSize",
    "name": "scrollPolicyOptions.fetchSize",
    "kind": "member",
    "longname": "oj-c.ListView#scrollPolicyOptions.fetchSize",
    "optional": true,
    "scope": "instance",
    "description": "",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "number"
      ]
    }
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#scrollPolicyOptions.scroller",
    "name": "scrollPolicyOptions.scroller",
    "kind": "member",
    "longname": "oj-c.ListView#scrollPolicyOptions.scroller",
    "optional": true,
    "scope": "instance",
    "description": "",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "string"
      ]
    }
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#selected",
    "name": "selected",
    "kind": "member",
    "longname": "oj-c.ListView#selected",
    "optional": true,
    "scope": "instance",
    "ojwriteback": true,
    "description": "The current selected items in the ListView. An empty KeySet indicates nothing is selected.\nNote that property change event for the deprecated selection property will still be fire when\nselected property has changed. In addition, <a href=\"AllKeySetImpl.html\">AllKeySetImpl</a> set\ncan be used to represent select all state. In this case, the value for selection would have an\n'inverted' property set to true, and would contain the keys of the items that are not selected.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "ImmutableKeySet<K>",
        "jsdocOverride": true,
        "module": {
          "ImmutableKeySet": "ojkeyset"
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#selectionMode",
    "name": "selectionMode",
    "kind": "member",
    "longname": "oj-c.ListView#selectionMode",
    "optional": true,
    "scope": "instance",
    "description": "<p>The type of selection behavior that is enabled on the ListView. This attribute controls the number of selections that can be made via selection gestures at any given time.\n\n<p>If <code class=\"prettyprint\">single</code> or <code class=\"prettyprint\">multiple</code> is specified, selection gestures will be enabled, and the ListView's selection styling will be applied to all items specified by the <a href=\"#selected\">selected</a> attribute.\nIf <code class=\"prettyprint\">singleRequired</code> is specified, then the behavior is the same as single except that ListView will ensure there is an item selected at all times. Specifically, the user will not be able to de-selected a selected item.  And if selection is initially empty, ListView will select the first item.\nIf <code class=\"prettyprint\">none</code> is specified, selection gestures will be disabled, and the ListView's selection styling will not be applied to any items specified by the <a href=\"#selected\">selected</a> attribute.\n<p>Changing the value of this attribute will not affect the value of the <a href=\"#selected\">selected</a> attribute.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "ojvalues": [
      {
        "name": "multiple",
        "description": "Multiple items can be selected at the same time.",
        "displayName": "Multiple",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "none",
        "description": "Selection is disabled.",
        "displayName": "None",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "single",
        "description": "Only a single item can be selected at a time.",
        "displayName": "Single",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "singleRequired",
        "description": "Only a single item can be selected at a time. In addition, ListView will also ensure that an item is selected at all time.",
        "displayName": "Single Required",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"none\"",
    "type": {
      "names": [
        "\"none\"",
        "\"multiple\"",
        "\"single\"",
        "\"singleRequired\""
      ]
    }
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#contextMenuConfig",
    "name": "contextMenuConfig",
    "kind": "member",
    "longname": "oj-c.ListView#contextMenuConfig",
    "optional": true,
    "scope": "instance",
    "description": "Specifies a context menu configuration.\nIt takes the keys `accessibleLabel` and `items`,\nwhere `accessibleLabel` is optional and items required . `items` function returns an array\nof menu item object representations that indicates what menu items are going to be part of\nmenu based on some specific context menu context.\n<table>\n<tr><th>Context Menu Item Type</th><th>Def</th></tr>\n<tr><td>ContextMenuSeparator</td><td>{ type: 'separator'}</td></tr>\n<tr><td>MenuItem</td><td>{\ntype?: 'item';\nlabel: string;\nkey: string;\ndisabled?: boolean;\nonAction?: () => void;\nstartIcon?: MenuIcon;\nendIcon?: MenuIcon;\nvariant?: 'standard' | 'destructive';\n};</td></tr>\n<tr><td>ContextMenuSubMenu</td><td>{\ntype: 'submenu';\nlabel?: string;\ndisabled?: boolean;\nstartIcon?: string;\nitems?: Array&lt;ContextMenuItems&gt;;\n};</td></tr>\n<tr><td>ContextMenuSelectSingle</td><td>{\ntype: 'selectsingle';\nkey?: string;\nitems?: Array&lt;MenuSelectItem&gt;;\nselection?: string;\nonSelection?: (detail: { value: string }) => void;\n};</td></tr>\n<tr><td>ContextMenuSelectMultiple</td><td>{\ntype: 'selectmultiple';\nkey?: string;\nitems?: Array&lt;MenuSelectItem&gt;;\nselection?: Array&lt;string&gt;;\nonSelection?: (detail: { value: Array&lt;string&gt; }) => void;\n};</td></tr>\n<tr><td>MenuIcon</td><td>{\ntype?: 'class';\n    class: string;\n  }\n| {\n    type: 'img';\n   src: string;\n  };</td></tr>\n<tr><td>MenuSelectItem</td><td>{\nlabel: string;\ndisabled?: boolean;\nendIcon?: MenuIcon;\nvalue: string;\n}</td></tr>\n</table>",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.ListView.ContextMenuConfig<K, D>",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#reorderable",
    "name": "reorderable",
    "kind": "member",
    "longname": "oj-c.ListView#reorderable",
    "optional": true,
    "scope": "instance",
    "description": "The reorder option contains a subset of options for reordering items.\n\n<p>The following options are supported:</p>\n<ul>\n  <li>items: Enable or disable reordering the items within the same ListView using drag and drop or keyboard. Specify 'enabled' to enable reordering. Setting the value to <code class=\"prettyprint\">\"disabled\"</code> or setting the <code class=\"prettyprint\">\"reorderable\"</code> property\n             to <code class=\"prettyprint\">null</code> (or omitting it), disables reordering support.</li>\n</ul>",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "{ items?: 'enabled' | 'disabled' }",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#reorderable.items",
    "name": "reorderable.items",
    "kind": "member",
    "longname": "oj-c.ListView#reorderable.items",
    "optional": true,
    "scope": "instance",
    "description": "",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "defaultvalue": "\"disabled\"",
    "type": {
      "names": [
        "\"disabled\"",
        "\"enabled\""
      ]
    }
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#item",
    "name": "item",
    "kind": "member",
    "longname": "oj-c.ListView#item",
    "optional": true,
    "scope": "instance",
    "description": "The item option contains a subset of options for items.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "{ padding?: 'disabled' | 'enabled' | oj-c.ListView.ItemPadding; }",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#setProperty",
    "name": "setProperty",
    "kind": "function",
    "longname": "oj-c.ListView#setProperty",
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": "string"
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": "any"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#getProperty",
    "name": "getProperty",
    "kind": "function",
    "longname": "oj-c.ListView#getProperty",
    "description": "Retrieves the value of a property or a subproperty.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": "string"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#setProperties",
    "name": "setProperties",
    "kind": "function",
    "longname": "oj-c.ListView#setProperties",
    "description": "Performs a batch set of properties.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": "object"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#event:ojItemAction",
    "name": "ojItemAction",
    "kind": "event",
    "longname": "oj-c.ListView#event:ojItemAction",
    "description": "Triggered when user performs an action gesture on an item while ListView is in navigation mode.  The action gestures include:\n<ul>\n  <li>User clicks anywhere in an item</li>\n  <li>User taps anywhere in an item</li>\n  <li>User pressed enter key while item has focus</li>\n</ul>",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "context",
        "optional": false,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "oj-c.ListView.ListItemContextProps<K, D>",
            "jsdocOverride": true,
            "for": "context"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#event:ojFirstSelectedItem",
    "name": "ojFirstSelectedItem",
    "kind": "event",
    "longname": "oj-c.ListView#event:ojFirstSelectedItem",
    "description": "Triggered when data for the first selected item is available.  This can occurred when:\n<ul>\n  <li>ListView is initialized with a selection or first item is selected due to singleRequired selection mode.</li>\n  <li>Selection has changed.</li>\n  <li>Data for the first selected item is updated.</li>\n</ul>\nNote this event will only be enabled if selection-mode is set to <code class=\"prettyprint\">singleRequired</code>.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "key",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "K",
            "jsdocOverride": true,
            "for": "key"
          }
        ]
      },
      {
        "name": "data",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "D",
            "jsdocOverride": true,
            "for": "data"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#event:ojContextMenuAction",
    "name": "ojContextMenuAction",
    "kind": "event",
    "longname": "oj-c.ListView#event:ojContextMenuAction",
    "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "menuItemKey",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "contextMenuContext",
        "optional": false,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "oj-c.ListView.ListItemContextProps<K, D>",
            "jsdocOverride": true,
            "for": "contextMenuContext"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#event:ojContextMenuSelection",
    "name": "ojContextMenuSelection",
    "kind": "event",
    "longname": "oj-c.ListView#event:ojContextMenuSelection",
    "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "value",
        "optional": false,
        "type": {
          "names": [
            "string|Array<string>"
          ]
        }
      },
      {
        "name": "menuSelectionGroupKey",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "contextMenuContext",
        "optional": false,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "oj-c.ListView.ListItemContextProps<K, D>",
            "jsdocOverride": true,
            "for": "contextMenuContext"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#event:ojReorder",
    "name": "ojReorder",
    "kind": "event",
    "longname": "oj-c.ListView#event:ojReorder",
    "description": "Triggered after items are reordered within ListView via drag and drop or keyboard.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "reorderedKeys",
        "description": "An array of keys matching the new order of items",
        "optional": false,
        "type": {
          "names": [
            "Array<any>"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "Array<K>",
            "jsdocOverride": true,
            "for": "reorderedKeys"
          }
        ]
      },
      {
        "name": "itemKeys",
        "description": "An array of keys of the items that are moved",
        "optional": false,
        "type": {
          "names": [
            "Array<any>"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "Array<K>",
            "jsdocOverride": true,
            "for": "itemKeys"
          }
        ]
      },
      {
        "name": "referenceKey",
        "description": "The key of the item where the moved items will be dropped after. If the moved items were dropped at the very beginning, the referenceKey will be null.",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "K|null",
            "jsdocOverride": true,
            "for": "referenceKey"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#itemTemplate",
    "name": "itemTemplate",
    "kind": "member",
    "longname": "oj-c.ListView#itemTemplate",
    "description": "<p>The <code class=\"prettyprint\">itemTemplate</code> slot is used to specify the template for rendering each item in the List. The slot content must be a &lt;template> element.\n<p>When the template is executed for each item, it will have access to the binding context containing the following properties:</p>\n<ul>\n  <li>$current - an object that contains information for the current item.</li>\n</ul>",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "ojchild": false,
    "ojslot": true,
    "properties": [
      {
        "name": "data",
        "description": "The data of the item.  Note this is made available primarily to ease migration.\nApplications should get the data from the item property instead.",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "D",
            "jsdocOverride": true,
            "for": "data"
          }
        ]
      },
      {
        "name": "item",
        "description": "Contains the data and metadata of the item.",
        "optional": false,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "Item<K, D>",
            "jsdocOverride": true,
            "for": "item",
            "module": {
              "Item": "ojdataprovider"
            }
          }
        ]
      },
      {
        "name": "isTabbable",
        "description": "A boolean indicating whether the item is in tabbable mode or not.\nTemplate elements should not be tab-stops when the item is not in tabbable mode, this context can be used to implement\nconditional behavior for all tabbable child elements.",
        "optional": false,
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView#noData",
    "name": "noData",
    "kind": "member",
    "longname": "oj-c.ListView#noData",
    "description": "<p>The <code class=\"prettyprint\">noData</code> slot is used to specify the content to display when the list is empty. The slot content\nmust be a &lt;template&gt; element. If not specified then a default no data message will be displayed.",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "scope": "instance",
    "ojchild": false,
    "ojslot": true,
    "properties": []
  },
  {
    "id": "oj-c.ListView.keyboardDoc",
    "name": "keyboardDoc",
    "kind": "member",
    "longname": "oj-c.ListView.keyboardDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan = \"20\" nowrap>List Item</td>\n      <td><kbd>F2</kbd></td>\n      <td>Enters tabbable mode.  This enables keyboard action on elements inside the item, including navigate between focusable elements inside the item.  It can also be used to exit tabbable mode if already in tabbable mode.</td>\n    </tr>\n    <tr>\n      <td><kbd>Esc</kbd></td>\n      <td>Exits tabbable mode.</td>\n    </tr>\n    <tr>\n      <td><kbd>Tab</kbd></td>\n      <td>When in tabbable mode, navigates to next focusable element within the item.  If the last focusable element is reached, shift focus back to the first focusable element.\n          When not in tabbable mode, navigates to next focusable element on page (outside ListView).</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>When in tabbable mode, navigates to previous focusable element within the item.  If the first focusable element is reached, shift focus back to the last focusable element.\n          When not in tabbable mode, navigates to previous focusable element on page (outside ListView).</td>\n    </tr>\n    <tr>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Move focus to the item below.</td>\n    </tr>\n    <tr>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Move focus to the item above.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+DownArrow</kbd></td>\n      <td>Extend the selection to the item below.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+UpArrow</kbd></td>\n      <td>Extend the selection to the item above.</td>\n    </tr>\n    <tr>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles to select and deselect the current item.  If previous items have been selected, deselects them and selects the current item.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Space</kbd></td>\n      <td>Selects contiguous items from the last selected item to the current item.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Cmd/Ctrl+UpArrow</kbd></td>\n      <td>Reorder the current item up.</td>\n    </tr>\n    <tr>\n      <td><kbd>Shift+Cmd/Ctrl+DownArrow</kbd></td>\n      <td>Reorder the current item down.</td>\n    </tr>\n    <tr>\n      <td><kbd>Ctrl+Space</kbd></td>\n      <td>Toggles to select and deselect the current item while maintaining previous selected items.</td>\n    </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.ListView",
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "ojfragment": true
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView.Gridlines",
    "name": "Gridlines",
    "kind": "typedef",
    "longname": "oj-c.ListView.Gridlines",
    "scope": "static",
    "description": "",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "properties": [
      {
        "name": "item",
        "optional": true,
        "type": {
          "names": [
            "\"hidden\"",
            "\"visible\""
          ]
        }
      },
      {
        "name": "top",
        "optional": true,
        "type": {
          "names": [
            "\"hidden\"",
            "\"visible\""
          ]
        }
      },
      {
        "name": "bottom",
        "optional": true,
        "type": {
          "names": [
            "\"hidden\"",
            "\"visible\""
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView.ListItemContextProps",
    "name": "ListItemContextProps",
    "kind": "typedef",
    "longname": "oj-c.ListView.ListItemContextProps",
    "scope": "static",
    "description": "",
    "tsgenerictype": {
      "target": "Type",
      "value": "<K,D>",
      "for": "genericTypeParameters"
    },
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "properties": [
      {
        "name": "data",
        "description": "The data of the item.  Note this is made available primarily to ease migration.\nApplications should get the data from the item property instead.",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "D",
            "jsdocOverride": true,
            "for": "data"
          }
        ]
      },
      {
        "name": "item",
        "description": "Contains the data and metadata of the item.",
        "optional": false,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "Item<K, D>",
            "jsdocOverride": true,
            "for": "item",
            "module": {
              "Item": "ojdataprovider"
            }
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView.ContextMenuConfig",
    "name": "ContextMenuConfig",
    "kind": "typedef",
    "longname": "oj-c.ListView.ContextMenuConfig",
    "scope": "static",
    "description": "",
    "tsgenerictype": {
      "target": "Type",
      "value": "<K,D>",
      "for": "genericTypeParameters"
    },
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "properties": [
      {
        "name": "accessibleLabel",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "items",
        "optional": false,
        "type": {
          "names": [
            "function"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "(context: oj-c.ListView.ListItemContextProps<K, D>) => ContextMenuItems[]",
            "jsdocOverride": true,
            "for": "items"
          }
        ]
      }
    ]
  },
  {
    "memberof": "oj-c.ListView",
    "id": "oj-c.ListView.ItemPadding",
    "name": "ItemPadding",
    "kind": "typedef",
    "longname": "oj-c.ListView.ItemPadding",
    "scope": "static",
    "description": "",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "list-view.tsx",
      "path": "web/components/oj-c/list-view"
    },
    "properties": [
      {
        "name": "bottom",
        "optional": true,
        "type": {
          "names": [
            "\"disabled\"",
            "\"enabled\""
          ]
        }
      },
      {
        "name": "end",
        "optional": true,
        "type": {
          "names": [
            "\"disabled\"",
            "\"enabled\""
          ]
        }
      },
      {
        "name": "start",
        "optional": true,
        "type": {
          "names": [
            "\"disabled\"",
            "\"enabled\""
          ]
        }
      },
      {
        "name": "top",
        "optional": true,
        "type": {
          "names": [
            "\"disabled\"",
            "\"enabled\""
          ]
        }
      }
    ]
  }
]