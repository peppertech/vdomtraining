[
  {
    "pack": "oj-c",
    "id": "oj-c.FormLayout",
    "name": "FormLayout",
    "memberof": "oj-c",
    "longname": "oj-c.FormLayout",
    "kind": "class",
    "classdesc": "<h3 id=\"formLayoutOverview-section\">\n  JET FormLayout Component\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#formLayoutOverview-section\"></a>\n</h3>\n\n<p>Description: The oj-c-form-layout component provides a responsive layout capability to lay out child\nelements in the row or column direction where the number of columns displayed depends on the available\nwidth of the container.  Child components are responsible for rendering the label with the alignment as\nspecified by the oj-c-form-layout's label-edge property, which the child components consume.</p>\n\n<pre class=\"prettyprint\"><code>&lt;oj-c-form-layout columns=\"2\">\n  &ltoj-c-input-text label-hint=\"First Name\">&lt/oj-c-input-text>\n  &ltoj-c-input-text label-hint=\"Last Name\">&lt/oj-c-input-text>\n  &ltoj-c-input-text label-hint=\"address\" column-span=\"2\">&lt/oj-c-input-text>\n&lt;/oj-c-form-layout></code></pre>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-form-layout",
    "tagWithBrackets": "<oj-c-form-layout>",
    "domInterface": "CFormLayoutElement",
    "ojPageTitle": "&lt;oj-c-form-layout>",
    "ojcomponent": true,
    "isvcomponent": true,
    "camelCaseName": "FormLayout",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CFormLayoutElement extends JetElement<FormLayoutElementSettableProperties>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CFormLayoutElement extends JetElement<FormLayoutElementSettableProperties>"
      }
    ],
    "since": "16.0.0",
    "tsdeprecated": [
      {
        "type": "candidate",
        "since": "17.0.0"
      }
    ],
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "ojmodule": "form-layout"
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#columns",
    "name": "columns",
    "kind": "member",
    "longname": "oj-c.FormLayout#columns",
    "optional": true,
    "scope": "instance",
    "description": "Specifies the absolute number of columns and overrides maxColumns, if the value is\npositive. If the value is not positive, then this attribute is ignored and max-columns\nis used to determine the number of columns. This attribute should only be used in\nspecial circumstances where you need a specific number of columns even if the fields\nwill be narrower than the suggested minimum (a nested form layout is an example).",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "defaultvalue": 0,
    "type": {
      "names": [
        "number"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#columnSpan",
    "name": "columnSpan",
    "kind": "member",
    "longname": "oj-c.FormLayout#columnSpan",
    "optional": true,
    "scope": "instance",
    "description": "Specifies how many columns this component should span.\nThis only takes effect when this component is a child of a form layout\nthat has direction 'row'.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "defaultvalue": 1,
    "type": {
      "names": [
        "number"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#direction",
    "name": "direction",
    "kind": "member",
    "longname": "oj-c.FormLayout#direction",
    "optional": true,
    "scope": "instance",
    "description": "Specifies if the child elements should be laid out column first or row first.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "ojvalues": [
      {
        "name": "column",
        "description": "Components are laid out in columns.",
        "displayName": "Column",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "row",
        "description": "Components are laid out in rows.",
        "displayName": "Row",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"row\"",
    "type": {
      "names": [
        "\"row\"",
        "\"column\""
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#fullWidth",
    "name": "fullWidth",
    "kind": "member",
    "longname": "oj-c.FormLayout#fullWidth",
    "optional": true,
    "scope": "instance",
    "description": "Indicates if the form layout will use 100% of the container's width, and will ignore the theme's max column width.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "defaultvalue": false,
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#labelEdge",
    "name": "labelEdge",
    "kind": "member",
    "longname": "oj-c.FormLayout#labelEdge",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nSpecifies how the child form components should position their labels.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were 'inside'.\n</p>\n<p>\nWhen using the oj-c-form-layout custom element inside of a VDOM application, this property will not propagate down to the child components.\nThis is because binding propagation is Knockout-based, and VDOM applications are not Knockout-based.\n</p>",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "ojvalues": [
      {
        "name": "inside",
        "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
        "displayName": "Inside",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "start",
        "description": "The label will be placed before the start of the component.",
        "displayName": "Start",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "top",
        "description": "The label will be placed on top of the component.",
        "displayName": "Top",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "type": {
      "names": [
        "\"start\"",
        "\"top\"",
        "\"inside\""
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#labelStartWidth",
    "name": "labelStartWidth",
    "kind": "member",
    "longname": "oj-c.FormLayout#labelStartWidth",
    "optional": true,
    "scope": "instance",
    "description": "<p> The width of the label when labelEdge is 'start'.</p>\n<p> This attribute accepts values of type\n<code>0 | `--${string}` | `${number}%` | `${number}x` | `calc(${string})`</code></p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were '33%'.\n</p>\n<p>\nWhen using the oj-c-form-layout custom element inside of a VDOM application, this property will not propagate down to the child components.\nThis is because binding propagation is Knockout-based, and VDOM applications are not Knockout-based.\n</p>",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "type": {
      "names": [
        "number|string"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#labelWrapping",
    "name": "labelWrapping",
    "kind": "member",
    "longname": "oj-c.FormLayout#labelWrapping",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nShould the labels wrap or truncate when there is not enough available space.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were 'wrap'.\n</p>\n<p>\nWhen using the oj-c-form-layout custom element inside of a VDOM application, this property will not propagate down to the child components.\nThis is because binding propagation is Knockout-based, and VDOM applications are not Knockout-based.\n</p>",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "tsdeprecated": [
      {
        "type": "deprecated",
        "since": "18.0.0",
        "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
      }
    ],
    "ojvalues": [
      {
        "name": "truncate",
        "description": "Label will truncate if needed.",
        "displayName": "Truncate",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "wrap",
        "description": "Label will wrap if needed.",
        "displayName": "Wrap",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "type": {
      "names": [
        "\"truncate\"",
        "\"wrap\""
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#maxColumns",
    "name": "maxColumns",
    "kind": "member",
    "longname": "oj-c.FormLayout#maxColumns",
    "optional": true,
    "scope": "instance",
    "description": "Specifies how many columns should be displayed.\nThis property is used when the actual number of columns rendered\nis responsive and depends on the container's available width.\nNote that maxColumns will be ignored if columns has a positive value.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "defaultvalue": 1,
    "type": {
      "names": [
        "number"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#readonly",
    "name": "readonly",
    "kind": "member",
    "longname": "oj-c.FormLayout#readonly",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nWhether the child components should be rendered as readonly.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were 'false'.\n</p>\n<p>\nWhen using the oj-c-form-layout custom element inside of a VDOM application, this property will not propagate down to the child components.\nThis is because binding propagation is Knockout-based, and VDOM applications are not Knockout-based.\n</p>",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#userAssistanceDensity",
    "name": "userAssistanceDensity",
    "kind": "member",
    "longname": "oj-c.FormLayout#userAssistanceDensity",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nSpecifies the density of the children form component's user assistance presentation. It can be shown inline with\nreserved rows to prevent reflow if a user assistance text shows up, inline without reserved rows that would\nreflow if a user assistance text shows up, or it can be shown compactly in a popup instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were \"efficient\".\n</p>\n<p>\nWhen using the oj-c-form-layout custom element inside of a VDOM application, this property will not propagate down to the child components.\nThis is because binding propagation is Knockout-based, and VDOM applications are not Knockout-based.\n</p>",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "ojvalues": [
      {
        "name": "reflow",
        "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
        "displayName": "Reflow",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "efficient",
        "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
        "displayName": "Efficient",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "compact",
        "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
        "displayName": "Compact",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "type": {
      "names": [
        "\"compact\"",
        "\"reflow\"",
        "\"efficient\""
      ]
    }
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#setProperty",
    "name": "setProperty",
    "kind": "function",
    "longname": "oj-c.FormLayout#setProperty",
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": "string"
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": "any"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#getProperty",
    "name": "getProperty",
    "kind": "function",
    "longname": "oj-c.FormLayout#getProperty",
    "description": "Retrieves the value of a property or a subproperty.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": "string"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#setProperties",
    "name": "setProperties",
    "kind": "function",
    "longname": "oj-c.FormLayout#setProperties",
    "description": "Performs a batch set of properties.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "scope": "instance",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": "object"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.FormLayout",
    "id": "oj-c.FormLayout#Default",
    "name": "Default",
    "kind": "member",
    "longname": "oj-c.FormLayout#Default",
    "description": "The default slot is the content of the form layout. The oj-c-form-layout element expects core pack form component children for the default slot.",
    "meta": {
      "filename": "form-layout.tsx",
      "path": "web/components/oj-c/form-layout"
    },
    "scope": "instance",
    "ojchild": true,
    "ojslot": false
  }
]