{
  "name": "dialog",
  "version": "18.0.2",
  "jetVersion": "^18.0.2",
  "pack": "oj-c",
  "type": "composite",
  "dependencyScope": "runtime",
  "license": "https://opensource.org/licenses/UPL",
  "implements": [
    "CDialogElement"
  ],
  "description": "A Dialog is a floating window that typically contains a header, content and footer area. A Dialog is typically modal and centered in viewport.",
  "displayName": "Dialog",
  "help": "oj-c.Dialog.html",
  "main": "oj-c/dialog",
  "status": [
    {
      "type": "candidate",
      "since": "18.0.0"
    }
  ],
  "extension": {
    "catalog": {
      "category": "Layout & Nav"
    },
    "vbdt": {
      "module": "oj-c/dialog"
    },
    "oracle": {
      "icon": "oj-ux-ico-dialog",
      "uxSpecs": [
        "dialog"
      ]
    },
    "webelement": {
      "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DialogWebElement.html"
    }
  },
  "since": "18.0.0",
  "slots": {
    "header": {
      "description": "The content node to be shown within the Dialog header. If a header slot is not specified by the user, the dialog-title attribute will be used instead."
    },
    "body": {
      "description": "The content node to be shown within the Dialog body."
    },
    "footer": {
      "description": "The content node to be shown within the Dialog footer."
    }
  },
  "properties": {
    "cancelBehavior": {
      "type": "string",
      "description": "Specifies the cancel behavior of the Dialog. Note that the cancelBehavior applies to both automatic and user-defined headers.",
      "displayName": "Cancel behavior",
      "help": "#cancelBehavior",
      "propertyEditorValues": {
        "icon": {
          "description": "A close icon will automatically be created. The dialog will close when it has focus and user presses the escape (ESC) key.",
          "displayName": "icon"
        },
        "escape": {
          "description": "The dialog will close when it has focus and user presses the escape (ESC) key. A close icon will not be created.",
          "displayName": "escape"
        },
        "none": {
          "description": "A close icon will not be created. No actions will be associated with the escape key.",
          "displayName": "none"
        }
      },
      "enumValues": [
        "none",
        "icon",
        "escape"
      ],
      "value": "none"
    },
    "dialogTitle": {
      "type": "string",
      "description": "Specifies title if header slot is not defined (custom header).",
      "displayName": "dialogTitle",
      "help": "#dialogTitle"
    },
    "dragAffordance": {
      "type": "string",
      "description": "Specifies whether the Dialog is draggable.",
      "displayName": "dragAffordance",
      "help": "#dragAffordance",
      "propertyEditorValues": {
        "none": {
          "description": "The dialog will not be draggable.",
          "displayName": "none"
        },
        "header": {
          "description": "The dialog will be draggable by the header.",
          "displayName": "header"
        }
      },
      "enumValues": [
        "none",
        "header"
      ],
      "value": "none"
    },
    "headerDecoration": {
      "type": "string",
      "description": "Specifies whether decorative stripe at the top is present.",
      "displayName": "headerDecoration",
      "help": "#headerDecoration",
      "propertyEditorValues": {
        "on": {
          "description": "Renders a textured strip at the top of the dialog header in the Redwood theme.",
          "displayName": "on"
        },
        "off": {
          "description": "No decoration is rendered.",
          "displayName": "off"
        }
      },
      "enumValues": [
        "off",
        "on"
      ],
      "value": "on"
    },
    "launcher": {
      "type": "string|Element",
      "description": "Specifies Dialog's launcher. After Dialog closes, it returns focus to the launcher.",
      "displayName": "launcher",
      "help": "#launcher"
    },
    "modality": {
      "type": "string",
      "description": "Specifies modality of the Dialog.",
      "displayName": "modality",
      "help": "#modality",
      "propertyEditorValues": {
        "modal": {
          "description": "The dialog is modal. Interactions with other page elements are disabled. Modal dialogs overlay other page elements.",
          "displayName": "on"
        },
        "modeless": {
          "description": "Defines a modeless dialog.",
          "displayName": "off"
        }
      },
      "enumValues": [
        "modal",
        "modeless"
      ],
      "value": "modal"
    },
    "opened": {
      "type": "boolean",
      "description": "Specifies whether the Dialog is open.",
      "displayName": "opened",
      "help": "#opened",
      "extension": {
        "webelement": {
          "exceptionStatus": [
            {
              "type": "getterOnly"
            }
          ]
        }
      },
      "writeback": true,
      "value": false
    },
    "resizeBehavior": {
      "type": "string",
      "description": "Specifies whether the Dialog is resizable.",
      "displayName": "resizeBehavior",
      "help": "#resizeBehavior",
      "propertyEditorValues": {
        "none": {
          "description": "The dialog will not be interactively resizable.",
          "displayName": "none"
        },
        "resizable": {
          "description": "\tThe dialog will be interactively resizable.",
          "displayName": "resizable"
        }
      },
      "enumValues": [
        "none",
        "resizable"
      ],
      "value": "none"
    },
    "anchor": {
      "type": "string|Element|object",
      "description": "Specifies Dialog's anchor. Dialog is placed relative to its anchor. If not specified, it is placed relative to window.",
      "displayName": "anchor",
      "help": "#anchor"
    },
    "placement": {
      "type": "string",
      "description": "Specifies the location the dialog will appear relative to another element. If not specified, the default dialog position is \"center\" on desktop and \"bottom-start\" on phone.",
      "displayName": "placement",
      "help": "#placement",
      "enumValues": [
        "center",
        "end",
        "start",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "start-top",
        "start-bottom",
        "bottom-start",
        "bottom-end",
        "end-top",
        "end-bottom"
      ]
    },
    "offset": {
      "type": "number|object",
      "description": "Specifies displacement of the Dialog from the anchor element placement along the specified axes. The offset object consists of mainAxis and crossAxis properties. The direction in which these propertie are applied depends on the current value of the position property. If a number is used, it represents the main axis. The <code>mainAxis</code> property represents the distance between the Popup and the anchor. The <code>crossAxis</code> property represents the deviation in the opposite axis to the main axis - the skidding between the Popup and the anchor.",
      "displayName": "offset",
      "help": "#offset"
    },
    "width": {
      "type": "number|string",
      "description": "Specifies width of the Dialog.",
      "displayName": "minWidth",
      "help": "#minWidth"
    },
    "minWidth": {
      "type": "number|string",
      "description": "Specifies minWidth of the Dialog.",
      "displayName": "minWidth",
      "help": "#minWidth"
    },
    "maxWidth": {
      "type": "number|string",
      "description": "Specifies maxWidth of the Dialog.",
      "displayName": "maxWidth",
      "help": "#maxWidth"
    },
    "height": {
      "type": "number|string",
      "description": "Specifies height of the Dialog.",
      "displayName": "height",
      "help": "#height"
    },
    "minHeight": {
      "type": "number|string",
      "description": "Specifies minHeight of the Dialog.",
      "displayName": "minHeight",
      "help": "#minHeight"
    },
    "maxHeight": {
      "type": "number|string",
      "description": "Specifies maxHeight of the Dialog.",
      "displayName": "maxHeight",
      "help": "#maxHeight"
    }
  },
  "events": {
    "ojOpen": {
      "description": "Triggered immediately after the Dialog opens.",
      "displayName": "open",
      "help": "#event:open"
    },
    "ojBeforeClose": {
      "cancelable": true,
      "description": "Triggered immediately before the Dialog closes. Call <code class=\"prettyprint\">event.preventDefault()</code> in the event listener to veto the event synchronously, which prevents the Dialog from closing. Call <code class=\"prettyprint\">event.detail.accept(Promise.reject());</code> in the event listener to veto the event asynchronously, which prevents the Dialog from closing.",
      "displayName": "beforeClose",
      "help": "#event:beforeClose",
      "detail": {
        "accept": {
          "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
          "type": "function"
        }
      }
    },
    "ojClose": {
      "description": "Triggered immediately after the Dialog closes.",
      "displayName": "close",
      "help": "#event:close"
    },
    "ojFocus": {
      "description": "Triggered immediately after the Dialog receives focus.",
      "displayName": "onOjFocus",
      "help": "#event:onOjFocus"
    },
    "ojDragStart": {
      "description": "Triggered immediately before the Dialog moves.",
      "displayName": "onOjDragStart",
      "help": "#event:onOjDragStart"
    },
    "ojDragMove": {
      "description": "Triggered when the Dialog moves.",
      "displayName": "onOjDragMove",
      "help": "#event:onOjDragMove"
    },
    "ojDragEnd": {
      "description": "Triggered immediately after the Dialog stops moving.",
      "displayName": "onOjDragEnd",
      "help": "#event:onOjDragEnd"
    },
    "ojResizeStart": {
      "description": "Triggered immediately before the Dialog resizes.",
      "displayName": "onOjResizeStart",
      "help": "#event:onOjResizeStart"
    },
    "ojResize": {
      "description": "Triggered when the Dialog resizes.",
      "displayName": "onOjResize",
      "help": "#event:onOjResize"
    },
    "ojResizeEnd": {
      "description": "Triggered immediately after the Dialog stops resizing.",
      "displayName": "onOjResizeEnd",
      "help": "#event:onOjResizeEnd"
    }
  },
  "methods": {
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}