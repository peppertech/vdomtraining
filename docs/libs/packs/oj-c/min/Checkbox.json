[
  {
    "pack": "oj-c",
    "id": "oj-c.Checkbox",
    "name": "Checkbox",
    "memberof": "oj-c",
    "longname": "oj-c.Checkbox",
    "kind": "class",
    "classdesc": "<h3 id=\"checkboxOverview-section\">\n  JET Checkbox Component\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#checkboxOverview-section\"></a>\n</h3>\n\nCheckbox is a single standalone checkbox control. It represents a boolean value.\n\n<p>The Checkbox label is placed in the default slot and can be a short string or block of text\n</p>\n\n<pre class=\"prettyprint\">\n<code>\n&lt;oj-c-checkbox value=\"false\">\nI Agree\n&lt;/oj-c-checkbox>\n</code>\n</pre>\n\n\n<h3 id=\"touch-section\">\nTouch End User Information\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#touch-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tap</kbd></td>\n      <td> Select/unselect the checkbox</td>\n    </tr>\n    <tr>\n      <td>Checkbox's Label</td>\n      <td><kbd>Tap</kbd></td>\n      <td> Select/unselect the corresponding checkbox</td>\n   </tr>\n  </tbody>\n</table>\n\n<h3 id=\"keyboard-section\">\nKeyboard End User Information\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#keyboard-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Set focus on the checkbox.\n      Disabled checkboxes are not focusable.</td>\n    </tr>\n    <tr>\n      <td>Checkbox</td>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles the checkbox; If the checkbox is unselected, it will select it and vice versa.</td>\n    </tr>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tab</kbd></td>\n      <td>Focus goes to the next focusable item after the oj-c-checkbox or help icon if present.</td>\n    </tr>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>Sets focus to the previous focusable item before the oj-c-checkbox.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"a11y-section\">\nAccessibility\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#a11y-section\"></a>\n</h3>\n\n<p>Text as a label is required in the default slot to associate with the checkbox element</p>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-checkbox",
    "tagWithBrackets": "<oj-c-checkbox>",
    "domInterface": "CCheckboxElement",
    "ojPageTitle": "&lt;oj-c-checkbox>",
    "ojcomponent": true,
    "isvcomponent": true,
    "camelCaseName": "Checkbox",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CCheckboxElement extends JetElement<CheckboxElementSettableProperties>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CCheckboxElement extends JetElement<CheckboxElementSettableProperties>"
      }
    ],
    "since": "16.0.0",
    "tsdeprecated": [
      {
        "type": "candidate",
        "since": "17.0.0"
      }
    ],
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "ojmodule": "checkbox"
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#containerReadonly",
    "name": "containerReadonly",
    "kind": "member",
    "longname": "oj-c.Checkbox#containerReadonly",
    "optional": true,
    "scope": "instance",
    "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.\nThis affects whether a readonly component renders in full or mixed readonly mode.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#columnSpan",
    "name": "columnSpan",
    "kind": "member",
    "longname": "oj-c.Checkbox#columnSpan",
    "optional": true,
    "scope": "instance",
    "description": "Specifies how many columns this component should span.\nThis only takes effect when this component is a child of a form layout\nthat has direction 'row'.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "defaultvalue": 1,
    "type": {
      "names": [
        "number"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#disabled",
    "name": "disabled",
    "kind": "member",
    "longname": "oj-c.Checkbox#disabled",
    "optional": true,
    "scope": "instance",
    "description": "Whether the component is disabled. The default is false.\n\n<p>\nWhen the <code class=\"prettyprint\">disabled</code> property changes due to programmatic\nintervention, the component may clear messages and run validation in some cases. </br>\n<ul>\n<li>when a required component is initialized as disabled\n<code class=\"prettyprint\">value=\"{{currentValue}}\" required disabled</code>,\ndeferred validation is skipped.</li>\n<li>when a disabled component is enabled,\n <ul>\n <li>if component is invalid and showing messages then all component messages are cleared,\n and full validation run using the display value.\n  <ul>\n   <li>if there are validation errors, they are shown.</li>\n   <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n   property is updated. Page authors can listen to the <code class=\"prettyprint\">valueChanged</code>\n   event to clear custom errors.</li>\n  </ul>\n </li>\n\n <li>if component is valid and has no errors then deferred validation is run.\n   <ul>\n   <li>if there is a deferred validation error, then the valid property is updated. </li>\n   </ul>\n </li>\n <li>if component is invalid and deferred errors then component messages are cleared and\n deferred validation re-run.\n   <ul>\n   <li>if there is a deferred validation error, then the valid property is updated.</li>\n   </ul>\n </li>\n </ul>\n</li>\n<li>when enabled component is disabled then no validation is run and the component appears\ndisabled.</li>\n</ul>\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "defaultvalue": false,
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#displayOptions",
    "name": "displayOptions",
    "kind": "member",
    "longname": "oj-c.Checkbox#displayOptions",
    "optional": true,
    "scope": "instance",
    "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.Checkbox.DisplayOptionsProps",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#help",
    "name": "help",
    "kind": "member",
    "longname": "oj-c.Checkbox#help",
    "optional": true,
    "scope": "instance",
    "description": "Form component help information.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.Checkbox.Help",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#helpHints",
    "name": "helpHints",
    "kind": "member",
    "longname": "oj-c.Checkbox#helpHints",
    "optional": true,
    "scope": "instance",
    "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "object"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.Checkbox.HelpHints",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#messagesCustom",
    "name": "messagesCustom",
    "kind": "member",
    "longname": "oj-c.Checkbox#messagesCustom",
    "optional": true,
    "scope": "instance",
    "ojwriteback": true,
    "description": "List of messages an app would add to the component when it has business/custom validation\nerrors that it wants the component to show. This allows the app to perform further validation\nbefore sending data to the server. When this option is set the message shows to the\nuser right away. To clear the custom message, set <code class=\"prettyprint\">messagesCustom</code>\nback to an empty array.<br/>\n<p>\nSee the <a href=\"#validation-section\">Validation and Messages</a> section\nfor details on when the component clears <code class=\"prettyprint\">messagesCustom</code>;\nfor example, when full validation is run.\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "defaultvalue": "[]",
    "type": {
      "names": [
        "Array<object>"
      ]
    },
    "tstype": [
      {
        "target": "Type",
        "value": "Array<oj-c.Checkbox.ComponentMessageItem>",
        "jsdocOverride": true
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#readonly",
    "name": "readonly",
    "kind": "member",
    "longname": "oj-c.Checkbox#readonly",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nWhether the component is readonly. The readonly property sets or returns whether an element\nis readonly, or not. A readonly element cannot be modified. However, a user can tab to it,\nhighlight it, focus on it, and copy the text from it. If you want to prevent the user from\ninteracting with the element, use the disabled property instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were false.\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#required",
    "name": "required",
    "kind": "member",
    "longname": "oj-c.Checkbox#required",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nThis property set to <code class=\"prettyprint\">false</code> implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to <code class=\"prettyprint\">true</code> implies that a value is required to be provided by the user.\n</p>\n<p>\nIn the Redwood theme, by default, a Required text is rendered inline when the field is empty.\n</p>\n<p>The Required error text is based on Redwood UX designs, and it is not recommended that\nit be changed.\nTo override the required error message,\nuse the <code class=\"prettyprint\">required-message-detail</code> attribute.\nThe component's label text is passed in as a token {label} and can be used in the message detail.\n</p>\n<p>When required is set to true, an implicit\nrequired validator is created, i.e.,\n<code class=\"prettyprint\">new RequiredValidator()</code>. The required validator is the only\nvalidator to run during initial render, and its error is not shown to the user at this time;\nthis is called deferred validation. The required validator also runs during normal validation;\nthis is when the errors are shown to the user.\nSee the <a href=\"#validation-section\">Validation and Messaging</a> section for details.\n</p>\n<p>\nWhen the <code class=\"prettyprint\">required</code> property changes due to programmatic intervention,\nthe component may clear component messages and run validation, based on the current state it's in. </br>\n\n<h4>Running Validation when required property changes</h4>\n<ul>\n<li>if component is valid when required is set to true, then it runs deferred validation on\nthe value property. If the field is empty, the valid state is invalidHidden. No errors are\nshown to the user.\n</li>\n<li>if component is valid when required is set from true to false, then no validation is run.\n</li>\n<li>if component is invalid and has deferred messages (invalidHidden) when required is set to false, then\ncomponent messages are cleared (messages-custom messages are not cleared)\nbut no deferred validation is run because required is false.\n</li>\n<li>if component is invalid and currently showing invalid messages (invalidShown) when required is changed\nto either true or false, then\ncomponent messages are cleared and normal validation is run using the current display value.\n<ul>\n  <li>if there are validation errors, then <code class=\"prettyprint\">value</code>\n  property is not updated and the error is shown.\n  </li>\n  <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n  property is updated; page author can listen to the <code class=\"prettyprint\">valueChanged</code>\n  event on the component to clear custom errors.</li>\n</ul>\n</li>\n</ul>\n\n<h4>Clearing Messages when required property changes</h4>\n<ul>\n<li>Only messages created by the component, like validation messages, are cleared when the required property changes.</li>\n<li><code class=\"prettyprint\">messagesCustom</code> property is not cleared.</li>\n</ul>\n\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "defaultvalue": false,
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#userAssistanceDensity",
    "name": "userAssistanceDensity",
    "kind": "member",
    "longname": "oj-c.Checkbox#userAssistanceDensity",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nSpecifies the density of the form component's user assistance presentation. It can be shown inline with\nreserved rows to prevent reflow if a user assistance text shows up, inline without reserved rows that would\nreflow if a user assistance text shows up, or it can be shown compactly in a popup instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were \"reflow\".\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "ojvalues": [
      {
        "name": "reflow",
        "description": "Messages and required are shown inline under the field with no reserved space. Help & hints will appear in a popup with a help icon.",
        "displayName": "Reflow",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "efficient",
        "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
        "displayName": "Efficient",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "compact",
        "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
        "displayName": "Compact",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "type": {
      "names": [
        "\"compact\"",
        "\"reflow\"",
        "\"efficient\""
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#requiredMessageDetail",
    "name": "requiredMessageDetail",
    "kind": "member",
    "longname": "oj-c.Checkbox#requiredMessageDetail",
    "optional": true,
    "scope": "instance",
    "description": "<p>\nThe component-specific message detail when the required validation fails.\nIf the component needs a required validation error message that is different from the default,\nset this property. It should be a translated string.\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "type": {
      "names": [
        "string"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#valid",
    "name": "valid",
    "kind": "member",
    "longname": "oj-c.Checkbox#valid",
    "optional": true,
    "scope": "instance",
    "ojwriteback": true,
    "readonly": true,
    "description": "<p>\nThe current valid state of the component. It is evaluated on initial render.\nIt is re-evaluated\n<ul>\n  <li>when messagesCustom is updated,\n  since messagesCustom can be added by the app developer any time.</li>\n  <li>when showMessages() is called. Since showMessages() moves the\n  hidden messages into messages shown,\n  if the valid state was \"invalidHidden\" then it would become \"invalidShown\".</li>\n  <li>when the required property has changed. If a component is empty and has required\n  set, the valid state may be \"invalidHidden\" (if no invalid messages are being shown as well).\n  If required property is removed, the valid state would change to \"valid\".</li>\n</ul>\n</p>\n<p>\n Note: New valid states may be added to the list of valid values in future releases.\n Any new values will start with \"invalid\"\n if it is an invalid state, \"pending\" if it is pending state,\n and \"valid\" if it is a valid state.\n</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "ojvalues": [
      {
        "name": "valid",
        "description": "The component is valid",
        "displayName": "Valid",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "pending",
        "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
        "displayName": "Pending",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidHidden",
        "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Hidden",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidShown",
        "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Shown",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "type": {
      "names": [
        "\"pending\"",
        "\"valid\"",
        "\"invalidHidden\"",
        "\"invalidShown\""
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#value",
    "name": "value",
    "kind": "member",
    "longname": "oj-c.Checkbox#value",
    "optional": true,
    "scope": "instance",
    "ojwriteback": true,
    "description": "The value of the component.\n\n<p>\nWhen <code class=\"prettyprint\">value</code> property changes due to programmatic\nintervention, the component always clears all messages\nincluding <code class=\"prettyprint\">messagesCustom</code>, runs deferred validation, and\nalways refreshes UI display value.\n</p>\n\n<p>\nWhen the checkbox is cleared and the value is committed, the <code class=\"prettyprint\">value</code>\nproperty is set to <code>false</code>.\n</p>\n\n<h4>Running Validation</h4>\n<ul>\n<li>component always runs deferred validation; the\n<code class=\"prettyprint\">valid</code> property is updated with the result.</li>\n</ul>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "defaultvalue": false,
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#blur",
    "name": "blur",
    "kind": "function",
    "longname": "oj-c.Checkbox#blur",
    "description": "focuses the input field",
    "ojhidden": true,
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#focus",
    "name": "focus",
    "kind": "function",
    "longname": "oj-c.Checkbox#focus",
    "description": "blurs the input field",
    "ojhidden": true,
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#showMessages",
    "name": "showMessages",
    "kind": "function",
    "longname": "oj-c.Checkbox#showMessages",
    "description": "Takes all deferred messages and shows them.\nIt then updates the valid property;\ne.g., if the valid state was \"invalidHidden\" before showMessages(),\nthe valid state will become \"invalidShown\" after showMessages().\nIf there were no deferred messages this method simply returns.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#reset",
    "name": "reset",
    "kind": "function",
    "longname": "oj-c.Checkbox#reset",
    "description": "Resets the component by clearing all messages and messagesCustom attribute\nand updates the component's display value using the attribute value.\nUser entered value will be erased when this method is called.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#validate",
    "name": "validate",
    "kind": "function",
    "longname": "oj-c.Checkbox#validate",
    "description": "If enabled, validates the component's display value (or undefined if display value is empty) and updates the value\noption by performing the following steps.\n<ol>\n<li>All messages are cleared, including custom messages added by the app.</li>\n<li>\n At the end of validation if there are errors, the messages are shown.\n If there were no errors, then the value option is updated.\n</li>\n</ol>\n<p>If the component is readonly or disabled, returns a Promise that resolves to 'valid'\nwithout doing any validation.</p>",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "Promise"
          ]
        },
        "description": "The Promise resolves to \"valid\" if the component is disabled or readonly.\nThe Promise resolves to \"invalid\" if there were errors."
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#setProperty",
    "name": "setProperty",
    "kind": "function",
    "longname": "oj-c.Checkbox#setProperty",
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": "string"
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": "any"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#getProperty",
    "name": "getProperty",
    "kind": "function",
    "longname": "oj-c.Checkbox#getProperty",
    "description": "Retrieves the value of a property or a subproperty.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": "string"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#setProperties",
    "name": "setProperties",
    "kind": "function",
    "longname": "oj-c.Checkbox#setProperties",
    "description": "Performs a batch set of properties.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": "object"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox#Default",
    "name": "Default",
    "kind": "member",
    "longname": "oj-c.Checkbox#Default",
    "description": "The default slot is the content associated with the checkbox. This can be a label or a block of text.",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "scope": "instance",
    "ojchild": true,
    "ojslot": false
  },
  {
    "id": "oj-c.Checkbox.touchDoc",
    "name": "touchDoc",
    "kind": "member",
    "longname": "oj-c.Checkbox.touchDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tap</kbd></td>\n      <td> Select/unselect the checkbox</td>\n    </tr>\n    <tr>\n      <td>Checkbox's Label</td>\n      <td><kbd>Tap</kbd></td>\n      <td> Select/unselect the corresponding checkbox</td>\n   </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.Checkbox",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "ojfragment": true
  },
  {
    "id": "oj-c.Checkbox.keyboardDoc",
    "name": "keyboardDoc",
    "kind": "member",
    "longname": "oj-c.Checkbox.keyboardDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Set focus on the checkbox.\n      Disabled checkboxes are not focusable.</td>\n    </tr>\n    <tr>\n      <td>Checkbox</td>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles the checkbox; If the checkbox is unselected, it will select it and vice versa.</td>\n    </tr>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Tab</kbd></td>\n      <td>Focus goes to the next focusable item after the oj-c-checkbox or help icon if present.</td>\n    </tr>\n   <tr>\n      <td>Checkbox</td>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>Sets focus to the previous focusable item before the oj-c-checkbox.</td>\n    </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.Checkbox",
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "ojfragment": true
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox.DisplayOptionsProps",
    "name": "DisplayOptionsProps",
    "kind": "typedef",
    "longname": "oj-c.Checkbox.DisplayOptionsProps",
    "scope": "static",
    "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "properties": [
      {
        "name": "messages",
        "description": "Display options for auxiliary message text.",
        "optional": true,
        "type": {
          "names": [
            "\"none\"",
            "\"display\""
          ]
        },
        "defaultvalue": "\"display\""
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox.Help",
    "name": "Help",
    "kind": "typedef",
    "longname": "oj-c.Checkbox.Help",
    "scope": "static",
    "description": "Form component help information.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "properties": [
      {
        "name": "instruction",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to\nhelp the user understand what data to enter or select.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox.HelpHints",
    "name": "HelpHints",
    "kind": "typedef",
    "longname": "oj-c.Checkbox.HelpHints",
    "scope": "static",
    "description": "The helpHints object contains a definition property and a source property.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "properties": [
      {
        "name": "definition",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to help\nthe user understand what data to enter or select. help-hints could come from a help system.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "source",
        "description": "Help source URL associated with the component.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "sourceText",
        "description": "Custom text to be used for the source link.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.Checkbox",
    "id": "oj-c.Checkbox.ComponentMessageItem",
    "name": "ComponentMessageItem",
    "kind": "typedef",
    "longname": "oj-c.Checkbox.ComponentMessageItem",
    "scope": "static",
    "description": "A type for a single component message",
    "type": {
      "names": [
        "Object"
      ]
    },
    "meta": {
      "filename": "checkbox.tsx",
      "path": "web/components/oj-c/checkbox"
    },
    "properties": [
      {
        "name": "summary",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "detail",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "severity",
        "optional": true,
        "type": {
          "names": [
            "\"error\"",
            "\"confirmation\"",
            "\"info\"",
            "\"warning\""
          ]
        }
      }
    ]
  }
]