[
  {
    "pack": "oj-c",
    "id": "oj-c.DrawerPopup",
    "name": "DrawerPopup",
    "memberof": "oj-c",
    "longname": "oj-c.DrawerPopup",
    "kind": "class",
    "classdesc": "<h3 id=\"drawerPopupOverview-section\">\n  JET Drawer Popup\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#drawerPopupOverview-section\"></a>\n</h3>\n<p>Description: Drawer Popup adds a single slide-in side content alongside some primary content to an application window. It can be placed at 'start', 'end' or 'bottom' edge and it always overlays the page.</p>\n<pre class=\"prettyprint\">\n<code>\n&lt;oj-c-drawer-popup>\n   Start drawer content\n&lt;/oj-c-drawer-popup>\n\n&lt;oj-c-drawer-popup edge=\"end\" opened=\"true\">\n   End drawer content\n&lt;/oj-c-drawer-popup>\n\n&lt;oj-c-drawer-popup edge=\"bottom\">\n   Bottom drawer content\n&lt;/oj-c-drawer-popup>\n\nMain section content\n</code></pre>\n\n<p id=\"drawer-popup-layout-section\">JET Drawer Popup and Drawer Layout look similar, but are intended to be used\nfor different purposes.</p>\n<p>Use Drawer Popup</p>\n<ul>\n  <li>If you need to display ‘overlay’ drawers attached to the edge of the viewport that stretch over the full viewport height or width.</li>\n  <li>If you need modality.</li>\n</ul>\n<p>Use Drawer Layout</p>\n<ul>\n  <li>If you need to switch between the ‘reflow’ display mode (big screens) and ‘overlay’ (small screens).</li>\n  <li>If the drawer should only fill a specific part of the viewport rather than take its full height (start/end) or full width (bottom).</li>\n  <li>If modality is not required.</li>\n</ul>\n\n<h3 id=\"keyboard-section\">\n  Keyboard End User Information\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#keyboard-section\"></a>\n</h3>\n<table class=\"keyboard-table\">\n <thead>\n   <tr>\n     <th>Target</th>\n     <th>Key</th>\n     <th>Action</th>\n   </tr>\n </thead>\n <tbody>\n   <tr>\n     <td>Drawer element</td>\n     <td><kbd>Esc</kbd></td>\n     <td>Close the drawer</td>\n   </tr>\n </tbody>\n</table>\n\n<h3 id=\"rtl-section\">\n  Reading direction\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#rtl-section\"></a>\n</h3>\n\n<p> Setting the reading direction (LTR or RTL) is supported by setting the <code class=\"prettyprint\">\"dir\"</code> attribute on the\n<code class=\"prettyprint\">&lt;html></code> element of the page. As with any JET component, in the unusual case that the reading direction\nis changed post-init, the page must be reloaded.</p>\n\n<h3 id=\"sizing\">\n  Sizing\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#sizing\"></a>\n</h3>\n\n<p>Side drawers always stretch to viewport's height and the bottom one to its width.\nThe other axis dimension is not predefined. This dimension's size is determined by its content.\nIf you want to set a custom size you can use units like px, rem, etc.\nHowever because there is no fixed-size parent percentages (%) won’t work,\nbut you can use vw (viewport width) or vh (viewport height) units to achieve a similar effect.</p>\n<ul>\n  <li>Note the built-in minimal and maximal width of side drawers.</li>\n  <li>Note that DrawerPopup animates opening and closing. However, it is app developer's responsibility to add animations for custom runtime changes to a drawer size. See the 'Sizing' cookbook demo for an example.</li>\n</ul>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-drawer-popup",
    "tagWithBrackets": "<oj-c-drawer-popup>",
    "domInterface": "CDrawerPopupElement",
    "ojPageTitle": "&lt;oj-c-drawer-popup>",
    "ojcomponent": true,
    "isvcomponent": true,
    "camelCaseName": "DrawerPopup",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CDrawerPopupElement extends JetElement<DrawerPopupElementSettableProperties>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CDrawerPopupElement extends JetElement<DrawerPopupElementSettableProperties>"
      }
    ],
    "since": "16.0.0",
    "tsdeprecated": [
      {
        "type": "supersedes",
        "since": "17.0.0",
        "value": [
          "oj-drawer-popup"
        ]
      }
    ],
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "ojmodule": "drawer-popup"
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#opened",
    "name": "opened",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#opened",
    "optional": false,
    "scope": "instance",
    "ojwriteback": true,
    "description": "Specifies whether the Drawer is open.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "defaultvalue": false,
    "type": {
      "names": [
        "boolean"
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#modality",
    "name": "modality",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#modality",
    "optional": true,
    "scope": "instance",
    "description": "Specifies the modality of the drawer.\nSupported detail values are:\n<p><code>modal</code>, <code>modeless</code></p>",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "defaultvalue": "\"modal\"",
    "type": {
      "names": [
        "\"modal\"",
        "\"modeless\""
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#edge",
    "name": "edge",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#edge",
    "optional": true,
    "scope": "instance",
    "description": "Specifies at what edge the drawer opens.\nSupported values are:\n<p><code>start</code>, <code>end</code>, <code>bottom</code></p>\nDefault is <code>start</code>.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "defaultvalue": "\"start\"",
    "type": {
      "names": [
        "\"end\"",
        "\"start\"",
        "\"bottom\""
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#autoDismiss",
    "name": "autoDismiss",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#autoDismiss",
    "optional": true,
    "scope": "instance",
    "description": "Specifies whether a click on the scrim closes the drawer.\nSupported values are:\n<p><code>focus-loss</code>, <code>none</code></p>\nDefault is <code>focus-loss</code>.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "defaultvalue": "\"focus-loss\"",
    "type": {
      "names": [
        "\"none\"",
        "\"focus-loss\""
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#closeGesture",
    "name": "closeGesture",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#closeGesture",
    "optional": true,
    "scope": "instance",
    "description": "Specifies whether a gesture closes the drawer.\nSupported values are:\n<p><code>swipe</code>, <code>none</code></p>\nDefault is <code>swipe</code>.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "defaultvalue": "\"swipe\"",
    "type": {
      "names": [
        "\"none\"",
        "\"swipe\""
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#backgroundColor",
    "name": "backgroundColor",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#backgroundColor",
    "optional": true,
    "scope": "instance",
    "description": "Specifies background color of the Drawer.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "type": {
      "names": [
        "string"
      ]
    }
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#setProperty",
    "name": "setProperty",
    "kind": "function",
    "longname": "oj-c.DrawerPopup#setProperty",
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": "string"
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": "any"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#getProperty",
    "name": "getProperty",
    "kind": "function",
    "longname": "oj-c.DrawerPopup#getProperty",
    "description": "Retrieves the value of a property or a subproperty.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": "string"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#setProperties",
    "name": "setProperties",
    "kind": "function",
    "longname": "oj-c.DrawerPopup#setProperties",
    "description": "Performs a batch set of properties.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": "object"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#event:ojBeforeClose",
    "name": "ojBeforeClose",
    "kind": "event",
    "longname": "oj-c.DrawerPopup#event:ojBeforeClose",
    "description": "Triggered immediately before the drawer closes.\nCall <code class=\"prettyprint\">event.preventDefault()</code> in the event listener to veto the event synchronously, which prevents the drawer from closing.\nCall <code class=\"prettyprint\">event.detail.accept(Promise.reject());</code> in the event listener to veto the event asynchronously, which prevents the drawer from closing.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance",
    "properties": [
      {
        "name": "accept",
        "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ]
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#event:ojClose",
    "name": "ojClose",
    "kind": "event",
    "longname": "oj-c.DrawerPopup#event:ojClose",
    "description": "Triggered immediately after the drawer closes.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance"
  },
  {
    "memberof": "oj-c.DrawerPopup",
    "id": "oj-c.DrawerPopup#Default",
    "name": "Default",
    "kind": "member",
    "longname": "oj-c.DrawerPopup#Default",
    "description": "The default slot is the content of the Drawer Popup.",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "scope": "instance",
    "ojchild": true,
    "ojslot": false
  },
  {
    "id": "oj-c.DrawerPopup.keyboardDoc",
    "name": "keyboardDoc",
    "kind": "member",
    "longname": "oj-c.DrawerPopup.keyboardDoc",
    "description": "<table class=\"keyboard-table\">\n <thead>\n   <tr>\n     <th>Target</th>\n     <th>Key</th>\n     <th>Action</th>\n   </tr>\n </thead>\n <tbody>\n   <tr>\n     <td>Drawer element</td>\n     <td><kbd>Esc</kbd></td>\n     <td>Close the drawer</td>\n   </tr>\n </tbody>\n</table>",
    "memberof": "oj-c.DrawerPopup",
    "meta": {
      "filename": "drawer-popup.tsx",
      "path": "web/components/oj-c/drawer-popup"
    },
    "ojfragment": true
  }
]